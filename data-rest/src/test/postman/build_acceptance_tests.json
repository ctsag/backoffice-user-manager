{
	"info": {
		"_postman_id": "63eb26ee-4dd4-4171-b164-3fb229174073",
		"name": "Backoffice User Manager (JPA)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Health check",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d03e398c-d032-4634-a83b-111b88c5bad7",
						"exec": [
							"pm.test(\"Has a 200 OK status\", () => {\r",
							"    const response = pm.response;\r",
							"    pm.expect(response.code).to.eql(200);\r",
							"    pm.expect(response.status).to.eql(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Service status is UP\", () => {\r",
							"    const jsonData = pm.response.json();    \r",
							"    pm.expect(jsonData.status).to.eql(\"UP\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{Base URL}}/actuator/health",
					"host": [
						"{{Base URL}}"
					],
					"path": [
						"actuator",
						"health"
					]
				}
			},
			"response": []
		},
		{
			"name": "Entry point check",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "6bbc6353-9524-4a3a-ab0b-12114ae2b178",
						"exec": [
							"pm.test(\"Has a 200 OK status\", () => {\r",
							"    const response = pm.response;\r",
							"    pm.expect(response.code).to.eql(200);\r",
							"    pm.expect(response.status).to.eql(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Has a link to the users endpoint\", () => {\r",
							"    const jsonData = pm.response.json();\r",
							"    const expectedLink = pm.request.url.toString() + \"users\";\r",
							"    pm.expect(jsonData._links.users.href).to.include(expectedLink);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:50001",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "50001"
				}
			},
			"response": []
		},
		{
			"name": "Create a user",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a666e73f-4966-46ca-bf07-882cfb28894b",
						"exec": [
							"pm.test(\"Has a 201 Created status\", () => {\r",
							"    const response = pm.response;\r",
							"    pm.expect(response.code).to.eql(201);\r",
							"    pm.expect(response.status).to.eql(\"Created\");\r",
							"});\r",
							"\r",
							"pm.test(\"Has a link to the created user\", () => {\r",
							"    const jsonData = pm.response.json();\r",
							"    const expectedUser = {\r",
							"        \"firstName\": \"Kostas\",\r",
							"        \"lastName\": \"Stefanis\",\r",
							"        \"_links\": {\r",
							"          \"self\": {\r",
							"            \"href\": pm.request.url.toString() + \"/1\"\r",
							"          },\r",
							"          \"backofficeUser\": {\r",
							"            \"href\": pm.request.url.toString() + \"/1\"\r",
							"          }\r",
							"        }\r",
							"    };\r",
							"    pm.expect(jsonData).to.deep.include(expectedUser);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{ \n    \"username\": \"ktsagkou\",\n    \"password\": \"123abc!\",\n\t\"firstName\" : \"Kostas\",\n\t\"lastName\" : \"Stefanis\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Users endpoint}}",
					"host": [
						"{{Users endpoint}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a permission",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d5fd0dde-3783-4fdf-8d83-0fb77ad39c99",
						"exec": [
							"pm.test(\"Has a 201 Created status\", () => {\r",
							"    const response = pm.response;\r",
							"    pm.expect(response.code).to.eql(201);\r",
							"    pm.expect(response.status).to.eql(\"Created\");\r",
							"});\r",
							"\r",
							"pm.test(\"Has a link to the created user\", () => {\r",
							"    const jsonData = pm.response.json();\r",
							"    const expectedUser = {\r",
							"        \"firstName\": \"Kostas\",\r",
							"        \"lastName\": \"Stefanis\",\r",
							"        \"_links\": {\r",
							"          \"self\": {\r",
							"            \"href\": pm.request.url.toString() + \"/1\"\r",
							"          },\r",
							"          \"backofficeUser\": {\r",
							"            \"href\": pm.request.url.toString() + \"/1\"\r",
							"          }\r",
							"        }\r",
							"    };\r",
							"    pm.expect(jsonData).to.deep.include(expectedUser);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{ \n\t\"name\" : \"CanViewSensitiveData\",\n    \"description\" : \"Can view sensitive data!\",\n\t\"type\" : \"BETFAIR\",\n    \"displayOrder\" : 1\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Permissions endpoint}}",
					"host": [
						"{{Permissions endpoint}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "List all users",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "bb27a3e7-075b-4fe3-9d1d-3106b3019d0a",
						"exec": [
							"pm.test(\"Has a 200 OK status\", () => {\r",
							"    const response = pm.response;\r",
							"    pm.expect(response.code).to.eql(200);\r",
							"    pm.expect(response.status).to.eql(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Has a link to the specified user\", () => {\r",
							"    const jsonData = pm.response.json();\r",
							"    const expectedUser = {\r",
							"        \"firstName\": \"Kostas\",\r",
							"        \"lastName\": \"Stefanis\",\r",
							"        \"_links\": {\r",
							"            \"self\": {\r",
							"                \"href\": pm.request.url.toString() + \"/1\"\r",
							"            },\r",
							"            \"backofficeUser\": {\r",
							"                \"href\": pm.request.url.toString() + \"/1\"\r",
							"            }\r",
							"        }\r",
							"    };\r",
							"    pm.expect(jsonData._embedded.users).to.deep.include(expectedUser);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:50001/users",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "50001",
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "List all permissions",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "201b0fd0-e240-4e66-bc2b-61a850872d68",
						"exec": [
							"pm.test(\"Has a 200 OK status\", () => {\r",
							"    const response = pm.response;\r",
							"    pm.expect(response.code).to.eql(200);\r",
							"    pm.expect(response.status).to.eql(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Has a link to the specified user\", () => {\r",
							"    const jsonData = pm.response.json();\r",
							"    const expectedUser = {\r",
							"        \"firstName\": \"Kostas\",\r",
							"        \"lastName\": \"Stefanis\",\r",
							"        \"_links\": {\r",
							"            \"self\": {\r",
							"                \"href\": pm.request.url.toString() + \"/1\"\r",
							"            },\r",
							"            \"backofficeUser\": {\r",
							"                \"href\": pm.request.url.toString() + \"/1\"\r",
							"            }\r",
							"        }\r",
							"    };\r",
							"    pm.expect(jsonData._embedded.users).to.deep.include(expectedUser);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:50001/users",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "50001",
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Retrieve created user",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "590582ec-8c94-463d-9dc7-c93cc3ff0e86",
						"exec": [
							"pm.test(\"Has a 200 OK status\", () => {\r",
							"    const response = pm.response;\r",
							"    pm.expect(response.code).to.eql(200);\r",
							"    pm.expect(response.status).to.eql(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Retuns the created user\", () => {\r",
							"    const jsonData = pm.response.json();\r",
							"    const expectedUser = {\r",
							"        \"firstName\": \"Kostas\",\r",
							"        \"lastName\": \"Stefanis\",\r",
							"        \"_links\": {\r",
							"            \"self\": {\r",
							"                \"href\": pm.request.url.toString()\r",
							"            },\r",
							"            \"backofficeUser\": {\r",
							"                \"href\": pm.request.url.toString()\r",
							"            }\r",
							"        }\r",
							"    };\r",
							"    pm.expect(jsonData).to.deep.include(expectedUser);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:50001/users/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "50001",
					"path": [
						"users",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Retrieve non existent user",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "06769e12-bd8a-49e4-8146-baeb7306a81a",
						"exec": [
							"pm.test(\"Has a 404 Not Found status\", () => {\r",
							"    const response = pm.response;\r",
							"    pm.expect(response.code).to.eql(404);\r",
							"    pm.expect(response.status).to.eql(\"Not Found\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:50001/users/2",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "50001",
					"path": [
						"users",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Retrieve created permission",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "469a98e5-3ba6-4fff-a9c7-89699ef8a580",
						"exec": [
							"pm.test(\"Has a 404 Not Found status\", () => {\r",
							"    const response = pm.response;\r",
							"    pm.expect(response.code).to.eql(404);\r",
							"    pm.expect(response.status).to.eql(\"Not Found\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:50001/users/2",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "50001",
					"path": [
						"users",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Retrieve non existent permission",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "df62d8ce-6a5c-401a-b4f4-e5bc43da2e64",
						"exec": [
							"pm.test(\"Has a 404 Not Found status\", () => {\r",
							"    const response = pm.response;\r",
							"    pm.expect(response.code).to.eql(404);\r",
							"    pm.expect(response.status).to.eql(\"Not Found\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:50001/users/2",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "50001",
					"path": [
						"users",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update user via PATCH",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ac269c44-fcb3-4c11-aa45-e445fdbcec5b",
						"exec": [
							"pm.test(\"Has a 200 OK status\", () => {\r",
							"    const response = pm.response;\r",
							"    pm.expect(response.code).to.eql(200);\r",
							"    pm.expect(response.status).to.eql(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Returns the updated user\", () => {    \r",
							"    const jsonData = pm.response.json();\r",
							"    const expectedUser = {\r",
							"        \"firstName\": \"Kostas\",\r",
							"        \"lastName\": \"Tsagkournis\",\r",
							"        \"_links\": {\r",
							"            \"self\": {\r",
							"                \"href\": pm.request.url.toString()\r",
							"            },\r",
							"            \"backofficeUser\": {\r",
							"                \"href\": pm.request.url.toString()\r",
							"            }\r",
							"        }\r",
							"    };\r",
							"    pm.expect(jsonData).to.deep.include(expectedUser);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{ \n\t\"lastName\": \"Tsagkournis\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:50001/users/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "50001",
					"path": [
						"users",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update non existent user via PATCH",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "55c128e8-ce5f-4ca7-a264-1fec7f93812d",
						"exec": [
							"pm.test(\"Has a 404 Not Found status\", () => {\r",
							"    const response = pm.response;\r",
							"    pm.expect(response.code).to.eql(404);\r",
							"    pm.expect(response.status).to.eql(\"Not Found\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{ \n\t\"lastName\": \"Tsagkournis\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:50001/users/2",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "50001",
					"path": [
						"users",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update permission via PATCH",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "26f0e9f8-891c-4b4e-84ac-16411c1ce63d",
						"exec": [
							"pm.test(\"Has a 200 OK status\", () => {\r",
							"    const response = pm.response;\r",
							"    pm.expect(response.code).to.eql(200);\r",
							"    pm.expect(response.status).to.eql(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Returns the updated user\", () => {    \r",
							"    const jsonData = pm.response.json();\r",
							"    const expectedUser = {\r",
							"        \"firstName\": \"Kostas\",\r",
							"        \"lastName\": \"Tsagkournis\",\r",
							"        \"_links\": {\r",
							"            \"self\": {\r",
							"                \"href\": pm.request.url.toString()\r",
							"            },\r",
							"            \"backofficeUser\": {\r",
							"                \"href\": pm.request.url.toString()\r",
							"            }\r",
							"        }\r",
							"    };\r",
							"    pm.expect(jsonData).to.deep.include(expectedUser);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{ \n\t\"lastName\": \"Tsagkournis\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:50001/users/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "50001",
					"path": [
						"users",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update non existent permission via PATCH",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8e0f4c09-9310-42c8-9c77-268211528ac2",
						"exec": [
							"pm.test(\"Has a 404 Not Found status\", () => {\r",
							"    const response = pm.response;\r",
							"    pm.expect(response.code).to.eql(404);\r",
							"    pm.expect(response.status).to.eql(\"Not Found\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{ \n\t\"description\": \"Can view GDPR data\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Permissions endpoint}}/CanDeleteSensitiveData",
					"host": [
						"{{Permissions endpoint}}"
					],
					"path": [
						"CanDeleteSensitiveData"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update user via PUT",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "755ce2ba-3960-4a7d-bf82-09dc6ab45e83",
						"exec": [
							"pm.test(\"Has a 200 OK status\", () => {\r",
							"    const response = pm.response;\r",
							"    pm.expect(response.code).to.eql(200);\r",
							"    pm.expect(response.status).to.eql(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Returns the updated user\", () => {    \r",
							"    const jsonData = pm.response.json();\r",
							"    const expectedUser = {\r",
							"        \"firstName\": \"Kostis\",\r",
							"        \"lastName\": \"Tsagkournis\",\r",
							"        \"_links\": {\r",
							"            \"self\": {\r",
							"                \"href\": pm.request.url.toString()\r",
							"            },\r",
							"            \"backofficeUser\": {\r",
							"                \"href\": pm.request.url.toString()\r",
							"            }\r",
							"        }\r",
							"    };\r",
							"    pm.expect(jsonData).to.deep.include(expectedUser);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{ \n    \"username\": \"ktsagkou\",\n    \"password\": \"123abc!\",\n\t\"firstName\" : \"Kostas\",\n\t\"lastName\" : \"Stefanis\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Users endpoint}}/1",
					"host": [
						"{{Users endpoint}}"
					],
					"path": [
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update user via PUT with partial data",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "769a5ca5-8944-4ff8-b506-b7853b48bc29",
						"exec": [
							"pm.test(\"Has a 200 OK status\", () => {\r",
							"    const response = pm.response;\r",
							"    pm.expect(response.code).to.eql(200);\r",
							"    pm.expect(response.status).to.eql(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Returns the updated user with nulls in non provided attributes\", () => {    \r",
							"    const jsonData = pm.response.json();\r",
							"    const expectedUser = {\r",
							"        \"firstName\": null,\r",
							"        \"lastName\": \"Tsagkournis\",\r",
							"        \"_links\": {\r",
							"            \"self\": {\r",
							"                \"href\": pm.request.url.toString()\r",
							"            },\r",
							"            \"backofficeUser\": {\r",
							"                \"href\": pm.request.url.toString()\r",
							"            }\r",
							"        }\r",
							"    };\r",
							"    pm.expect(jsonData).to.deep.include(expectedUser);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{ \n\t\"lastName\": \"Tsagkournis\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Users endpoint}}/1",
					"host": [
						"{{Users endpoint}}"
					],
					"path": [
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update non existent user via PUT",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a8ed07be-16c6-47c0-acb2-a6d8226d6fb0",
						"exec": [
							"pm.test(\"Has a 201 Created status\", () => {\r",
							"    const response = pm.response;\r",
							"    pm.expect(response.code).to.eql(201);\r",
							"    pm.expect(response.status).to.eql(\"Created\");\r",
							"});\r",
							"\r",
							"pm.test(\"Has a link to the created user\", () => {\r",
							"    const jsonData = pm.response.json();\r",
							"    const expectedUser = {\r",
							"        \"firstName\": \"Kostis\",\r",
							"        \"lastName\": \"Tsagkournis\",\r",
							"        \"_links\": {\r",
							"          \"self\": {\r",
							"            \"href\": pm.request.url.toString()\r",
							"          },\r",
							"          \"backofficeUser\": {\r",
							"            \"href\": pm.request.url.toString()\r",
							"          }\r",
							"        }\r",
							"    };\r",
							"    pm.expect(jsonData).to.deep.include(expectedUser);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{ \n    \"firstName\": \"Kostis\",\n\t\"lastName\": \"Tsagkournis\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Users endpoint}}/99",
					"host": [
						"{{Users endpoint}}"
					],
					"path": [
						"99"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update permission via PUT",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "34955525-ceb7-4cf1-b32a-fc9cd832aa2e",
						"exec": [
							"pm.test(\"Has a 200 OK status\", () => {\r",
							"    const response = pm.response;\r",
							"    pm.expect(response.code).to.eql(200);\r",
							"    pm.expect(response.status).to.eql(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Returns the updated user\", () => {    \r",
							"    const jsonData = pm.response.json();\r",
							"    const expectedUser = {\r",
							"        \"firstName\": \"Kostis\",\r",
							"        \"lastName\": \"Tsagkournis\",\r",
							"        \"_links\": {\r",
							"            \"self\": {\r",
							"                \"href\": pm.request.url.toString()\r",
							"            },\r",
							"            \"backofficeUser\": {\r",
							"                \"href\": pm.request.url.toString()\r",
							"            }\r",
							"        }\r",
							"    };\r",
							"    pm.expect(jsonData).to.deep.include(expectedUser);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{ \n\t\"name\" : \"CanViewSensitiveData\",\n    \"description\" : \"Can view GDPR data\",\n\t\"type\" : \"BETFAIR\",\n    \"displayOrder\" : 1\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Permissions endpoint}}/1",
					"host": [
						"{{Permissions endpoint}}"
					],
					"path": [
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update permission via PUT with partial data",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ae695f33-a76d-4baf-9f54-466a4e6c68fa",
						"exec": [
							"pm.test(\"Has a 200 OK status\", () => {\r",
							"    const response = pm.response;\r",
							"    pm.expect(response.code).to.eql(200);\r",
							"    pm.expect(response.status).to.eql(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Returns the updated user with nulls in non provided attributes\", () => {    \r",
							"    const jsonData = pm.response.json();\r",
							"    const expectedUser = {\r",
							"        \"firstName\": null,\r",
							"        \"lastName\": \"Tsagkournis\",\r",
							"        \"_links\": {\r",
							"            \"self\": {\r",
							"                \"href\": pm.request.url.toString()\r",
							"            },\r",
							"            \"backofficeUser\": {\r",
							"                \"href\": pm.request.url.toString()\r",
							"            }\r",
							"        }\r",
							"    };\r",
							"    pm.expect(jsonData).to.deep.include(expectedUser);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{ \n    \"description\" : \"Can view sensitive data\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Permissions endpoint}}/CanViewSensitiveData",
					"host": [
						"{{Permissions endpoint}}"
					],
					"path": [
						"CanViewSensitiveData"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update non existent permission via PUT",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "723f0cd0-9e66-401f-821a-150aaf776779",
						"exec": [
							"pm.test(\"Has a 201 Created status\", () => {\r",
							"    const response = pm.response;\r",
							"    pm.expect(response.code).to.eql(201);\r",
							"    pm.expect(response.status).to.eql(\"Created\");\r",
							"});\r",
							"\r",
							"pm.test(\"Has a link to the created user\", () => {\r",
							"    const jsonData = pm.response.json();\r",
							"    const expectedUser = {\r",
							"        \"firstName\": \"Kostis\",\r",
							"        \"lastName\": \"Tsagkournis\",\r",
							"        \"_links\": {\r",
							"          \"self\": {\r",
							"            \"href\": pm.request.url.toString()\r",
							"          },\r",
							"          \"backofficeUser\": {\r",
							"            \"href\": pm.request.url.toString()\r",
							"          }\r",
							"        }\r",
							"    };\r",
							"    pm.expect(jsonData).to.deep.include(expectedUser);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{ \n\t\"name\" : \"CanDeleteSensitiveData\",\n    \"description\" : \"Can delete GDPR data\",\n\t\"type\" : \"BETFAIR\",\n    \"displayOrder\" : 1\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Permissions endpoint}}/CanDeleteSensitiveData",
					"host": [
						"{{Permissions endpoint}}"
					],
					"path": [
						"CanDeleteSensitiveData"
					]
				}
			},
			"response": []
		},
		{
			"name": "Retrieve users by last name",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c9ddd89b-9be4-4b83-b69a-c40734e00924",
						"exec": [
							"pm.test(\"Has a 200 OK status\", () => {\r",
							"    const response = pm.response;\r",
							"    pm.expect(response.code).to.eql(200);\r",
							"    pm.expect(response.status).to.eql(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Retuns both created users\", () => {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData._embedded.users).to.have.length(2);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{Users endpoint}}/search/findByLastName?name=Tsagkournis",
					"host": [
						"{{Users endpoint}}"
					],
					"path": [
						"search",
						"findByLastName"
					],
					"query": [
						{
							"key": "name",
							"value": "Tsagkournis"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Retrieve permissions by type",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0f65e3d0-703c-47eb-9730-65065de70aa8",
						"exec": [
							"pm.test(\"Has a 200 OK status\", () => {\r",
							"    const response = pm.response;\r",
							"    pm.expect(response.code).to.eql(200);\r",
							"    pm.expect(response.status).to.eql(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Retuns both created users\", () => {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData._embedded.users).to.have.length(2);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{Permissions endpoint}}/search/findByType?type=BETFAIR",
					"host": [
						"{{Permissions endpoint}}"
					],
					"path": [
						"search",
						"findByType"
					],
					"query": [
						{
							"key": "type",
							"value": "BETFAIR"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete first created user",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a6dab1ce-f7a6-41f8-b0ee-eb5077ee1af5",
						"exec": [
							"pm.test(\"Has a 204 No Content status\", () => {\r",
							"    const response = pm.response;\r",
							"    pm.expect(response.code).to.eql(204);\r",
							"    pm.expect(response.status).to.eql(\"No Content\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{Users endpoint}}/1",
					"host": [
						"{{Users endpoint}}"
					],
					"path": [
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete first created permission",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "dae59333-a504-41a6-a228-2357d64d9a53",
						"exec": [
							"pm.test(\"Has a 204 No Content status\", () => {\r",
							"    const response = pm.response;\r",
							"    pm.expect(response.code).to.eql(204);\r",
							"    pm.expect(response.status).to.eql(\"No Content\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{Users endpoint}}/1",
					"host": [
						"{{Users endpoint}}"
					],
					"path": [
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete second created user",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "19c4744e-c468-444c-bea2-390f12265125",
						"exec": [
							"pm.test(\"Has a 204 No Content status\", () => {\r",
							"    const response = pm.response;\r",
							"    pm.expect(response.code).to.eql(204);\r",
							"    pm.expect(response.status).to.eql(\"No Content\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{Users endpoint}}/2",
					"host": [
						"{{Users endpoint}}"
					],
					"path": [
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete second created permission",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0ad04ed8-4e23-4c5a-bc73-49f44179aef9",
						"exec": [
							"pm.test(\"Has a 204 No Content status\", () => {\r",
							"    const response = pm.response;\r",
							"    pm.expect(response.code).to.eql(204);\r",
							"    pm.expect(response.status).to.eql(\"No Content\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{Users endpoint}}/2",
					"host": [
						"{{Users endpoint}}"
					],
					"path": [
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete non existent user",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ed764ac0-cef3-45ac-9310-c96ee004fa54",
						"exec": [
							"pm.test(\"Has a 404 Not Found status\", () => {\r",
							"    const response = pm.response;\r",
							"    pm.expect(response.code).to.eql(404);\r",
							"    pm.expect(response.status).to.eql(\"Not Found\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{Users endpoint}}/99",
					"host": [
						"{{Users endpoint}}"
					],
					"path": [
						"99"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete non existent permission",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7acd084b-66b0-4352-940b-9dc0b2590fdb",
						"exec": [
							"pm.test(\"Has a 404 Not Found status\", () => {\r",
							"    const response = pm.response;\r",
							"    pm.expect(response.code).to.eql(404);\r",
							"    pm.expect(response.status).to.eql(\"Not Found\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{Users endpoint}}/99",
					"host": [
						"{{Users endpoint}}"
					],
					"path": [
						"99"
					]
				}
			},
			"response": []
		},
		{
			"name": "Retrieve a deleted user",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "cb7b9d60-b982-4773-ba12-5bfff8f8ca3c",
						"exec": [
							"pm.test(\"Has a 404 Not Found status\", () => {\r",
							"    const response = pm.response;\r",
							"    pm.expect(response.code).to.eql(404);\r",
							"    pm.expect(response.status).to.eql(\"Not Found\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:50001/users/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "50001",
					"path": [
						"users",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Retrieve a deleted permission",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4fd72f43-6f91-4ffa-9f02-be4cc50754ea",
						"exec": [
							"pm.test(\"Has a 404 Not Found status\", () => {\r",
							"    const response = pm.response;\r",
							"    pm.expect(response.code).to.eql(404);\r",
							"    pm.expect(response.status).to.eql(\"Not Found\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:50001/users/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "50001",
					"path": [
						"users",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "List all users",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e0790afb-92c9-4eee-8508-ac16bb8a93ca",
						"exec": [
							"pm.test(\"Has a 200 OK status\", () => {\r",
							"    const response = pm.response;\r",
							"    pm.expect(response.code).to.eql(200);\r",
							"    pm.expect(response.status).to.eql(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Returns an empty user list\", () => {\r",
							"    const jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData._embedded.users).to.be.empty;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{Users endpoint}}",
					"host": [
						"{{Users endpoint}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "List all permissions",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "61f20e30-91b3-4644-ab79-3179f212e559",
						"exec": [
							"pm.test(\"Has a 200 OK status\", () => {\r",
							"    const response = pm.response;\r",
							"    pm.expect(response.code).to.eql(200);\r",
							"    pm.expect(response.status).to.eql(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Returns an empty user list\", () => {\r",
							"    const jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData._embedded.users).to.be.empty;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{Permissions endpoint}}",
					"host": [
						"{{Permissions endpoint}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "91a9a7cf-7b7b-4baf-8175-9559e8c14006",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "18555344-9109-4a1c-99b8-7269dcf64666",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}