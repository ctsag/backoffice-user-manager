{
	"info": {
		"_postman_id": "a77c9522-5c9b-45ac-a2ed-54791c88ddea",
		"name": "Backoffice User Manager",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Service",
			"item": [
				{
					"name": "Health check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Returns a 200 OK status\", () => {\r",
									"    const response = pm.response;\r",
									"\r",
									"    pm.expect(response.code).to.equal(200);\r",
									"    pm.expect(response.status).to.equal(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content type is Spring Boot Actuator\", () => {\r",
									"    const response = pm.response;\r",
									"\r",
									"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/vnd.spring-boot.actuator.v3+json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Returns expected JSON schema\", () => {\r",
									"    const schema = pm.collectionVariables.get(\"Actuator health schema\");\r",
									"\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"Service status is UP\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData.status).to.equal(\"UP\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Health endpoint}}",
							"host": [
								"{{Health endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Entry point check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Returns a 200 OK status\", () => {\r",
									"    const response = pm.response; \r",
									"\r",
									"    pm.expect(response.code).to.equal(200);\r",
									"    pm.expect(response.status).to.equal(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content type is Hypermedia\", () => {\r",
									"    const response = pm.response;\r",
									"\r",
									"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Returns expected JSON schema\", () => {\r",
									"    const schema = pm.collectionVariables.get(\"Entry point schema\");\r",
									"    const jsonData = pm.response.json();\r",
									"\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"\r",
									"    pm.collectionVariables.set(\"Users endpoint\", jsonData._links.users.href);\r",
									"    pm.collectionVariables.set(\"Groups endpoint\", jsonData._links.groups.href);\r",
									"    pm.collectionVariables.set(\"Permissions endpoint\", jsonData._links.permissions.href);\r",
									"    pm.collectionVariables.set(\"Positions endpoint\", jsonData._links.positions.href);\r",
									"    pm.collectionVariables.set(\"Permission types endpoint\", jsonData._links.permissionTypes.href);    \r",
									"    pm.collectionVariables.set(\"Timezones endpoint\", jsonData._links.timezones.href);\r",
									"    pm.collectionVariables.set(\"Jurisdictions endpoint\", jsonData._links.jurisdictions.href);\r",
									"    pm.collectionVariables.set(\"Flag definitions endpoint\", jsonData._links.flagDefinitions.href);\r",
									"    pm.collectionVariables.set(\"Flags endpoint\", jsonData._links.flags.href);\r",
									"    pm.collectionVariables.set(\"Profile endpoint\", jsonData._links.profile.href);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Home endpoint}}",
							"host": [
								"{{Home endpoint}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Resources",
			"item": [
				{
					"name": "User",
					"item": [
						{
							"name": "Create a user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 201 Created status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(201);\r",
											"    pm.expect(response.status).to.equal(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"User item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.username).to.equal(pm.collectionVariables.get(\"Username\"));\r",
											"    pm.expect(jsonData.firstName).to.equal(pm.collectionVariables.get(\"First name\"));\r",
											"    pm.expect(jsonData.lastName).to.equal(pm.collectionVariables.get(\"Last name\"));\r",
											"    pm.expect(jsonData.email).to.equal(pm.collectionVariables.get(\"Email\"));\r",
											"    pm.expect(jsonData.status).to.equal(pm.collectionVariables.get(\"User status\"));\r",
											"    pm.expect(jsonData.passwordExpires).to.equal(pm.collectionVariables.get(\"Password expires\"));\r",
											"    pm.expect(jsonData.agent).to.be.null;\r",
											"    pm.expect(jsonData.phoneSwitch).to.be.null;\r",
											"    pm.expect(jsonData.overrideCode).to.be.null;\r",
											"\r",
											"    pm.collectionVariables.set(\"Created user\", jsonData._links.user.href);\r",
											"    pm.collectionVariables.set(\"Created user's timezone\", jsonData._links.timezone.href);\r",
											"    pm.collectionVariables.set(\"Created user's permissions\", jsonData._links.permissions.href);\r",
											"    pm.collectionVariables.set(\"Created user's position\", jsonData._links.position.href);\r",
											"    pm.collectionVariables.set(\"Created user's owned groups\", jsonData._links.ownedGroups.href);\r",
											"    pm.collectionVariables.set(\"Created user's groups\", jsonData._links.groups.href);\r",
											"    pm.collectionVariables.set(\"Created user's flags\", jsonData._links.flags.href);\r",
											"    pm.collectionVariables.set(\"Created user's id\", jsonData.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"username\": \"{{Username}}\",\n    \"password\": \"{{Password}}\",\n    \"firstName\": \"{{First name}}\",\n    \"lastName\": \"{{Last name}}\",\n    \"email\": \"{{Email}}\",\n    \"status\": \"{{User status}}\",\n    \"passwordExpires\": \"{{Password expires}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Users endpoint}}",
									"host": [
										"{{Users endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "List all users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"User collection schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the created user\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const users = jsonData._embedded.users;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < users.length; i++) {\r",
											"        if (users[i]._links.user.href == pm.collectionVariables.get(\"Created user\")) {\r",
											"            pm.expect(users[i].id).to.equal(pm.collectionVariables.get(\"Created user's id\"));\r",
											"            pm.expect(users[i].username).to.equal(pm.collectionVariables.get(\"Username\"));\r",
											"            pm.expect(users[i].firstName).to.equal(pm.collectionVariables.get(\"First name\"));\r",
											"            pm.expect(users[i].lastName).to.equal(pm.collectionVariables.get(\"Last name\"));\r",
											"            pm.expect(users[i].email).to.equal(pm.collectionVariables.get(\"Email\"));\r",
											"            pm.expect(users[i].status).to.equal(pm.collectionVariables.get(\"User status\"));\r",
											"            pm.expect(users[i].passwordExpires).to.equal(pm.collectionVariables.get(\"Password expires\"));\r",
											"            pm.expect(users[i].agent).to.be.null;\r",
											"            pm.expect(users[i].phoneSwitch).to.be.null;\r",
											"            pm.expect(users[i].overrideCode).to.be.null;\r",
											"            pm.expect(users[i]._links.self.href).to.equal(pm.collectionVariables.get(\"Created user\"));\r",
											"            pm.expect(users[i]._links.user.href).to.equal(pm.collectionVariables.get(\"Created user\"));\r",
											"            pm.expect(users[i]._links.permissions.href).to.equal(pm.collectionVariables.get(\"Created user's permissions\"));\r",
											"            pm.expect(users[i]._links.timezone.href).to.equal(pm.collectionVariables.get(\"Created user's timezone\"));\r",
											"            pm.expect(users[i]._links.position.href).to.equal(pm.collectionVariables.get(\"Created user's position\"));\r",
											"            pm.expect(users[i]._links.ownedGroups.href).to.equal(pm.collectionVariables.get(\"Created user's owned groups\"));\r",
											"            pm.expect(users[i]._links.groups.href).to.equal(pm.collectionVariables.get(\"Created user's groups\"));\r",
											"            pm.expect(users[i]._links.flags.href).to.equal(pm.collectionVariables.get(\"Created user's flags\"));\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Users endpoint}}",
									"host": [
										"{{Users endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve created user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"User item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.id).to.equal(pm.collectionVariables.get(\"Created user's id\"));\r",
											"    pm.expect(jsonData.username).to.equal(pm.collectionVariables.get(\"Username\"));\r",
											"    pm.expect(jsonData.firstName).to.equal(pm.collectionVariables.get(\"First name\"));\r",
											"    pm.expect(jsonData.lastName).to.equal(pm.collectionVariables.get(\"Last name\"));\r",
											"    pm.expect(jsonData.email).to.equal(pm.collectionVariables.get(\"Email\"));\r",
											"    pm.expect(jsonData.status).to.equal(pm.collectionVariables.get(\"User status\"));\r",
											"    pm.expect(jsonData.passwordExpires).to.equal(pm.collectionVariables.get(\"Password expires\"));\r",
											"    pm.expect(jsonData.agent).to.be.null;\r",
											"    pm.expect(jsonData.phoneSwitch).to.be.null;\r",
											"    pm.expect(jsonData.overrideCode).to.be.null;\r",
											"\r",
											"    pm.expect(jsonData._links.self.href).to.equal(pm.collectionVariables.get(\"Created user\"));\r",
											"    pm.expect(jsonData._links.user.href).to.equal(pm.collectionVariables.get(\"Created user\"));\r",
											"    pm.expect(jsonData._links.permissions.href).to.equal(pm.collectionVariables.get(\"Created user's permissions\"));\r",
											"    pm.expect(jsonData._links.timezone.href).to.equal(pm.collectionVariables.get(\"Created user's timezone\"));\r",
											"    pm.expect(jsonData._links.position.href).to.equal(pm.collectionVariables.get(\"Created user's position\"));\r",
											"    pm.expect(jsonData._links.ownedGroups.href).to.equal(pm.collectionVariables.get(\"Created user's owned groups\"));\r",
											"    pm.expect(jsonData._links.groups.href).to.equal(pm.collectionVariables.get(\"Created user's groups\"));\r",
											"    pm.expect(jsonData._links.flags.href).to.equal(pm.collectionVariables.get(\"Created user's flags\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created user}}",
									"host": [
										"{{Created user}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve non existent user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(404);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: not found\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Users endpoint}}/{{Incorrect id}}",
									"host": [
										"{{Users endpoint}}"
									],
									"path": [
										"{{Incorrect id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update user via PUT with partial data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"User item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.id).to.equal(pm.collectionVariables.get(\"Created user's id\"));\r",
											"    pm.expect(jsonData.username).to.equal(pm.collectionVariables.get(\"Username\"));\r",
											"    pm.expect(jsonData.firstName).to.be.null;\r",
											"    pm.expect(jsonData.lastName).to.equal(pm.collectionVariables.get(\"Modified last name\"));\r",
											"    pm.expect(jsonData.email).to.be.null;\r",
											"    pm.expect(jsonData.status).to.equal(\"A\");\r",
											"    pm.expect(jsonData.passwordExpires).to.equal(\"Y\");\r",
											"    pm.expect(jsonData.agent).to.be.null;\r",
											"    pm.expect(jsonData.phoneSwitch).to.be.null;\r",
											"    pm.expect(jsonData.overrideCode).to.be.null;\r",
											"\r",
											"    pm.expect(jsonData._links.self.href).to.equal(pm.collectionVariables.get(\"Created user\"));\r",
											"    pm.expect(jsonData._links.user.href).to.equal(pm.collectionVariables.get(\"Created user\"));\r",
											"    pm.expect(jsonData._links.timezone.href).to.equal(pm.collectionVariables.get(\"Created user's timezone\"));\r",
											"    pm.expect(jsonData._links.permissions.href).to.equal(pm.collectionVariables.get(\"Created user's permissions\"));\r",
											"    pm.expect(jsonData._links.position.href).to.equal(pm.collectionVariables.get(\"Created user's position\"));\r",
											"    pm.expect(jsonData._links.ownedGroups.href).to.equal(pm.collectionVariables.get(\"Created user's owned groups\"));\r",
											"    pm.expect(jsonData._links.groups.href).to.equal(pm.collectionVariables.get(\"Created user's groups\"));\r",
											"    pm.expect(jsonData._links.flags.href).to.equal(pm.collectionVariables.get(\"Created user's flags\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"username\": \"{{Username}}\",\n    \"password\": \"{{Password}}\",\n    \"lastName\": \"{{Modified last name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created user}}",
									"host": [
										"{{Created user}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update user via PUT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"User item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.id).to.equal(pm.collectionVariables.get(\"Created user's id\"));\r",
											"    pm.expect(jsonData.username).to.equal(pm.collectionVariables.get(\"Username\"));\r",
											"    pm.expect(jsonData.firstName).to.equal(pm.collectionVariables.get(\"First name\"));\r",
											"    pm.expect(jsonData.lastName).to.equal(pm.collectionVariables.get(\"Last name\"));\r",
											"    pm.expect(jsonData.email).to.equal(pm.collectionVariables.get(\"Email\"));\r",
											"    pm.expect(jsonData.status).to.equal(pm.collectionVariables.get(\"User status\"));\r",
											"    pm.expect(jsonData.passwordExpires).to.equal(pm.collectionVariables.get(\"Password expires\"));\r",
											"    pm.expect(jsonData.agent).to.be.null;\r",
											"    pm.expect(jsonData.phoneSwitch).to.be.null;\r",
											"    pm.expect(jsonData.overrideCode).to.be.null;\r",
											"\r",
											"    pm.expect(jsonData._links.self.href).to.equal(pm.collectionVariables.get(\"Created user\"));\r",
											"    pm.expect(jsonData._links.user.href).to.equal(pm.collectionVariables.get(\"Created user\"));\r",
											"    pm.expect(jsonData._links.timezone.href).to.equal(pm.collectionVariables.get(\"Created user's timezone\"));\r",
											"    pm.expect(jsonData._links.permissions.href).to.equal(pm.collectionVariables.get(\"Created user's permissions\"));\r",
											"    pm.expect(jsonData._links.position.href).to.equal(pm.collectionVariables.get(\"Created user's position\"));\r",
											"    pm.expect(jsonData._links.ownedGroups.href).to.equal(pm.collectionVariables.get(\"Created user's owned groups\"));\r",
											"    pm.expect(jsonData._links.groups.href).to.equal(pm.collectionVariables.get(\"Created user's groups\"));\r",
											"    pm.expect(jsonData._links.flags.href).to.equal(pm.collectionVariables.get(\"Created user's flags\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"username\": \"{{Username}}\",\n    \"password\": \"{{Password}}\",\n    \"firstName\": \"{{First name}}\",\n    \"lastName\": \"{{Last name}}\",\n    \"email\": \"{{Email}}\",\n    \"status\": \"{{User status}}\",\n    \"passwordExpires\": \"{{Password expires}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created user}}",
									"host": [
										"{{Created user}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update non existent user via PUT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 201 Created status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(201);\r",
											"    pm.expect(response.status).to.equal(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"User item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.username).to.equal(pm.collectionVariables.get(\"Incorrect id\"));\r",
											"    pm.expect(jsonData.firstName).to.equal(pm.collectionVariables.get(\"First name\"));\r",
											"    pm.expect(jsonData.lastName).to.equal(pm.collectionVariables.get(\"Modified last name\"));\r",
											"    pm.expect(jsonData.email).to.equal(pm.collectionVariables.get(\"Email\"));\r",
											"    pm.expect(jsonData.status).to.equal(pm.collectionVariables.get(\"User status\"));\r",
											"    pm.expect(jsonData.passwordExpires).to.equal(pm.collectionVariables.get(\"Password expires\"));\r",
											"    pm.expect(jsonData.agent).to.be.null;\r",
											"    pm.expect(jsonData.phoneSwitch).to.be.null;\r",
											"    pm.expect(jsonData.overrideCode).to.be.null;\r",
											"\r",
											"    pm.collectionVariables.set(\"Second created user\", jsonData._links.user.href);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"username\": \"{{Modified username}}\",\n    \"password\": \"{{Password}}\",\n    \"firstName\": \"{{First name}}\",\n    \"lastName\": \"{{Modified last name}}\",\n    \"email\": \"{{Email}}\",\n    \"status\": \"{{User status}}\",\n    \"passwordExpires\": \"{{Password expires}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Users endpoint}}/{{Incorrect id}}",
									"host": [
										"{{Users endpoint}}"
									],
									"path": [
										"{{Incorrect id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete second created user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Second created user}}",
									"host": [
										"{{Second created user}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update user via PATCH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"User item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.id).to.equal(pm.collectionVariables.get(\"Created user's id\"));\r",
											"    pm.expect(jsonData.username).to.equal(pm.collectionVariables.get(\"Username\"));\r",
											"    pm.expect(jsonData.firstName).to.equal(pm.collectionVariables.get(\"First name\"));\r",
											"    pm.expect(jsonData.lastName).to.equal(pm.collectionVariables.get(\"Modified last name\"));\r",
											"    pm.expect(jsonData.email).to.equal(pm.collectionVariables.get(\"Email\"));\r",
											"    pm.expect(jsonData.status).to.equal(pm.collectionVariables.get(\"User status\"));\r",
											"    pm.expect(jsonData.passwordExpires).to.equal(pm.collectionVariables.get(\"Password expires\"));\r",
											"    pm.expect(jsonData.agent).to.be.null;\r",
											"    pm.expect(jsonData.phoneSwitch).to.be.null;\r",
											"    pm.expect(jsonData.overrideCode).to.be.null;\r",
											"\r",
											"    pm.expect(jsonData._links.self.href).to.equal(pm.collectionVariables.get(\"Created user\"));\r",
											"    pm.expect(jsonData._links.user.href).to.equal(pm.collectionVariables.get(\"Created user\"));\r",
											"    pm.expect(jsonData._links.permissions.href).to.equal(pm.collectionVariables.get(\"Created user's permissions\"));\r",
											"    pm.expect(jsonData._links.timezone.href).to.equal(pm.collectionVariables.get(\"Created user's timezone\"));\r",
											"    pm.expect(jsonData._links.position.href).to.equal(pm.collectionVariables.get(\"Created user's position\"));\r",
											"    pm.expect(jsonData._links.ownedGroups.href).to.equal(pm.collectionVariables.get(\"Created user's owned groups\"));\r",
											"    pm.expect(jsonData._links.groups.href).to.equal(pm.collectionVariables.get(\"Created user's groups\"));\r",
											"    pm.expect(jsonData._links.flags.href).to.equal(pm.collectionVariables.get(\"Created user's flags\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"lastName\": \"{{Modified last name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created user}}",
									"host": [
										"{{Created user}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update non existent user via PATCH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(404);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: not found\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n\t\"lastName\": \"{{Last name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Users endpoint}}/{{Incorrect id}}",
									"host": [
										"{{Users endpoint}}"
									],
									"path": [
										"{{Incorrect id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "List all user search options",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.eql(200);\r",
											"    pm.expect(response.status).to.eql(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"User search root schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Users endpoint}}/search",
									"host": [
										"{{Users endpoint}}"
									],
									"path": [
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve user by full name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"User search term schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the created user\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const users = jsonData._embedded.users;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < users.length; i++) {\r",
											"        if (users[i]._links.user.href == pm.collectionVariables.get(\"Created user\")) {\r",
											"            pm.expect(users[i].id).to.equal(pm.collectionVariables.get(\"Created user's id\"));\r",
											"            pm.expect(users[i].username).to.equal(pm.collectionVariables.get(\"Username\"));\r",
											"            pm.expect(users[i].firstName).to.equal(pm.collectionVariables.get(\"First name\"));\r",
											"            pm.expect(users[i].lastName).to.equal(pm.collectionVariables.get(\"Modified last name\"));\r",
											"            pm.expect(users[i].email).to.equal(pm.collectionVariables.get(\"Email\"));\r",
											"            pm.expect(users[i].status).to.equal(pm.collectionVariables.get(\"User status\"));\r",
											"            pm.expect(users[i].passwordExpires).to.equal(pm.collectionVariables.get(\"Password expires\"));\r",
											"            pm.expect(users[i].agent).to.be.null;\r",
											"            pm.expect(users[i].phoneSwitch).to.be.null;\r",
											"            pm.expect(users[i].overrideCode).to.be.null;\r",
											"            pm.expect(users[i]._links.self.href).to.equal(pm.collectionVariables.get(\"Created user\"));\r",
											"            pm.expect(users[i]._links.user.href).to.equal(pm.collectionVariables.get(\"Created user\"));\r",
											"            pm.expect(users[i]._links.permissions.href).to.equal(pm.collectionVariables.get(\"Created user's permissions\"));\r",
											"            pm.expect(users[i]._links.timezone.href).to.equal(pm.collectionVariables.get(\"Created user's timezone\"));\r",
											"            pm.expect(users[i]._links.position.href).to.equal(pm.collectionVariables.get(\"Created user's position\"));\r",
											"            pm.expect(users[i]._links.ownedGroups.href).to.equal(pm.collectionVariables.get(\"Created user's owned groups\"));\r",
											"            pm.expect(users[i]._links.groups.href).to.equal(pm.collectionVariables.get(\"Created user's groups\"));\r",
											"            pm.expect(users[i]._links.flags.href).to.equal(pm.collectionVariables.get(\"Created user's flags\"));\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Users endpoint}}/search/byFullName?firstName={{First name}}&lastName={{Modified last name}}",
									"host": [
										"{{Users endpoint}}"
									],
									"path": [
										"search",
										"byFullName"
									],
									"query": [
										{
											"key": "firstName",
											"value": "{{First name}}"
										},
										{
											"key": "lastName",
											"value": "{{Modified last name}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete created user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Created user}}",
									"host": [
										"{{Created user}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete non existent user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(404);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: not found\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Second created user}}",
									"host": [
										"{{Second created user}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve deleted user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(404);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: not found\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created user}}",
									"host": [
										"{{Created user}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "List all users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"User collection schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain the created user\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const users = jsonData._embedded.users;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < users.length; i++) {\r",
											"        if (users[i]._links.self.href == pm.collectionVariables.get(\"Created user\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Users endpoint}}",
									"host": [
										"{{Users endpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.collectionVariables.set(\"User item schema\", {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"id\": { \"type\": \"integer\" },",
									"        \"username\": { \"type\": \"string\" },",
									"        \"firstName\": { \"type\": [ \"string\", \"null\" ] },",
									"        \"lastName\": { \"type\": [ \"string\", \"null\" ] },",
									"        \"email\": { \"type\": [ \"string\", \"null\" ] },",
									"        \"status\": { \"type\": \"string\", \"enum\": [ \"A\", \"S\", \"P\", \"L\", \"X\" ] },",
									"        \"passwordExpires\": { \"type\": \"string\", \"enum\": [ \"Y\", \"N\" ] },",
									"        \"agent\": { \"type\": [ \"string\", \"null\" ] },",
									"        \"phoneSwitch\": { \"type\": [ \"string\", \"null\" ] },",
									"        \"overrideCode\": { \"type\": [ \"string\", \"null\" ] },",
									"        \"_links\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"self\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"user\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"timezone\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"permissions\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"ownedGroups\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },       ",
									"                \"groups\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },                ",
									"                \"position\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"flags\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"            },",
									"            \"required\": [",
									"                \"self\",",
									"                \"user\",",
									"                \"timezone\",",
									"                \"permissions\",",
									"                \"groups\",",
									"                \"position\",",
									"                \"flags\"",
									"            ],",
									"            \"additionalProperties\": false",
									"        }",
									"    },",
									"    \"required\": [",
									"        \"id\",",
									"        \"username\",",
									"        \"firstName\",",
									"        \"lastName\",",
									"        \"email\",",
									"        \"status\",",
									"        \"passwordExpires\",",
									"        \"agent\",",
									"        \"phoneSwitch\",",
									"        \"overrideCode\",",
									"        \"_links\"",
									"    ],",
									"    \"additionalProperties\": false",
									"});",
									"",
									"pm.collectionVariables.set(\"User collection schema\", {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"_embedded\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"users\": {",
									"                    \"type\": \"array\",",
									"                    \"items\": pm.collectionVariables.get(\"User item schema\"),",
									"                    \"uniqueItems\": true",
									"                }",
									"            },",
									"            \"required\": [ \"users\" ],",
									"            \"additionalProperties\": false",
									"        },",
									"        \"_links\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"self\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"profile\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"search\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                }",
									"            },",
									"            \"required\": [ \"self\", \"profile\", \"search\" ],",
									"            \"additionalProperties\": false",
									"        },",
									"    },",
									"    \"required\": [ \"_embedded\", \"_links\" ],",
									"    \"additionalProperties\": false",
									"});",
									"",
									"pm.collectionVariables.set(\"User search root schema\", {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"_links\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"byFullName\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" },",
									"                        \"templated\": { \"type\": \"boolean\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"self\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" },",
									"                        \"templated\": { \"type\": \"boolean\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                }",
									"            },",
									"            \"required\": [ \"byFullName\", \"self\" ],",
									"            \"additionalProperties\": false",
									"        },",
									"    },",
									"    \"required\": [ \"_links\" ],",
									"    \"additionalProperties\": false",
									"});",
									"",
									"pm.collectionVariables.set(\"User search term schema\", {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"_embedded\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"users\": {",
									"                    \"type\": \"array\",",
									"                    \"items\": pm.collectionVariables.get(\"User item schema\"),",
									"                    \"uniqueItems\": true",
									"                }",
									"            },",
									"            \"required\": [ \"users\" ],",
									"            \"additionalProperties\": false",
									"        },",
									"        \"_links\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"self\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                }",
									"            },",
									"            \"required\": [ \"self\" ],",
									"            \"additionalProperties\": false",
									"        },",
									"    },",
									"    \"required\": [ \"_embedded\", \"_links\" ],",
									"    \"additionalProperties\": false",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Group",
					"item": [
						{
							"name": "Create a group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 201 Created status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(201);\r",
											"    pm.expect(response.status).to.equal(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Group item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Group name\"));\r",
											"\r",
											"    pm.collectionVariables.set(\"Created group\", jsonData._links.group.href);\r",
											"    pm.collectionVariables.set(\"Created group's owner\", jsonData._links.owner.href);\r",
											"    pm.collectionVariables.set(\"Created group's positions\", jsonData._links.positions.href);\r",
											"    pm.collectionVariables.set(\"Created group's permissions\", jsonData._links.permissions.href);\r",
											"    pm.collectionVariables.set(\"Created group's users\", jsonData._links.users.href);\r",
											"    pm.collectionVariables.set(\"Created group's jurisdictions\", jsonData._links.jurisdictions.href);\r",
											"    pm.collectionVariables.set(\"Created group's id\", jsonData.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Group name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Groups endpoint}}",
									"host": [
										"{{Groups endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "List all groups",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Group collection schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Created group\")) {\r",
											"            pm.expect(groups[i].id).to.equal(pm.collectionVariables.get(\"Created group's id\"));\r",
											"            pm.expect(groups[i].name).to.equal(pm.collectionVariables.get(\"Group name\"));\r",
											"            pm.expect(groups[i]._links.self.href).to.equal(pm.collectionVariables.get(\"Created group\"));\r",
											"            pm.expect(groups[i]._links.group.href).to.equal(pm.collectionVariables.get(\"Created group\"));\r",
											"            pm.expect(groups[i]._links.owner.href).to.equal(pm.collectionVariables.get(\"Created group's owner\"));\r",
											"            pm.expect(groups[i]._links.positions.href).to.equal(pm.collectionVariables.get(\"Created group's positions\"));\r",
											"            pm.expect(groups[i]._links.permissions.href).to.equal(pm.collectionVariables.get(\"Created group's permissions\"));\r",
											"            pm.expect(groups[i]._links.users.href).to.equal(pm.collectionVariables.get(\"Created group's users\"));\r",
											"            pm.expect(groups[i]._links.jurisdictions.href).to.equal(pm.collectionVariables.get(\"Created group's jurisdictions\"));\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Groups endpoint}}",
									"host": [
										"{{Groups endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve created group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Group item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.id).to.equal(pm.collectionVariables.get(\"Created group's id\"));\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Group name\"));\r",
											"\r",
											"    pm.expect(jsonData._links.self.href).to.equal(pm.collectionVariables.get(\"Created group\"));\r",
											"    pm.expect(jsonData._links.group.href).to.equal(pm.collectionVariables.get(\"Created group\"));\r",
											"    pm.expect(jsonData._links.owner.href).to.equal(pm.collectionVariables.get(\"Created group's owner\"));\r",
											"    pm.expect(jsonData._links.positions.href).to.equal(pm.collectionVariables.get(\"Created group's positions\"));\r",
											"    pm.expect(jsonData._links.permissions.href).to.equal(pm.collectionVariables.get(\"Created group's permissions\"));\r",
											"    pm.expect(jsonData._links.users.href).to.equal(pm.collectionVariables.get(\"Created group's users\"));\r",
											"    pm.expect(jsonData._links.jurisdictions.href).to.equal(pm.collectionVariables.get(\"Created group's jurisdictions\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created group}}",
									"host": [
										"{{Created group}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve non existent group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(404);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: not found\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Groups endpoint}}/{{Incorrect id}}",
									"host": [
										"{{Groups endpoint}}"
									],
									"path": [
										"{{Incorrect id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update group via PUT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Group item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.id).to.equal(pm.collectionVariables.get(\"Created group's id\"));\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Modified group name\"));\r",
											"\r",
											"    pm.expect(jsonData._links.self.href).to.equal(pm.collectionVariables.get(\"Created group\"));\r",
											"    pm.expect(jsonData._links.group.href).to.equal(pm.collectionVariables.get(\"Created group\"));\r",
											"    pm.expect(jsonData._links.owner.href).to.equal(pm.collectionVariables.get(\"Created group's owner\"));\r",
											"    pm.expect(jsonData._links.positions.href).to.equal(pm.collectionVariables.get(\"Created group's positions\"));\r",
											"    pm.expect(jsonData._links.permissions.href).to.equal(pm.collectionVariables.get(\"Created group's permissions\"));\r",
											"    pm.expect(jsonData._links.users.href).to.equal(pm.collectionVariables.get(\"Created group's users\"));\r",
											"    pm.expect(jsonData._links.jurisdictions.href).to.equal(pm.collectionVariables.get(\"Created group's jurisdictions\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Modified group name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created group}}",
									"host": [
										"{{Created group}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update non existent group via PUT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 201 Created status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(201);\r",
											"    pm.expect(response.status).to.equal(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Group item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Group name\"));\r",
											"\r",
											"    pm.collectionVariables.set(\"Second created group\", jsonData._links.group.href);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Group name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Groups endpoint}}/{{Incorrect id}}",
									"host": [
										"{{Groups endpoint}}"
									],
									"path": [
										"{{Incorrect id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete second created group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Second created group}}",
									"host": [
										"{{Second created group}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update group via PATCH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Group item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.id).to.equal(pm.collectionVariables.get(\"Created group's id\"));\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Group name\"));\r",
											"\r",
											"    pm.expect(jsonData._links.self.href).to.equal(pm.collectionVariables.get(\"Created group\"));\r",
											"    pm.expect(jsonData._links.group.href).to.equal(pm.collectionVariables.get(\"Created group\"));\r",
											"    pm.expect(jsonData._links.owner.href).to.equal(pm.collectionVariables.get(\"Created group's owner\"));\r",
											"    pm.expect(jsonData._links.positions.href).to.equal(pm.collectionVariables.get(\"Created group's positions\"));\r",
											"    pm.expect(jsonData._links.permissions.href).to.equal(pm.collectionVariables.get(\"Created group's permissions\"));\r",
											"    pm.expect(jsonData._links.users.href).to.equal(pm.collectionVariables.get(\"Created group's users\"));\r",
											"    pm.expect(jsonData._links.jurisdictions.href).to.equal(pm.collectionVariables.get(\"Created group's jurisdictions\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Group name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created group}}",
									"host": [
										"{{Created group}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update non existent group via PATCH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(404);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: not found\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n\t\"name\": \"{{Modified group name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Groups endpoint}}/{{Incorrect id}}",
									"host": [
										"{{Groups endpoint}}"
									],
									"path": [
										"{{Incorrect id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete created group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Created group}}",
									"host": [
										"{{Created group}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete non existent group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(404);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: not found\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Second created group}}",
									"host": [
										"{{Second created group}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve deleted group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(404);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: not found\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created group}}",
									"host": [
										"{{Created group}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "List all groups",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Group collection schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain the created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.self.href == pm.collectionVariables.get(\"Created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Groups endpoint}}",
									"host": [
										"{{Groups endpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.collectionVariables.set(\"Group item schema\", {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"id\": { \"type\": \"integer\" },",
									"        \"name\": { \"type\": \"string\" },",
									"        \"_links\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"self\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"group\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"owner\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"users\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"permissions\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"positions\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"jurisdictions\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                }",
									"            },",
									"            \"required\": [",
									"                \"self\",",
									"                \"group\",",
									"                \"owner\",",
									"                \"users\",",
									"                \"permissions\",",
									"                \"positions\",",
									"                \"jurisdictions\"",
									"            ],",
									"            \"additionalProperties\": false",
									"        }",
									"    },",
									"    \"required\": [",
									"        \"id\",",
									"        \"name\",",
									"        \"_links\"",
									"    ],",
									"    \"additionalProperties\": false",
									"});",
									"",
									"pm.collectionVariables.set(\"Group collection schema\", {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"_embedded\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"groups\": {",
									"                    \"type\": \"array\",",
									"                    \"items\": pm.collectionVariables.get(\"Group item schema\"),",
									"                    \"uniqueItems\": true",
									"                }",
									"            },",
									"            \"required\": [ \"groups\" ],",
									"            \"additionalProperties\": false",
									"        },",
									"        \"_links\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"self\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"profile\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                }",
									"            },",
									"            \"required\": [ \"self\", \"profile\" ],",
									"            \"additionalProperties\": false",
									"        },",
									"    },",
									"    \"required\": [ \"_embedded\", \"_links\" ],",
									"    \"additionalProperties\": false",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Permission Type",
					"item": [
						{
							"name": "Create a permission type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 201 Created status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(201);\r",
											"    pm.expect(response.status).to.equal(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Permission type item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Permission type name\"));\r",
											"    pm.expect(jsonData.description).to.equal(pm.collectionVariables.get(\"Permission type description\"));\r",
											"    pm.expect(jsonData.displayOrder).to.equal(parseInt(pm.collectionVariables.get(\"Display order\")));\r",
											"\r",
											"    pm.collectionVariables.set(\"Created permission type\", jsonData._links.permissionType.href);\r",
											"    pm.collectionVariables.set(\"Created permission type's permissions\", jsonData._links.permissions.href);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Permission type name}}\",\n    \"description\": \"{{Permission type description}}\",\n    \"displayOrder\": {{Display order}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Permission types endpoint}}",
									"host": [
										"{{Permission types endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "List all permission types",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Permission type collection schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the created permission type\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const permissionTypes = jsonData._embedded.permissionTypes;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < permissionTypes.length; i++) {\r",
											"        if (permissionTypes[i]._links.permissionType.href == pm.collectionVariables.get(\"Created permission type\")) {\r",
											"            pm.expect(permissionTypes[i].name.trimEnd()).to.equal(pm.collectionVariables.get(\"Permission type name\"));\r",
											"            pm.expect(permissionTypes[i].description).to.equal(pm.collectionVariables.get(\"Permission type description\"));\r",
											"            pm.expect(permissionTypes[i].displayOrder).to.equal(parseInt(pm.collectionVariables.get(\"Display order\")));\r",
											"            pm.expect(permissionTypes[i]._links.self.href).to.equal(pm.collectionVariables.get(\"Created permission type\"));\r",
											"            pm.expect(permissionTypes[i]._links.permissionType.href).to.equal(pm.collectionVariables.get(\"Created permission type\"));\r",
											"            pm.expect(permissionTypes[i]._links.permissions.href).to.equal(pm.collectionVariables.get(\"Created permission type's permissions\"));\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Permission types endpoint}}",
									"host": [
										"{{Permission types endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve created permission type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Permission type item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Permission type name\"));\r",
											"    pm.expect(jsonData.description).to.equal(pm.collectionVariables.get(\"Permission type description\"));\r",
											"    pm.expect(jsonData.displayOrder).to.equal(parseInt(pm.collectionVariables.get(\"Display order\")));\r",
											"\r",
											"    pm.expect(jsonData._links.self.href).to.equal(pm.collectionVariables.get(\"Created permission type\"));\r",
											"    pm.expect(jsonData._links.permissionType.href).to.equal(pm.collectionVariables.get(\"Created permission type\"));\r",
											"    pm.expect(jsonData._links.permissions.href).to.equal(pm.collectionVariables.get(\"Created permission type's permissions\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created permission type}}",
									"host": [
										"{{Created permission type}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve non existent permission type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(404);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: not found\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Permission types endpoint}}/{{Incorrect id}}",
									"host": [
										"{{Permission types endpoint}}"
									],
									"path": [
										"{{Incorrect id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update permission type via PUT with partial data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Permission type item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Permission type name\"));\r",
											"    pm.expect(jsonData.description).to.equal(pm.collectionVariables.get(\"Modified permission type description\"));\r",
											"    pm.expect(jsonData.displayOrder).to.be.null;\r",
											"\r",
											"    pm.expect(jsonData._links.self.href).to.equal(pm.collectionVariables.get(\"Created permission type\"));\r",
											"    pm.expect(jsonData._links.permissionType.href).to.equal(pm.collectionVariables.get(\"Created permission type\"));\r",
											"    pm.expect(jsonData._links.permissions.href).to.equal(pm.collectionVariables.get(\"Created permission type's permissions\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"description\": \"{{Modified permission type description}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created permission type}}",
									"host": [
										"{{Created permission type}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update permission type via PUT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Permission type item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Permission type name\"));\r",
											"    pm.expect(jsonData.description).to.equal(pm.collectionVariables.get(\"Permission type description\"));\r",
											"    pm.expect(jsonData.displayOrder).to.equal(parseInt(pm.collectionVariables.get(\"Display order\")));\r",
											"\r",
											"    pm.expect(jsonData._links.self.href).to.equal(pm.collectionVariables.get(\"Created permission type\"));\r",
											"    pm.expect(jsonData._links.permissionType.href).to.equal(pm.collectionVariables.get(\"Created permission type\"));\r",
											"    pm.expect(jsonData._links.permissions.href).to.equal(pm.collectionVariables.get(\"Created permission type's permissions\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Permission type name}}\",\n    \"description\": \"{{Permission type description}}\",\n    \"displayOrder\": {{Display order}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created permission type}}",
									"host": [
										"{{Created permission type}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update non existent permission type via PUT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 201 Created status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(201);\r",
											"    pm.expect(response.status).to.equal(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Permission type item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Incorrect id\"));\r",
											"    pm.expect(jsonData.description).to.equal(pm.collectionVariables.get(\"Modified permission type description\"));\r",
											"    pm.expect(jsonData.displayOrder).to.equal(parseInt(pm.collectionVariables.get(\"Display order\")));\r",
											"\r",
											"    pm.collectionVariables.set(\"Second created permission type\", jsonData._links.permissionType.href);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Permission type name}}\",\n    \"description\": \"{{Modified permission type description}}\",\n    \"displayOrder\": {{Display order}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Permission types endpoint}}/{{Incorrect id}}",
									"host": [
										"{{Permission types endpoint}}"
									],
									"path": [
										"{{Incorrect id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete second created permission type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Second created permission type}}",
									"host": [
										"{{Second created permission type}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update permission type via PATCH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Permission type item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Permission type name\"));\r",
											"    pm.expect(jsonData.description).to.equal(pm.collectionVariables.get(\"Modified permission type description\"));\r",
											"    pm.expect(jsonData.displayOrder).to.equal(parseInt(pm.collectionVariables.get(\"Display order\")));\r",
											"\r",
											"    pm.expect(jsonData._links.self.href).to.equal(pm.collectionVariables.get(\"Created permission type\"));\r",
											"    pm.expect(jsonData._links.permissionType.href).to.equal(pm.collectionVariables.get(\"Created permission type\"));\r",
											"    pm.expect(jsonData._links.permissions.href).to.equal(pm.collectionVariables.get(\"Created permission type's permissions\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"description\": \"{{Modified permission type description}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created permission type}}",
									"host": [
										"{{Created permission type}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update non existent permission type via PATCH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(404);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: not found\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"description\": \"{{Permission type description}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Permission types endpoint}}/{{Incorrect id}}",
									"host": [
										"{{Permission types endpoint}}"
									],
									"path": [
										"{{Incorrect id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete created permission type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Created permission type}}",
									"host": [
										"{{Created permission type}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete non existent permission type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(404);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: not found\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Second created permission type}}",
									"host": [
										"{{Second created permission type}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve deleted permission type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(404);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: not found\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created permission type}}",
									"host": [
										"{{Created permission type}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "List all permission types",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Permission type collection schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain the created permission type\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const permissionTypes = jsonData._embedded.permissionTypes;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < permissionTypes.length; i++) {\r",
											"        if (permissionTypes[i]._links.self.href == pm.collectionVariables.get(\"Created permission type\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Permission types endpoint}}",
									"host": [
										"{{Permission types endpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.collectionVariables.set(\"Permission type item schema\", {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"name\": { \"type\": \"string\" },",
									"        \"description\": { \"type\": \"string\" },",
									"        \"displayOrder\": { \"type\": [ \"number\", \"null\" ] },",
									"        \"_links\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"self\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"permissionType\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"permissions\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                }",
									"            },",
									"            \"required\": [",
									"                \"self\",",
									"                \"permissionType\",",
									"                \"permissions\"",
									"            ],",
									"            \"additionalProperties\": false",
									"        }",
									"    },",
									"    \"required\": [",
									"        \"name\",",
									"        \"description\",",
									"        \"displayOrder\",",
									"        \"_links\"",
									"    ],",
									"    \"additionalProperties\": false",
									"});",
									"",
									"pm.collectionVariables.set(\"Permission type collection schema\", {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"_embedded\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"permissionTypes\": {",
									"                    \"type\": \"array\",",
									"                    \"items\": pm.collectionVariables.get(\"Permission type item schema\"),",
									"                    \"uniqueItems\": true",
									"                }",
									"            },",
									"            \"required\": [ \"permissionTypes\" ],",
									"            \"additionalProperties\": false",
									"        },",
									"        \"_links\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"self\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"profile\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                }",
									"            },",
									"            \"required\": [ \"self\", \"profile\" ],",
									"            \"additionalProperties\": false",
									"        },",
									"    },",
									"    \"required\": [ \"_embedded\", \"_links\" ],",
									"    \"additionalProperties\": false",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Permission",
					"item": [
						{
							"name": "Create a permission",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 201 Created status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(201);\r",
											"    pm.expect(response.status).to.equal(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Permission item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Permission name\"));\r",
											"    pm.expect(jsonData.description).to.equal(pm.collectionVariables.get(\"Permission description\"));\r",
											"    pm.expect(jsonData.displayOrder).to.equal(parseInt(pm.collectionVariables.get(\"Display order\")));\r",
											"\r",
											"    pm.collectionVariables.set(\"Created permission\", jsonData._links.permission.href);\r",
											"    pm.collectionVariables.set(\"Created permission's type\", jsonData._links.type.href);\r",
											"    pm.collectionVariables.set(\"Created permission's users\", jsonData._links.users.href);\r",
											"    pm.collectionVariables.set(\"Created permission's groups\", jsonData._links.groups.href);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Permission name}}\",\n    \"description\": \"{{Permission description}}\",\n    \"displayOrder\": {{Display order}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Permissions endpoint}}",
									"host": [
										"{{Permissions endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "List all permissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Permission collection schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the created permission\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const permissions = jsonData._embedded.permissions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < permissions.length; i++) {\r",
											"        if (permissions[i]._links.permission.href == pm.collectionVariables.get(\"Created permission\")) {\r",
											"            pm.expect(permissions[i].name).to.equal(pm.collectionVariables.get(\"Permission name\"));\r",
											"            pm.expect(permissions[i].description).to.equal(pm.collectionVariables.get(\"Permission description\"));\r",
											"            pm.expect(permissions[i].displayOrder).to.equal(parseInt(pm.collectionVariables.get(\"Display order\")));\r",
											"            pm.expect(permissions[i]._links.self.href).to.equal(pm.collectionVariables.get(\"Created permission\"));\r",
											"            pm.expect(permissions[i]._links.permission.href).to.equal(pm.collectionVariables.get(\"Created permission\"));\r",
											"            pm.expect(permissions[i]._links.type.href).to.equal(pm.collectionVariables.get(\"Created permission's type\"));\r",
											"            pm.expect(permissions[i]._links.users.href).to.equal(pm.collectionVariables.get(\"Created permission's users\"));\r",
											"            pm.expect(permissions[i]._links.groups.href).to.equal(pm.collectionVariables.get(\"Created permission's groups\"));\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Permissions endpoint}}",
									"host": [
										"{{Permissions endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve created permission",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Permission item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Permission name\"));\r",
											"    pm.expect(jsonData.description).to.equal(pm.collectionVariables.get(\"Permission description\"));\r",
											"    pm.expect(jsonData.displayOrder).to.equal(parseInt(pm.collectionVariables.get(\"Display order\")));\r",
											"\r",
											"    pm.expect(jsonData._links.self.href).to.equal(pm.collectionVariables.get(\"Created permission\"));\r",
											"    pm.expect(jsonData._links.permission.href).to.equal(pm.collectionVariables.get(\"Created permission\"));\r",
											"    pm.expect(jsonData._links.type.href).to.equal(pm.collectionVariables.get(\"Created permission's type\"));\r",
											"    pm.expect(jsonData._links.users.href).to.equal(pm.collectionVariables.get(\"Created permission's users\"));\r",
											"    pm.expect(jsonData._links.groups.href).to.equal(pm.collectionVariables.get(\"Created permission's groups\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created permission}}",
									"host": [
										"{{Created permission}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve non existent permission",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(404);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: not found\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Permissions endpoint}}/{{Incorrect id}}",
									"host": [
										"{{Permissions endpoint}}"
									],
									"path": [
										"{{Incorrect id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update permission via PUT with partial data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Permission item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Permission name\"));\r",
											"    pm.expect(jsonData.description).to.equal(pm.collectionVariables.get(\"Modified permission description\"));\r",
											"    pm.expect(jsonData.displayOrder).to.be.null;\r",
											"\r",
											"    pm.expect(jsonData._links.self.href).to.equal(pm.collectionVariables.get(\"Created permission\"));\r",
											"    pm.expect(jsonData._links.permission.href).to.equal(pm.collectionVariables.get(\"Created permission\"));\r",
											"    pm.expect(jsonData._links.type.href).to.equal(pm.collectionVariables.get(\"Created permission's type\"));\r",
											"    pm.expect(jsonData._links.users.href).to.equal(pm.collectionVariables.get(\"Created permission's users\"));\r",
											"    pm.expect(jsonData._links.groups.href).to.equal(pm.collectionVariables.get(\"Created permission's groups\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"description\": \"{{Modified permission description}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created permission}}",
									"host": [
										"{{Created permission}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update permission via PUT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Permission item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Permission name\"));\r",
											"    pm.expect(jsonData.description).to.equal(pm.collectionVariables.get(\"Permission description\"));\r",
											"    pm.expect(jsonData.displayOrder).to.equal(parseInt(pm.collectionVariables.get(\"Display order\")));\r",
											"\r",
											"    pm.expect(jsonData._links.self.href).to.equal(pm.collectionVariables.get(\"Created permission\"));\r",
											"    pm.expect(jsonData._links.permission.href).to.equal(pm.collectionVariables.get(\"Created permission\"));\r",
											"    pm.expect(jsonData._links.type.href).to.equal(pm.collectionVariables.get(\"Created permission's type\"));\r",
											"    pm.expect(jsonData._links.users.href).to.equal(pm.collectionVariables.get(\"Created permission's users\"));\r",
											"    pm.expect(jsonData._links.groups.href).to.equal(pm.collectionVariables.get(\"Created permission's groups\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Permission name}}\",\n    \"description\": \"{{Permission description}}\",\n    \"displayOrder\": {{Display order}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created permission}}",
									"host": [
										"{{Created permission}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update non existent permission via PUT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 201 Created status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(201);\r",
											"    pm.expect(response.status).to.equal(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Permission item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Incorrect id\"));\r",
											"    pm.expect(jsonData.description).to.equal(pm.collectionVariables.get(\"Modified permission description\"));\r",
											"    pm.expect(jsonData.displayOrder).to.equal(parseInt(pm.collectionVariables.get(\"Display order\")));\r",
											"\r",
											"    pm.collectionVariables.set(\"Second created permission\", jsonData._links.permission.href);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Permission name}}\",\n    \"description\": \"{{Modified permission description}}\",\n    \"displayOrder\": {{Display order}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Permissions endpoint}}/{{Incorrect id}}",
									"host": [
										"{{Permissions endpoint}}"
									],
									"path": [
										"{{Incorrect id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete second created permission",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Second created permission}}",
									"host": [
										"{{Second created permission}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update permission via PATCH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Permission item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Permission name\"));\r",
											"    pm.expect(jsonData.description).to.equal(pm.collectionVariables.get(\"Modified permission description\"));\r",
											"    pm.expect(jsonData.displayOrder).to.equal(parseInt(pm.collectionVariables.get(\"Display order\")));\r",
											"\r",
											"    pm.expect(jsonData._links.self.href).to.equal(pm.collectionVariables.get(\"Created permission\"));\r",
											"    pm.expect(jsonData._links.permission.href).to.equal(pm.collectionVariables.get(\"Created permission\"));\r",
											"    pm.expect(jsonData._links.type.href).to.equal(pm.collectionVariables.get(\"Created permission's type\"));\r",
											"    pm.expect(jsonData._links.users.href).to.equal(pm.collectionVariables.get(\"Created permission's users\"));\r",
											"    pm.expect(jsonData._links.groups.href).to.equal(pm.collectionVariables.get(\"Created permission's groups\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"description\": \"{{Modified permission description}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created permission}}",
									"host": [
										"{{Created permission}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update non existent permission via PATCH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(404);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: not found\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"description\": \"{{Permission description}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Permissions endpoint}}/{{Incorrect id}}",
									"host": [
										"{{Permissions endpoint}}"
									],
									"path": [
										"{{Incorrect id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "List all permission search options",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.eql(200);\r",
											"    pm.expect(response.status).to.eql(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Permission search root schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Permissions endpoint}}/search",
									"host": [
										"{{Permissions endpoint}}"
									],
									"path": [
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve permissions by name containing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Permission search term schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the created permission\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const permissions = jsonData._embedded.permissions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < permissions.length; i++) {\r",
											"        if (permissions[i]._links.permission.href == pm.collectionVariables.get(\"Created permission\")) {\r",
											"            pm.expect(permissions[i].name).to.equal(pm.collectionVariables.get(\"Permission name\"));\r",
											"            pm.expect(permissions[i].description).to.equal(pm.collectionVariables.get(\"Modified permission description\"));\r",
											"            pm.expect(permissions[i].displayOrder).to.equal(parseInt(pm.collectionVariables.get(\"Display order\")));\r",
											"            pm.expect(permissions[i]._links.self.href).to.equal(pm.collectionVariables.get(\"Created permission\"));\r",
											"            pm.expect(permissions[i]._links.permission.href).to.equal(pm.collectionVariables.get(\"Created permission\"));\r",
											"            pm.expect(permissions[i]._links.type.href).to.equal(pm.collectionVariables.get(\"Created permission's type\"));\r",
											"            pm.expect(permissions[i]._links.users.href).to.equal(pm.collectionVariables.get(\"Created permission's users\"));\r",
											"            pm.expect(permissions[i]._links.groups.href).to.equal(pm.collectionVariables.get(\"Created permission's groups\"));\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Permissions endpoint}}/search/byNameLike?name=sensitive",
									"host": [
										"{{Permissions endpoint}}"
									],
									"path": [
										"search",
										"byNameLike"
									],
									"query": [
										{
											"key": "name",
											"value": "sensitive"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete created permission",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Created permission}}",
									"host": [
										"{{Created permission}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete non existent permission",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(404);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: not found\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Second created permission}}",
									"host": [
										"{{Second created permission}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve deleted permission",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(404);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: not found\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created permission}}",
									"host": [
										"{{Created permission}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "List all permissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Permission collection schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain the created permission\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const permissions = jsonData._embedded.permissions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < permissions.length; i++) {\r",
											"        if (permissions[i]._links.self.href == pm.collectionVariables.get(\"Created permission\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Permissions endpoint}}",
									"host": [
										"{{Permissions endpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.collectionVariables.set(\"Permission item schema\", {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"name\": { \"type\": \"string\" },",
									"        \"description\": { \"type\": \"string\" },",
									"        \"displayOrder\": { \"type\": [ \"number\", \"null\" ] },",
									"        \"_links\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"self\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"permission\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"type\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"users\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"groups\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                }                ",
									"            },",
									"            \"required\": [",
									"                \"self\",",
									"                \"permission\",",
									"                \"type\",",
									"                \"users\",",
									"                \"groups\"",
									"            ],",
									"            \"additionalProperties\": false",
									"        }",
									"    },",
									"    \"required\": [",
									"        \"name\",",
									"        \"description\",",
									"        \"displayOrder\",",
									"        \"_links\"",
									"    ],",
									"    \"additionalProperties\": false",
									"});",
									"",
									"pm.collectionVariables.set(\"Permission collection schema\", {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"_embedded\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"permissions\": {",
									"                    \"type\": \"array\",",
									"                    \"items\": pm.collectionVariables.get(\"Permission item schema\"),",
									"                    \"uniqueItems\": true",
									"                }",
									"            },",
									"            \"required\": [ \"permissions\" ],",
									"            \"additionalProperties\": false",
									"        },",
									"        \"_links\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"self\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"profile\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"search\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                }",
									"            },",
									"            \"required\": [ \"self\", \"profile\", \"search\" ],",
									"            \"additionalProperties\": false",
									"        },",
									"    },",
									"    \"required\": [ \"_embedded\", \"_links\" ],",
									"    \"additionalProperties\": false",
									"});",
									"",
									"",
									"pm.collectionVariables.set(\"Permission search root schema\", {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"_links\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"byNameLike\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" },",
									"                        \"templated\": { \"type\": \"boolean\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"self\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" },",
									"                        \"templated\": { \"type\": \"boolean\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                }",
									"            },",
									"            \"required\": [ \"byNameLike\", \"self\" ],",
									"            \"additionalProperties\": false",
									"        },",
									"    },",
									"    \"required\": [ \"_links\" ],",
									"    \"additionalProperties\": false",
									"});",
									"",
									"pm.collectionVariables.set(\"Permission search term schema\", {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"_embedded\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"permissions\": {",
									"                    \"type\": \"array\",",
									"                    \"items\": pm.collectionVariables.get(\"Permission item schema\"),",
									"                    \"uniqueItems\": true",
									"                }",
									"            },",
									"            \"required\": [ \"permissions\" ],",
									"            \"additionalProperties\": false",
									"        },",
									"        \"_links\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"self\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                }",
									"            },",
									"            \"required\": [ \"self\" ],",
									"            \"additionalProperties\": false",
									"        },",
									"    },",
									"    \"required\": [ \"_embedded\", \"_links\" ],",
									"    \"additionalProperties\": false",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Timezone",
					"item": [
						{
							"name": "Create a timezone",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 201 Created status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(201);\r",
											"    pm.expect(response.status).to.equal(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Timezone item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Timezone name\"));\r",
											"    pm.expect(jsonData.status).to.equal(pm.collectionVariables.get(\"Timezone status\"));\r",
											"    pm.expect(jsonData.display).to.equal(pm.collectionVariables.get(\"Display\"));\r",
											"\r",
											"    pm.collectionVariables.set(\"Created timezone\", jsonData._links.timezone.href);\r",
											"    pm.collectionVariables.set(\"Created timezone's users\", jsonData._links.users.href);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Timezone name}}\",\n    \"status\": \"{{Timezone status}}\",\n    \"display\": \"{{Display}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Timezones endpoint}}",
									"host": [
										"{{Timezones endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "List all timezones",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Timezone collection schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the created timezone\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const timezones = jsonData._embedded.timezones;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < timezones.length; i++) {\r",
											"        if (timezones[i]._links.timezone.href == pm.collectionVariables.get(\"Created timezone\")) {\r",
											"            pm.expect(timezones[i].name).to.equal(pm.collectionVariables.get(\"Timezone name\"));\r",
											"            pm.expect(timezones[i].status).to.equal(pm.collectionVariables.get(\"Timezone status\"));\r",
											"            pm.expect(timezones[i].display).to.equal(pm.collectionVariables.get(\"Display\"));\r",
											"            pm.expect(timezones[i]._links.self.href).to.equal(pm.collectionVariables.get(\"Created timezone\"));\r",
											"            pm.expect(timezones[i]._links.timezone.href).to.equal(pm.collectionVariables.get(\"Created timezone\"));\r",
											"            pm.expect(timezones[i]._links.users.href).to.equal(pm.collectionVariables.get(\"Created timezone's users\"));\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Timezones endpoint}}",
									"host": [
										"{{Timezones endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve created timezone",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Timezone item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Timezone name\"));\r",
											"    pm.expect(jsonData.status).to.equal(pm.collectionVariables.get(\"Timezone status\"));\r",
											"    pm.expect(jsonData.display).to.equal(pm.collectionVariables.get(\"Display\"));\r",
											"\r",
											"    pm.expect(jsonData._links.self.href).to.equal(pm.collectionVariables.get(\"Created timezone\"));\r",
											"    pm.expect(jsonData._links.timezone.href).to.equal(pm.collectionVariables.get(\"Created timezone\"));\r",
											"    pm.expect(jsonData._links.users.href).to.equal(pm.collectionVariables.get(\"Created timezone's users\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created timezone}}",
									"host": [
										"{{Created timezone}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve non existent timezone",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(404);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: not found\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Timezones endpoint}}/{{Incorrect id}}",
									"host": [
										"{{Timezones endpoint}}"
									],
									"path": [
										"{{Incorrect id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update timezone via PUT with partial data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Timezone item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Modified timezone name\"));\r",
											"    pm.expect(jsonData.status).to.equal(pm.collectionVariables.get(\"Timezone status\"));\r",
											"    pm.expect(jsonData.display).to.equal(\"N\");\r",
											"\r",
											"    pm.expect(jsonData._links.self.href).to.equal(pm.collectionVariables.get(\"Created timezone\"));\r",
											"    pm.expect(jsonData._links.timezone.href).to.equal(pm.collectionVariables.get(\"Created timezone\"));\r",
											"    pm.expect(jsonData._links.users.href).to.equal(pm.collectionVariables.get(\"Created timezone's users\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Modified timezone name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created timezone}}",
									"host": [
										"{{Created timezone}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update timezone via PUT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Timezone item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Timezone name\"));\r",
											"    pm.expect(jsonData.status).to.equal(pm.collectionVariables.get(\"Timezone status\"));\r",
											"    pm.expect(jsonData.display).to.equal(pm.collectionVariables.get(\"Display\"));\r",
											"\r",
											"    pm.expect(jsonData._links.self.href).to.equal(pm.collectionVariables.get(\"Created timezone\"));\r",
											"    pm.expect(jsonData._links.timezone.href).to.equal(pm.collectionVariables.get(\"Created timezone\"));\r",
											"    pm.expect(jsonData._links.users.href).to.equal(pm.collectionVariables.get(\"Created timezone's users\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Timezone name}}\",\n    \"status\": \"{{Timezone status}}\",\n    \"display\": \"{{Display}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created timezone}}",
									"host": [
										"{{Created timezone}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update non existent timezone via PUT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 201 Created status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(201);\r",
											"    pm.expect(response.status).to.equal(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Timezone item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Modified timezone name\"));\r",
											"    pm.expect(jsonData.status).to.equal(pm.collectionVariables.get(\"Timezone status\"));\r",
											"    pm.expect(jsonData.display).to.equal(pm.collectionVariables.get(\"Display\"));\r",
											"\r",
											"    pm.collectionVariables.set(\"Second created timezone\", jsonData._links.timezone.href);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Modified timezone name}}\",\n    \"status\": \"{{Timezone status}}\",\n    \"display\": \"{{Display}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Timezones endpoint}}/{{Incorrect id}}",
									"host": [
										"{{Timezones endpoint}}"
									],
									"path": [
										"{{Incorrect id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete second created timezone",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Second created timezone}}",
									"host": [
										"{{Second created timezone}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update timezone via PATCH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Timezone item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Modified timezone name\"));\r",
											"    pm.expect(jsonData.status).to.equal(pm.collectionVariables.get(\"Timezone status\"));\r",
											"    pm.expect(jsonData.display).to.equal(pm.collectionVariables.get(\"Display\"));\r",
											"\r",
											"    pm.expect(jsonData._links.self.href).to.equal(pm.collectionVariables.get(\"Created timezone\"));\r",
											"    pm.expect(jsonData._links.timezone.href).to.equal(pm.collectionVariables.get(\"Created timezone\"));\r",
											"    pm.expect(jsonData._links.users.href).to.equal(pm.collectionVariables.get(\"Created timezone's users\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Modified timezone name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created timezone}}",
									"host": [
										"{{Created timezone}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update non existent timezone via PATCH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(404);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: not found\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Timezone name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Timezones endpoint}}/{{Incorrect id}}",
									"host": [
										"{{Timezones endpoint}}"
									],
									"path": [
										"{{Incorrect id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete created timezone",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Created timezone}}",
									"host": [
										"{{Created timezone}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete non existent timezone",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(404);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: not found\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Second created timezone}}",
									"host": [
										"{{Second created timezone}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve deleted timezone",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(404);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: not found\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created timezone}}",
									"host": [
										"{{Created timezone}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "List all timezone",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Timezone collection schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain the created timezone\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const timezones = jsonData._embedded.timezones;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < timezones.length; i++) {\r",
											"        if (timezones[i]._links.self.href == pm.collectionVariables.get(\"Created timezone\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Timezones endpoint}}",
									"host": [
										"{{Timezones endpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.collectionVariables.set(\"Timezone item schema\", {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"name\": { \"type\": \"string\" },",
									"        \"status\": { \"type\": \"string\", \"enum\": [ \"A\", \"S\", \"D\" ] },",
									"        \"display\": { \"type\": \"string\", \"enum\": [ \"Y\", \"N\" ] },",
									"        \"_links\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"self\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"timezone\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"users\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                }",
									"            },",
									"            \"required\": [",
									"                \"self\",",
									"                \"timezone\",",
									"                \"users\"",
									"            ],",
									"            \"additionalProperties\": false",
									"        }",
									"    },",
									"    \"required\": [",
									"        \"name\",",
									"        \"status\",",
									"        \"display\",",
									"        \"_links\"",
									"    ],",
									"    \"additionalProperties\": false",
									"});",
									"",
									"pm.collectionVariables.set(\"Timezone collection schema\", {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"_embedded\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"timezones\": {",
									"                    \"type\": \"array\",",
									"                    \"items\": pm.collectionVariables.get(\"Timezone item schema\"),",
									"                    \"uniqueItems\": true",
									"                }",
									"            },",
									"            \"required\": [ \"timezones\" ],",
									"            \"additionalProperties\": false",
									"        },",
									"        \"_links\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"self\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"profile\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                }",
									"            },",
									"            \"required\": [ \"self\", \"profile\" ],",
									"            \"additionalProperties\": false",
									"        },",
									"    },",
									"    \"required\": [ \"_embedded\", \"_links\" ],",
									"    \"additionalProperties\": false",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Position",
					"item": [
						{
							"name": "Create a position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 201 Created status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(201);\r",
											"    pm.expect(response.status).to.equal(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Position item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Position name\"));\r",
											"\r",
											"    pm.collectionVariables.set(\"Created position\", jsonData._links.position.href);\r",
											"    pm.collectionVariables.set(\"Created position's child positions\", jsonData._links.childPositions.href);\r",
											"    pm.collectionVariables.set(\"Created position's parent position\", jsonData._links.parentPosition.href);\r",
											"    pm.collectionVariables.set(\"Created position's users\", jsonData._links.users.href);\r",
											"    pm.collectionVariables.set(\"Created position's groups\", jsonData._links.groups.href);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Position name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Positions endpoint}}",
									"host": [
										"{{Positions endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "List all positions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Position collection schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the created position\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const positions = jsonData._embedded.positions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < positions.length; i++) {\r",
											"        if (positions[i]._links.position.href == pm.collectionVariables.get(\"Created position\")) {\r",
											"            pm.expect(positions[i].name).to.equal(pm.collectionVariables.get(\"Position name\"));\r",
											"            pm.expect(positions[i]._links.self.href).to.equal(pm.collectionVariables.get(\"Created position\"));\r",
											"            pm.expect(positions[i]._links.position.href).to.equal(pm.collectionVariables.get(\"Created position\"));\r",
											"            pm.expect(positions[i]._links.childPositions.href).to.equal(pm.collectionVariables.get(\"Created position's child positions\"));\r",
											"            pm.expect(positions[i]._links.parentPosition.href).to.equal(pm.collectionVariables.get(\"Created position's parent position\"));\r",
											"            pm.expect(positions[i]._links.users.href).to.equal(pm.collectionVariables.get(\"Created position's users\"));\r",
											"            pm.expect(positions[i]._links.groups.href).to.equal(pm.collectionVariables.get(\"Created position's groups\"));\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Positions endpoint}}",
									"host": [
										"{{Positions endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve created position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Position item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Position name\"));\r",
											"\r",
											"    pm.expect(jsonData._links.self.href).to.equal(pm.collectionVariables.get(\"Created position\"));\r",
											"    pm.expect(jsonData._links.position.href).to.equal(pm.collectionVariables.get(\"Created position\"));\r",
											"    pm.expect(jsonData._links.childPositions.href).to.equal(pm.collectionVariables.get(\"Created position's child positions\"));\r",
											"    pm.expect(jsonData._links.parentPosition.href).to.equal(pm.collectionVariables.get(\"Created position's parent position\"));\r",
											"    pm.expect(jsonData._links.users.href).to.equal(pm.collectionVariables.get(\"Created position's users\"));\r",
											"    pm.expect(jsonData._links.groups.href).to.equal(pm.collectionVariables.get(\"Created position's groups\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created position}}",
									"host": [
										"{{Created position}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve non existent position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(404);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: not found\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Positions endpoint}}/{{Incorrect id}}",
									"host": [
										"{{Positions endpoint}}"
									],
									"path": [
										"{{Incorrect id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update position via PUT with partial data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Position item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Modified position name\"));\r",
											"\r",
											"    pm.expect(jsonData._links.self.href).to.equal(pm.collectionVariables.get(\"Created position\"));\r",
											"    pm.expect(jsonData._links.position.href).to.equal(pm.collectionVariables.get(\"Created position\"));\r",
											"    pm.expect(jsonData._links.childPositions.href).to.equal(pm.collectionVariables.get(\"Created position's child positions\"));\r",
											"    pm.expect(jsonData._links.parentPosition.href).to.equal(pm.collectionVariables.get(\"Created position's parent position\"));\r",
											"    pm.expect(jsonData._links.users.href).to.equal(pm.collectionVariables.get(\"Created position's users\"));\r",
											"    pm.expect(jsonData._links.groups.href).to.equal(pm.collectionVariables.get(\"Created position's groups\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Modified position name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created position}}",
									"host": [
										"{{Created position}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update position via PUT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Position item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Position name\"));\r",
											"\r",
											"    pm.expect(jsonData._links.self.href).to.equal(pm.collectionVariables.get(\"Created position\"));\r",
											"    pm.expect(jsonData._links.position.href).to.equal(pm.collectionVariables.get(\"Created position\"));\r",
											"    pm.expect(jsonData._links.childPositions.href).to.equal(pm.collectionVariables.get(\"Created position's child positions\"));\r",
											"    pm.expect(jsonData._links.parentPosition.href).to.equal(pm.collectionVariables.get(\"Created position's parent position\"));\r",
											"    pm.expect(jsonData._links.users.href).to.equal(pm.collectionVariables.get(\"Created position's users\"));\r",
											"    pm.expect(jsonData._links.groups.href).to.equal(pm.collectionVariables.get(\"Created position's groups\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Position name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created position}}",
									"host": [
										"{{Created position}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update non existent position via PUT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 201 Created status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(201);\r",
											"    pm.expect(response.status).to.equal(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Position item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Modified position name\"));\r",
											"\r",
											"    pm.collectionVariables.set(\"Second created position\", jsonData._links.position.href);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Modified position name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Positions endpoint}}/{{Incorrect id}}",
									"host": [
										"{{Positions endpoint}}"
									],
									"path": [
										"{{Incorrect id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete second created position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Second created position}}",
									"host": [
										"{{Second created position}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update position via PATCH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Position item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Modified position name\"));\r",
											"\r",
											"    pm.expect(jsonData._links.self.href).to.equal(pm.collectionVariables.get(\"Created position\"));\r",
											"    pm.expect(jsonData._links.position.href).to.equal(pm.collectionVariables.get(\"Created position\"));\r",
											"    pm.expect(jsonData._links.childPositions.href).to.equal(pm.collectionVariables.get(\"Created position's child positions\"));\r",
											"    pm.expect(jsonData._links.parentPosition.href).to.equal(pm.collectionVariables.get(\"Created position's parent position\"));\r",
											"    pm.expect(jsonData._links.users.href).to.equal(pm.collectionVariables.get(\"Created position's users\"));\r",
											"    pm.expect(jsonData._links.groups.href).to.equal(pm.collectionVariables.get(\"Created position's groups\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Modified position name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created position}}",
									"host": [
										"{{Created position}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update non existent position via PATCH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(404);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: not found\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Position name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Positions endpoint}}/{{Incorrect id}}",
									"host": [
										"{{Positions endpoint}}"
									],
									"path": [
										"{{Incorrect id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete created position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Created position}}",
									"host": [
										"{{Created position}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete non existent position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(404);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: not found\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Second created position}}",
									"host": [
										"{{Second created position}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve deleted position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(404);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: not found\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created position}}",
									"host": [
										"{{Created position}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "List all positions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Position collection schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain the created position\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const positions = jsonData._embedded.positions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < positions.length; i++) {\r",
											"        if (positions[i]._links.self.href == pm.collectionVariables.get(\"Created position\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Positions endpoint}}",
									"host": [
										"{{Positions endpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.collectionVariables.set(\"Position item schema\", {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"name\": { \"type\": \"string\" },",
									"        \"_links\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"self\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"position\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"childPositions\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"parentPosition\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"users\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"groups\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                }                ",
									"            },",
									"            \"required\": [",
									"                \"self\",",
									"                \"position\",",
									"                \"childPositions\",",
									"                \"parentPosition\",",
									"                \"users\",",
									"                \"groups\"",
									"            ],",
									"            \"additionalProperties\": false",
									"        }",
									"    },",
									"    \"required\": [",
									"        \"name\",",
									"        \"_links\"",
									"    ],",
									"    \"additionalProperties\": false",
									"});",
									"",
									"pm.collectionVariables.set(\"Position collection schema\", {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"_embedded\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"positions\": {",
									"                    \"type\": \"array\",",
									"                    \"items\": pm.collectionVariables.get(\"Position item schema\"),",
									"                    \"uniqueItems\": true",
									"                }",
									"            },",
									"            \"required\": [ \"positions\" ],",
									"            \"additionalProperties\": false",
									"        },",
									"        \"_links\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"self\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"profile\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                }",
									"            },",
									"            \"required\": [ \"self\", \"profile\" ],",
									"            \"additionalProperties\": false",
									"        },",
									"    },",
									"    \"required\": [ \"_embedded\", \"_links\" ],",
									"    \"additionalProperties\": false",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Jurisdiction",
					"item": [
						{
							"name": "Create a jurisdiction",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 201 Created status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(201);\r",
											"    pm.expect(response.status).to.equal(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Jurisdiction item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Jurisdiction name\"));\r",
											"\r",
											"    pm.collectionVariables.set(\"Created jurisdiction\", jsonData._links.jurisdiction.href);\r",
											"    pm.collectionVariables.set(\"Created jurisdiction's groups\", jsonData._links.groups.href);\r",
											"    pm.collectionVariables.set(\"Created jurisdiction's id\", jsonData.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Jurisdiction name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Jurisdictions endpoint}}",
									"host": [
										"{{Jurisdictions endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "List all jurisdictions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Jurisdiction collection schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the created jurisdiction\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const jurisdictions = jsonData._embedded.jurisdictions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < jurisdictions.length; i++) {\r",
											"        if (jurisdictions[i]._links.jurisdiction.href == pm.collectionVariables.get(\"Created jurisdiction\")) {\r",
											"            pm.expect(jurisdictions[i].id).to.equal(pm.collectionVariables.get(\"Created jurisdiction's id\"));\r",
											"            pm.expect(jurisdictions[i].name).to.equal(pm.collectionVariables.get(\"Jurisdiction name\"));\r",
											"            pm.expect(jurisdictions[i]._links.groups.href).to.equal(pm.collectionVariables.get(\"Created jurisdiction's groups\"));\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Jurisdictions endpoint}}",
									"host": [
										"{{Jurisdictions endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve created jurisdiction",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Jurisdiction item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.id).to.equal(pm.collectionVariables.get(\"Created jurisdiction's id\"));\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Jurisdiction name\"));\r",
											"\r",
											"    pm.expect(jsonData._links.self.href).to.equal(pm.collectionVariables.get(\"Created jurisdiction\"));\r",
											"    pm.expect(jsonData._links.jurisdiction.href).to.equal(pm.collectionVariables.get(\"Created jurisdiction\"));\r",
											"    pm.expect(jsonData._links.groups.href).to.equal(pm.collectionVariables.get(\"Created jurisdiction's groups\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created jurisdiction}}",
									"host": [
										"{{Created jurisdiction}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve non existent jurisdiction",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(404);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: not found\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Jurisdictions endpoint}}/{{Incorrect id}}",
									"host": [
										"{{Jurisdictions endpoint}}"
									],
									"path": [
										"{{Incorrect id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update jurisdiction via PUT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Jurisdiction item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.id).to.equal(pm.collectionVariables.get(\"Created jurisdiction's id\"));\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Modified jurisdiction name\"));\r",
											"\r",
											"    pm.expect(jsonData._links.self.href).to.equal(pm.collectionVariables.get(\"Created jurisdiction\"));\r",
											"    pm.expect(jsonData._links.jurisdiction.href).to.equal(pm.collectionVariables.get(\"Created jurisdiction\"));\r",
											"    pm.expect(jsonData._links.groups.href).to.equal(pm.collectionVariables.get(\"Created jurisdiction's groups\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Modified jurisdiction name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created jurisdiction}}",
									"host": [
										"{{Created jurisdiction}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update non existent jurisdiction via PUT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 201 Created status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(201);\r",
											"    pm.expect(response.status).to.equal(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Jurisdiction item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Jurisdiction name\"));\r",
											"\r",
											"    pm.collectionVariables.set(\"Second created jurisdiction\", jsonData._links.jurisdiction.href);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Jurisdiction name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Jurisdictions endpoint}}/{{Incorrect id}}",
									"host": [
										"{{Jurisdictions endpoint}}"
									],
									"path": [
										"{{Incorrect id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete second created jurisdiction",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Second created jurisdiction}}",
									"host": [
										"{{Second created jurisdiction}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update jurisdiction via PATCH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Jurisdiction item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.id).to.equal(pm.collectionVariables.get(\"Created jurisdiction's id\"));\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Jurisdiction name\"));\r",
											"\r",
											"    pm.expect(jsonData._links.self.href).to.equal(pm.collectionVariables.get(\"Created jurisdiction\"));\r",
											"    pm.expect(jsonData._links.jurisdiction.href).to.equal(pm.collectionVariables.get(\"Created jurisdiction\"));\r",
											"    pm.expect(jsonData._links.groups.href).to.equal(pm.collectionVariables.get(\"Created jurisdiction's groups\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Jurisdiction name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created jurisdiction}}",
									"host": [
										"{{Created jurisdiction}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update non existent jurisdiction via PATCH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(404);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: not found\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n\t\"name\": \"{{Modified jurisdiction name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Jurisdictions endpoint}}/{{Incorrect id}}",
									"host": [
										"{{Jurisdictions endpoint}}"
									],
									"path": [
										"{{Incorrect id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete created jurisdiction",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Created jurisdiction}}",
									"host": [
										"{{Created jurisdiction}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete non existent jurisdiction",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(404);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: not found\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Second created jurisdiction}}",
									"host": [
										"{{Second created jurisdiction}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve deleted jurisdiction",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(404);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: not found\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created jurisdiction}}",
									"host": [
										"{{Created jurisdiction}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "List all jurisdictions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Jurisdiction collection schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain the created jurisdiction\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const jurisdictions = jsonData._embedded.jurisdictions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < jurisdictions.length; i++) {\r",
											"        if (jurisdictions[i]._links.self.href == pm.collectionVariables.get(\"Created jurisdiction\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Jurisdictions endpoint}}",
									"host": [
										"{{Jurisdictions endpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.collectionVariables.set(\"Jurisdiction item schema\", {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"id\": { \"type\": \"integer\" },",
									"        \"name\": { \"type\": \"string\" },",
									"        \"_links\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"self\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"jurisdiction\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"groups\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                }",
									"            },",
									"            \"required\": [",
									"                \"self\",",
									"                \"groups\"",
									"            ],",
									"            \"additionalProperties\": false",
									"        }",
									"    },",
									"    \"required\": [",
									"        \"id\",",
									"        \"name\",",
									"        \"_links\"",
									"    ],",
									"    \"additionalProperties\": false",
									"});",
									"",
									"pm.collectionVariables.set(\"Jurisdiction collection schema\", {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"_embedded\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"jurisdictions\": {",
									"                    \"type\": \"array\",",
									"                    \"items\": pm.collectionVariables.get(\"Jurisdiction item schema\"),",
									"                    \"uniqueItems\": true",
									"                }",
									"            },",
									"            \"required\": [ \"jurisdictions\" ],",
									"            \"additionalProperties\": false",
									"        },",
									"        \"_links\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"self\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"profile\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                }",
									"            },",
									"            \"required\": [ \"self\", \"profile\" ],",
									"            \"additionalProperties\": false",
									"        },",
									"    },",
									"    \"required\": [ \"_embedded\", \"_links\" ],",
									"    \"additionalProperties\": false",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Flag Definition",
					"item": [
						{
							"name": "Create a flag definition",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 201 Created status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(201);\r",
											"    pm.expect(response.status).to.equal(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Flag definition item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Flag definition name\"));\r",
											"    pm.expect(jsonData.description).to.equal(pm.collectionVariables.get(\"Flag definition description\"));\r",
											"    pm.expect(jsonData.note).to.equal(pm.collectionVariables.get(\"Flag definition note\"));\r",
											"    pm.expect(jsonData.defaultValue).to.equal(pm.collectionVariables.get(\"Flag definition default value\"));\r",
											"\r",
											"    pm.collectionVariables.set(\"Created flag definition\", jsonData._links.flagDefinition.href);\r",
											"    pm.collectionVariables.set(\"Created flag definition's flags\", jsonData._links.flags.href);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Flag definition name}}\",\n    \"description\": \"{{Flag definition description}}\",\n    \"note\": \"{{Flag definition note}}\",\n    \"defaultValue\": \"{{Flag definition default value}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Flag definitions endpoint}}",
									"host": [
										"{{Flag definitions endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "List all flag definition",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Flag definition collection schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the created flag definition\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const flagDefinitions = jsonData._embedded.flagDefinitions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < flagDefinitions.length; i++) {\r",
											"        if (flagDefinitions[i]._links.flagDefinition.href == pm.collectionVariables.get(\"Created flag definition\")) {\r",
											"            pm.expect(flagDefinitions[i].name).to.equal(pm.collectionVariables.get(\"Flag definition name\"));\r",
											"            pm.expect(flagDefinitions[i].description).to.equal(pm.collectionVariables.get(\"Flag definition description\"));\r",
											"            pm.expect(flagDefinitions[i].note).to.equal(pm.collectionVariables.get(\"Flag definition note\"));\r",
											"            pm.expect(flagDefinitions[i].defaultValue).to.equal(pm.collectionVariables.get(\"Flag definition default value\"));\r",
											"            pm.expect(flagDefinitions[i]._links.self.href).to.equal(pm.collectionVariables.get(\"Created flag definition\"));\r",
											"            pm.expect(flagDefinitions[i]._links.flagDefinition.href).to.equal(pm.collectionVariables.get(\"Created flag definition\"));\r",
											"            pm.expect(flagDefinitions[i]._links.flags.href).to.equal(pm.collectionVariables.get(\"Created flag definition's flags\"));\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Flag definitions endpoint}}",
									"host": [
										"{{Flag definitions endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve created flag definition",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Flag definition item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Flag definition name\"));\r",
											"    pm.expect(jsonData.definition).to.equal(pm.collectionVariables.get(\"Flag definition definition\"));\r",
											"    pm.expect(jsonData.note).to.equal(pm.collectionVariables.get(\"Flag definition note\"));\r",
											"    pm.expect(jsonData.defaultValue).to.equal(pm.collectionVariables.get(\"Flag definition default value\"));\r",
											"\r",
											"    pm.expect(jsonData._links.self.href).to.equal(pm.collectionVariables.get(\"Created flag definition\"));\r",
											"    pm.expect(jsonData._links.flagDefinition.href).to.equal(pm.collectionVariables.get(\"Created flag definition\"));\r",
											"    pm.expect(jsonData._links.flags.href).to.equal(pm.collectionVariables.get(\"Created flag definition's flags\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created flag definition}}",
									"host": [
										"{{Created flag definition}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve non existent flag definition",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(404);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: not found\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Flag definitions endpoint}}/{{Incorrect id}}",
									"host": [
										"{{Flag definitions endpoint}}"
									],
									"path": [
										"{{Incorrect id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update flag definition via PUT with partial data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Flag definition item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Flag definition name\"));\r",
											"    pm.expect(jsonData.note).to.equal(pm.collectionVariables.get(\"Modified flag definition note\"));\r",
											"    pm.expect(jsonData.description).to.be.null;\r",
											"    pm.expect(jsonData.defaultValue).to.be.null;\r",
											"\r",
											"    pm.expect(jsonData._links.self.href).to.equal(pm.collectionVariables.get(\"Created flag definition\"));\r",
											"    pm.expect(jsonData._links.flagDefinition.href).to.equal(pm.collectionVariables.get(\"Created flag definition\"));\r",
											"    pm.expect(jsonData._links.flags.href).to.equal(pm.collectionVariables.get(\"Created flag definition's flags\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"note\": \"{{Modified flag definition note}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created flag definition}}",
									"host": [
										"{{Created flag definition}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update flag definition via PUT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Flag definition item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Flag definition name\"));\r",
											"    pm.expect(jsonData.description).to.equal(pm.collectionVariables.get(\"Flag definition description\"));\r",
											"    pm.expect(jsonData.note).to.equal(pm.collectionVariables.get(\"Modified flag definition note\"));\r",
											"    pm.expect(jsonData.defaultValue).to.equal(pm.collectionVariables.get(\"Flag definition default value\"));\r",
											"\r",
											"    pm.expect(jsonData._links.self.href).to.equal(pm.collectionVariables.get(\"Created flag definition\"));\r",
											"    pm.expect(jsonData._links.flagDefinition.href).to.equal(pm.collectionVariables.get(\"Created flag definition\"));\r",
											"    pm.expect(jsonData._links.flags.href).to.equal(pm.collectionVariables.get(\"Created flag definition's flags\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"description\": \"{{Flag definition description}}\",\n    \"note\": \"{{Modified flag definition note}}\",\n    \"defaultValue\": \"{{Flag definition default value}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created flag definition}}",
									"host": [
										"{{Created flag definition}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update non existent flag definition via PUT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 201 Created status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(201);\r",
											"    pm.expect(response.status).to.equal(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Flag definition item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Incorrect id\"));\r",
											"    pm.expect(jsonData.description).to.equal(pm.collectionVariables.get(\"Flag definition description\"));\r",
											"    pm.expect(jsonData.note).to.equal(pm.collectionVariables.get(\"Modified flag definition note\"));\r",
											"    pm.expect(jsonData.defaultValue).to.equal(pm.collectionVariables.get(\"Flag definition default value\"));\r",
											"\r",
											"    pm.collectionVariables.set(\"Second created flag definition\", jsonData._links.flagDefinition.href);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"description\": \"{{Flag definition description}}\",\n    \"note\": \"{{Modified flag definition note}}\",\n    \"defaultValue\": \"{{Flag definition default value}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Flag definitions endpoint}}/{{Incorrect id}}",
									"host": [
										"{{Flag definitions endpoint}}"
									],
									"path": [
										"{{Incorrect id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete second created flag definition",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Second created flag definition}}",
									"host": [
										"{{Second created flag definition}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update flag definition via PATCH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Flag definition item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Flag definition name\"));\r",
											"    pm.expect(jsonData.description).to.equal(pm.collectionVariables.get(\"Flag definition description\"));\r",
											"    pm.expect(jsonData.note).to.equal(pm.collectionVariables.get(\"Flag definition note\"));\r",
											"    pm.expect(jsonData.defaultValue).to.equal(pm.collectionVariables.get(\"Flag definition default value\"));\r",
											"\r",
											"    pm.expect(jsonData._links.self.href).to.equal(pm.collectionVariables.get(\"Created flag definition\"));\r",
											"    pm.expect(jsonData._links.flagDefinition.href).to.equal(pm.collectionVariables.get(\"Created flag definition\"));\r",
											"    pm.expect(jsonData._links.flags.href).to.equal(pm.collectionVariables.get(\"Created flag definition's flags\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"note\": \"{{Flag definition note}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created flag definition}}",
									"host": [
										"{{Created flag definition}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update non existent flag definition via PATCH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(404);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: not found\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"note\": \"{{Modified flag definition note}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Flag definitions endpoint}}/{{Incorrect id}}",
									"host": [
										"{{Flag definitions endpoint}}"
									],
									"path": [
										"{{Incorrect id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete created flag definition",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Created flag definition}}",
									"host": [
										"{{Created flag definition}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete non existent flag definition",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(404);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: not found\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Second created flag definition}}",
									"host": [
										"{{Second created flag definition}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve deleted flag definition",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(404);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: not found\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created flag definition}}",
									"host": [
										"{{Created flag definition}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "List all flag definitions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Flag definition collection schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain the created flag definition\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const flagDefinitions = jsonData._embedded.flagDefinitions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < flagDefinitions.length; i++) {\r",
											"        if (flagDefinitions[i]._links.self.href == pm.collectionVariables.get(\"Created flag definition\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Flag definitions endpoint}}",
									"host": [
										"{{Flag definitions endpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.collectionVariables.set(\"Flag definition item schema\", {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"name\": { \"type\": \"string\" },",
									"        \"description\": { \"type\": [ \"string\", \"null\" ] },",
									"        \"note\": { \"type\": [ \"string\", \"null\" ] },",
									"        \"defaultValue\": { \"type\": [ \"string\", \"null\" ] },",
									"        \"_links\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"self\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"flagDefinition\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"flags\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                }",
									"            },",
									"            \"required\": [",
									"                \"self\",",
									"                \"flagDefinition\",",
									"                \"flags\"",
									"            ],",
									"            \"additionalProperties\": false",
									"        }",
									"    },",
									"    \"required\": [",
									"        \"name\",",
									"        \"description\",",
									"        \"note\",",
									"        \"defaultValue\",",
									"        \"_links\"",
									"    ],",
									"    \"additionalProperties\": false",
									"});",
									"",
									"pm.collectionVariables.set(\"Flag definition collection schema\", {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"_embedded\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"flagDefinitions\": {",
									"                    \"type\": \"array\",",
									"                    \"items\": pm.collectionVariables.get(\"Flag definition item schema\"),",
									"                    \"uniqueItems\": true",
									"                }",
									"            },",
									"            \"required\": [ \"flagDefinitions\" ],",
									"            \"additionalProperties\": false",
									"        },",
									"        \"_links\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"self\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"profile\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                }",
									"            },",
									"            \"required\": [ \"self\", \"profile\" ],",
									"            \"additionalProperties\": false",
									"        },",
									"    },",
									"    \"required\": [ \"_embedded\", \"_links\" ],",
									"    \"additionalProperties\": false",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Flag",
					"item": [
						{
							"name": "Create a user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 201 Created status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(201);\r",
											"    pm.expect(response.status).to.equal(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.collectionVariables.set(\"Created user\", jsonData._links.user.href);\r",
											"    pm.collectionVariables.set(\"Created user's id\", jsonData.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"username\": \"{{Username}}\",\n    \"password\": \"{{Password}}\",\n    \"firstName\": \"{{First name}}\",\n    \"lastName\": \"{{Last name}}\",\n    \"email\": \"{{Email}}\",\n    \"status\": \"{{User status}}\",\n    \"passwordExpires\": \"{{Password expires}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Users endpoint}}",
									"host": [
										"{{Users endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a flag definition",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 201 Created status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(201);\r",
											"    pm.expect(response.status).to.equal(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.collectionVariables.set(\"Created flag definition\", jsonData._links.flagDefinition.href);\r",
											"    pm.collectionVariables.set(\"Created flag definition's name\", jsonData.name);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Flag definition name}}\",\n    \"description\": \"{{Flag definition description}}\",\n    \"note\": \"{{Flag definition note}}\",\n    \"defaultValue\": \"{{Flag definition default value}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Flag definitions endpoint}}",
									"host": [
										"{{Flag definitions endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a flag",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 201 Created status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(201);\r",
											"    pm.expect(response.status).to.equal(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Flag item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.value).to.equal(pm.collectionVariables.get(\"Flag value\"));\r",
											"\r",
											"    pm.collectionVariables.set(\"Created flag\", jsonData._links.flag.href);\r",
											"    pm.collectionVariables.set(\"Created flag's definition\", jsonData._links.flagDefinition.href);\r",
											"    pm.collectionVariables.set(\"Created flag's user\", jsonData._links.user.href);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"id\": {\n        \"userId\": \"{{Created user's id}}\",\n        \"flagName\": \"{{Created flag definition's name}}\"\n    },\n    \"value\": \"{{Flag value}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Flags endpoint}}",
									"host": [
										"{{Flags endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "List all flags",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Flag collection schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the created flag\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const flags = jsonData._embedded.flags;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < flags.length; i++) {\r",
											"        if (flags[i]._links.flag.href == pm.collectionVariables.get(\"Created flag\")) {\r",
											"            pm.expect(flags[i].value).to.equal(pm.collectionVariables.get(\"Flag value\"));\r",
											"            pm.expect(flags[i]._links.self.href).to.equal(pm.collectionVariables.get(\"Created flag\"));\r",
											"            pm.expect(flags[i]._links.flag.href).to.equal(pm.collectionVariables.get(\"Created flag\"));\r",
											"            pm.expect(flags[i]._links.flagDefinition.href).to.equal(pm.collectionVariables.get(\"Created flag's definition\"));\r",
											"            pm.expect(flags[i]._links.user.href).to.equal(pm.collectionVariables.get(\"Created flag's user\"));\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Flags endpoint}}",
									"host": [
										"{{Flags endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve created flag",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Flag item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.value).to.equal(pm.collectionVariables.get(\"Flag value\"));\r",
											"\r",
											"    pm.expect(jsonData._links.self.href).to.equal(pm.collectionVariables.get(\"Created flag\"));\r",
											"    pm.expect(jsonData._links.flag.href).to.equal(pm.collectionVariables.get(\"Created flag\"));\r",
											"    pm.expect(jsonData._links.flagDefinition.href).to.equal(pm.collectionVariables.get(\"Created flag's definition\"));\r",
											"    pm.expect(jsonData._links.user.href).to.equal(pm.collectionVariables.get(\"Created flag's user\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created flag}}",
									"host": [
										"{{Created flag}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve non existent flag",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(404);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: not found\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Flags endpoint}}/{{Incorrect id}}",
									"host": [
										"{{Flags endpoint}}"
									],
									"path": [
										"{{Incorrect id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update flag via PUT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Flag item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.value).to.equal(pm.collectionVariables.get(\"Flag modified value\"));\r",
											"\r",
											"    pm.expect(jsonData._links.self.href).to.equal(pm.collectionVariables.get(\"Created flag\"));\r",
											"    pm.expect(jsonData._links.flag.href).to.equal(pm.collectionVariables.get(\"Created flag\"));\r",
											"    pm.expect(jsonData._links.flagDefinition.href).to.equal(pm.collectionVariables.get(\"Created flag's definition\"));\r",
											"    pm.expect(jsonData._links.user.href).to.equal(pm.collectionVariables.get(\"Created flag's user\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"value\": \"{{Flag modified value}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created flag}}",
									"host": [
										"{{Created flag}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update non existent flag via PUT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(404);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: not found\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"description\": \"{{Flag definition description}}\",\n    \"note\": \"{{Modified flag definition note}}\",\n    \"defaultValue\": \"{{Flag definition default value}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Flags endpoint}}/{{Incorrect flag id}}",
									"host": [
										"{{Flags endpoint}}"
									],
									"path": [
										"{{Incorrect flag id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update flag via PATCH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Flag item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.value).to.equal(pm.collectionVariables.get(\"Flag value\"));\r",
											"\r",
											"    pm.expect(jsonData._links.self.href).to.equal(pm.collectionVariables.get(\"Created flag\"));\r",
											"    pm.expect(jsonData._links.flag.href).to.equal(pm.collectionVariables.get(\"Created flag\"));\r",
											"    pm.expect(jsonData._links.flagDefinition.href).to.equal(pm.collectionVariables.get(\"Created flag's definition\"));\r",
											"    pm.expect(jsonData._links.user.href).to.equal(pm.collectionVariables.get(\"Created flag's user\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"value\": \"{{Flag value}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created flag}}",
									"host": [
										"{{Created flag}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update non existent flag via PATCH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(404);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: not found\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"note\": \"{{Modified flag definition note}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Flag definitions endpoint}}/{{Incorrect flag id}}",
									"host": [
										"{{Flag definitions endpoint}}"
									],
									"path": [
										"{{Incorrect flag id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete created flag",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Created flag}}",
									"host": [
										"{{Created flag}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve deleted flag",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(404);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: not found\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created flag}}",
									"host": [
										"{{Created flag}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "List all flags",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Flag collection schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain the created flag\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const flags = jsonData._embedded.flags;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < flags.length; i++) {\r",
											"        if (flags[i]._links.self.href == pm.collectionVariables.get(\"Created flag\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Flags endpoint}}",
									"host": [
										"{{Flags endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete created flag definition",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Created flag definition}}",
									"host": [
										"{{Created flag definition}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete created user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Created user}}",
									"host": [
										"{{Created user}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.collectionVariables.set(\"Flag item schema\", {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"value\": { \"type\": \"string\" },",
									"        \"_links\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"self\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"flag\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"flagDefinition\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"user\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                }",
									"            },",
									"            \"required\": [",
									"                \"self\",",
									"                \"flag\",",
									"                \"flagDefinition\",",
									"                \"user\"",
									"            ],",
									"            \"additionalProperties\": false",
									"        }",
									"    },",
									"    \"required\": [",
									"        \"value\",",
									"        \"_links\"",
									"    ],",
									"    \"additionalProperties\": false",
									"});",
									"",
									"pm.collectionVariables.set(\"Flag collection schema\", {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"_embedded\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"flags\": {",
									"                    \"type\": \"array\",",
									"                    \"items\": pm.collectionVariables.get(\"Flag item schema\"),",
									"                    \"uniqueItems\": true",
									"                }",
									"            },",
									"            \"required\": [ \"flags\" ],",
									"            \"additionalProperties\": false",
									"        },",
									"        \"_links\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"self\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"profile\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                }",
									"            },",
									"            \"required\": [ \"self\", \"profile\" ],",
									"            \"additionalProperties\": false",
									"        },",
									"    },",
									"    \"required\": [ \"_embedded\", \"_links\" ],",
									"    \"additionalProperties\": false",
									"});"
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "Constraints",
			"item": [
				{
					"name": "Setup",
					"item": [
						{
							"name": "Create a user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 201 Created status\", () => {\r",
											"    const response = pm.response;\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(response.code).to.equal(201);\r",
											"    pm.expect(response.status).to.equal(\"Created\");\r",
											"\r",
											"    pm.collectionVariables.set(\"Created user\", jsonData._links.user.href);\r",
											"    pm.collectionVariables.set(\"Created user's timezone\", jsonData._links.timezone.href);\r",
											"    pm.collectionVariables.set(\"Created user's permissions\", jsonData._links.permissions.href);\r",
											"    pm.collectionVariables.set(\"Created user's position\", jsonData._links.position.href);\r",
											"    pm.collectionVariables.set(\"Created user's owned groups\", jsonData._links.ownedGroups.href);\r",
											"    pm.collectionVariables.set(\"Created user's groups\", jsonData._links.groups.href);\r",
											"    pm.collectionVariables.set(\"Created user's id\", jsonData.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"username\": \"{{Username}}\",\n    \"password\": \"{{Password}}\",\n    \"firstName\": \"{{First name}}\",\n    \"lastName\": \"{{Last name}}\",\n    \"email\": \"{{Email}}\",\n    \"status\": \"{{User status}}\",\n    \"passwordExpires\": \"{{Password expires}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Users endpoint}}",
									"host": [
										"{{Users endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 201 Created status\", () => {\r",
											"    const response = pm.response;\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(response.code).to.equal(201);\r",
											"    pm.expect(response.status).to.equal(\"Created\");\r",
											"\r",
											"    pm.collectionVariables.set(\"Created group\", jsonData._links.group.href);\r",
											"    pm.collectionVariables.set(\"Created group's owner\", jsonData._links.owner.href);\r",
											"    pm.collectionVariables.set(\"Created group's users\", jsonData._links.users.href);\r",
											"    pm.collectionVariables.set(\"Created group's permissions\", jsonData._links.permissions.href);\r",
											"    pm.collectionVariables.set(\"Created group's positions\", jsonData._links.positions.href);\r",
											"    pm.collectionVariables.set(\"Created group's id\", jsonData.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Group name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Groups endpoint}}",
									"host": [
										"{{Groups endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a permission type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 201 Created status\", () => {\r",
											"    const response = pm.response;\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(response.code).to.equal(201);\r",
											"    pm.expect(response.status).to.equal(\"Created\");\r",
											"\r",
											"    pm.collectionVariables.set(\"Created permission type\", jsonData._links.permissionType.href);\r",
											"    pm.collectionVariables.set(\"Created permission type's permissions\", jsonData._links.permissions.href);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Permission type name}}\",\n    \"description\": \"{{Permission type description}}\",\n    \"displayOrder\": {{Display order}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Permission types endpoint}}",
									"host": [
										"{{Permission types endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a permission",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 201 Created status\", () => {\r",
											"    const response = pm.response;\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(response.code).to.equal(201);\r",
											"    pm.expect(response.status).to.equal(\"Created\");\r",
											"\r",
											"    pm.collectionVariables.set(\"Created permission\", jsonData._links.permission.href);\r",
											"    pm.collectionVariables.set(\"Created permission's type\", jsonData._links.type.href);\r",
											"    pm.collectionVariables.set(\"Created permission's users\", jsonData._links.users.href);\r",
											"    pm.collectionVariables.set(\"Created permission's groups\", jsonData._links.groups.href);\r",
											"    pm.collectionVariables.set(\"Created permission's id\", jsonData.name);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Permission name}}\",\n    \"description\": \"{{Permission description}}\",\n    \"displayOrder\": {{Display order}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Permissions endpoint}}",
									"host": [
										"{{Permissions endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a timezone",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 201 Created status\", () => {\r",
											"    const response = pm.response;\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(response.code).to.equal(201);\r",
											"    pm.expect(response.status).to.equal(\"Created\");\r",
											"\r",
											"    pm.collectionVariables.set(\"Created timezone\", jsonData._links.timezone.href);\r",
											"    pm.collectionVariables.set(\"Created timezone's users\", jsonData._links.users.href);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Timezone name}}\",\n    \"status\": \"{{Timezone status}}\",\n    \"display\": \"{{Display}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Timezones endpoint}}",
									"host": [
										"{{Timezones endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 201 Created status\", () => {\r",
											"    const response = pm.response;\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.collectionVariables.set(\"Created position\", jsonData._links.position.href);\r",
											"    pm.collectionVariables.set(\"Created position's child positions\", jsonData._links.childPositions.href);\r",
											"    pm.collectionVariables.set(\"Created position's parent position\", jsonData._links.parentPosition.href);\r",
											"    pm.collectionVariables.set(\"Created position's users\", jsonData._links.users.href);\r",
											"    pm.collectionVariables.set(\"Created position's groups\", jsonData._links.groups.href);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Position name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Positions endpoint}}",
									"host": [
										"{{Positions endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a jurisdiction",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 201 Created status\", () => {\r",
											"    const response = pm.response;\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(response.code).to.equal(201);\r",
											"    pm.expect(response.status).to.equal(\"Created\");\r",
											"\r",
											"    pm.collectionVariables.set(\"Created jurisdiction\", jsonData._links.jurisdiction.href);\r",
											"    pm.collectionVariables.set(\"Created jurisdiction's groups\", jsonData._links.groups.href);\r",
											"    pm.collectionVariables.set(\"Created jurisdiction's id\", jsonData.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Jurisdiction name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Jurisdictions endpoint}}",
									"host": [
										"{{Jurisdictions endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a flag definition",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 201 Created status\", () => {\r",
											"    const response = pm.response;\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(response.code).to.equal(201);\r",
											"    pm.expect(response.status).to.equal(\"Created\");\r",
											"\r",
											"    pm.collectionVariables.set(\"Created flag definition\", jsonData._links.flagDefinition.href);\r",
											"    pm.collectionVariables.set(\"Created flag definition's flags\", jsonData._links.flags.href);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Flag definition name}}\",\n    \"description\": \"{{Flag definition description}}\",\n    \"note\": \"{{Flag definition note}}\",\n    \"defaultValue\": \"{{Flag definition default value}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Flag definitions endpoint}}",
									"host": [
										"{{Flag definitions endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a flag",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 201 Created status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(201);\r",
											"    pm.expect(response.status).to.equal(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Flag item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.value).to.equal(pm.collectionVariables.get(\"Flag value\"));\r",
											"\r",
											"    pm.collectionVariables.set(\"Created flag\", jsonData._links.flag.href);\r",
											"    pm.collectionVariables.set(\"Created flag's definition\", jsonData._links.flagDefinition.href);\r",
											"    pm.collectionVariables.set(\"Created flag's user\", jsonData._links.user.href);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"id\": {\n        \"flagName\": \"{{Created flag definition's name}}\",\n        \"userId\": \"{{Created user's id}}\"\n    },\n    \"value\": \"{{Flag value}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Flags endpoint}}",
									"host": [
										"{{Flags endpoint}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "User",
					"item": [
						{
							"name": "Username is unique",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 500 Internal Server Error\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(500);\r",
											"    pm.expect(response.status).to.equal(\"Internal Server Error\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(500);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: db violation\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message == \"duplicate value for a record with unique key\") {\r",
											"            pm.expect(failures[i]).to.have.property(\"constraint\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"username\": \"{{Username}}\",\n    \"password\": \"{{Password}}\",\n    \"firstName\": \"{{First name}}\",\n    \"lastName\": \"{{Last name}}\",\n    \"email\": \"{{Email}}\",\n    \"status\": \"{{User status}}\",\n    \"passwordExpires\": \"{{Password expires}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Users endpoint}}",
									"host": [
										"{{Users endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Username length cannot be <1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: app violation\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message.startsWith(\"size must be \")) {\r",
											"            pm.expect(failures[i].constraint).to.equal(\"username\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"username\": \"\",\n    \"password\": \"{{Password}}\",\n    \"firstName\": \"{{First name}}\",\n    \"lastName\": \"{{Last name}}\",\n    \"email\": \"{{Email}}\",\n    \"status\": \"{{User status}}\",\n    \"passwordExpires\": \"{{Password expires}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Users endpoint}}",
									"host": [
										"{{Users endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Username length cannot be >32",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: app violation\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message.startsWith(\"size must be \")) {\r",
											"            pm.expect(failures[i].constraint).to.equal(\"username\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"username\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n    \"password\": \"{{Password}}\",\n    \"firstName\": \"{{First name}}\",\n    \"lastName\": \"{{Last name}}\",\n    \"email\": \"{{Email}}\",\n    \"status\": \"{{User status}}\",\n    \"passwordExpires\": \"{{Password expires}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Users endpoint}}",
									"host": [
										"{{Users endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Username cannot be null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: app violation\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message == \"must not be null\") {\r",
											"            pm.expect(failures[i].constraint).to.equal(\"username\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"username\": null,\n    \"password\": \"{{Password}}\",\n    \"firstName\": \"{{First name}}\",\n    \"lastName\": \"{{Last name}}\",\n    \"email\": \"{{Email}}\",\n    \"status\": \"{{User status}}\",\n    \"passwordExpires\": \"{{Password expires}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Users endpoint}}",
									"host": [
										"{{Users endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Username cannot be changed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 409 Conflict\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(409);\r",
											"    pm.expect(response.status).to.equal(\"Conflict\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(409);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: immutable id change\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message.startsWith(\"altered from \")) {\r",
											"            pm.expect(failures[i].constraint).to.equal(\"immutable identifier\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"username\": \"{{Modified username}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created user}}",
									"host": [
										"{{Created user}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Username cannot be changed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 409 Conflict\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(409);\r",
											"    pm.expect(response.status).to.equal(\"Conflict\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(409);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: immutable id change\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message.startsWith(\"altered from \")) {\r",
											"            pm.expect(failures[i].constraint).to.equal(\"immutable identifier\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"username\": \"{{Modified username}}\",\n    \"password\": \"{{Password}}\",\n    \"lastName\": \"{{Modified last name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created user}}",
									"host": [
										"{{Created user}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Password length cannot be <8",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: app violation\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message.startsWith(\"size must be \")) {\r",
											"            pm.expect(failures[i].constraint).to.equal(\"password\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"username\": \"xxxxxxxxx\",\n    \"password\": \"xxxxxxx\",\n    \"firstName\": \"{{First name}}\",\n    \"lastName\": \"{{Last name}}\",\n    \"email\": \"{{Email}}\",\n    \"status\": \"{{User status}}\",\n    \"passwordExpires\": \"{{Password expires}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Users endpoint}}",
									"host": [
										"{{Users endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Password length cannot be >40",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: app violation\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message.startsWith(\"size must be \")) {\r",
											"            pm.expect(failures[i].constraint).to.equal(\"password\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"password\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created user}}",
									"host": [
										"{{Created user}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Password cannot be 'password'",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: app violation\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message == \"must not be 'password'\") {\r",
											"            pm.expect(failures[i].constraint).to.equal(\"password\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"password\": \"password\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created user}}",
									"host": [
										"{{Created user}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Password must comply with regexp",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: app violation\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message.startsWith(\"must contain \")) {\r",
											"            pm.expect(failures[i].constraint).to.equal(\"password\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"password\": \"xxxxxxxx\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created user}}",
									"host": [
										"{{Created user}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Password must not equal username",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: app violation\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message == \"must not be the same as the username\") {\r",
											"            pm.expect(failures[i].constraint).to.equal(\"password\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"password\": \"{{Username}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created user}}",
									"host": [
										"{{Created user}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Password cannot be null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: app violation\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message == \"must not be null\") {\r",
											"            pm.expect(failures[i].constraint).to.equal(\"password\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"password\": null\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created user}}",
									"host": [
										"{{Created user}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "First name length cannot be >60",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: app violation\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message.startsWith(\"size must be \")) {\r",
											"            pm.expect(failures[i].constraint).to.equal(\"firstName\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"firstName\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created user}}",
									"host": [
										"{{Created user}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Last name length cannot be >80",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: app violation\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message.startsWith(\"size must be \")) {\r",
											"            pm.expect(failures[i].constraint).to.equal(\"lastName\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"lastName\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created user}}",
									"host": [
										"{{Created user}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Email must be a valid email address",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: app violation\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message == \"must be a well-formed email address\") {\r",
											"            pm.expect(failures[i].constraint).to.equal(\"email\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"email\": \"xxxxxxx\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created user}}",
									"host": [
										"{{Created user}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Email length cannot be >60",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: app violation\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message.startsWith(\"size must be \")) {\r",
											"            pm.expect(failures[i].constraint).to.equal(\"email\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"email\": \"x@xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.xxx\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created user}}",
									"host": [
										"{{Created user}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Status cannot be null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: app violation\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message == \"must not be null\") {\r",
											"            pm.expect(failures[i].constraint).to.equal(\"status\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"status\": null\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created user}}",
									"host": [
										"{{Created user}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Status can be A, S, P, L or X",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: enum violation\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message.startsWith(\"not one of the values accepted: [\")) {\r",
											"            pm.expect(failures[i].constraint).to.equal(\"status\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"status\": \"x\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created user}}",
									"host": [
										"{{Created user}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Password expires cannot be null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: app violation\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message == \"must not be null\") {\r",
											"            pm.expect(failures[i].constraint).to.equal(\"passwordExpires\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"passwordExpires\": null\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created user}}",
									"host": [
										"{{Created user}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Password expires can be Y or N",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: enum violation\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message.startsWith(\"not one of the values accepted: [\")) {\r",
											"            pm.expect(failures[i].constraint).to.equal(\"passwordExpires\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"passwordExpires\": \"x\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created user}}",
									"host": [
										"{{Created user}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Agent length cannot be >32",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: app violation\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message.startsWith(\"size must be \")) {\r",
											"            pm.expect(failures[i].constraint).to.equal(\"agent\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"agent\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created user}}",
									"host": [
										"{{Created user}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Override code length cannot be >2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: app violation\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message.startsWith(\"size must be \")) {\r",
											"            pm.expect(failures[i].constraint).to.equal(\"overrideCode\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"overrideCode\": \"xxx\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created user}}",
									"host": [
										"{{Created user}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Group",
					"item": [
						{
							"name": "Name is unique",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 500 Internal Server Error\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(500);\r",
											"    pm.expect(response.status).to.equal(\"Internal Server Error\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(500);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: db violation\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message == \"duplicate value for a record with unique key\") {\r",
											"            pm.expect(failures[i]).to.have.property(\"constraint\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Group name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Groups endpoint}}",
									"host": [
										"{{Groups endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Name length cannot be <1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: app violation\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message.startsWith(\"size must be \")) {\r",
											"            pm.expect(failures[i].constraint).to.equal(\"name\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created group}}",
									"host": [
										"{{Created group}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Name length cannot be >64",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: app violation\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message.startsWith(\"size must be \")) {\r",
											"            pm.expect(failures[i].constraint).to.equal(\"name\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created group}}",
									"host": [
										"{{Created group}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Name cannot be null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: app violation\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message == \"must not be null\") {\r",
											"            pm.expect(failures[i].constraint).to.equal(\"name\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": null\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created group}}",
									"host": [
										"{{Created group}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Permission Type",
					"item": [
						{
							"name": "Name length cannot be <1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: app violation\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message.startsWith(\"size must be \")) {\r",
											"            pm.expect(failures[i].constraint).to.equal(\"name\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"\",\n    \"description\": \"{{Permission type description}}\",\n    \"displayOrder\": {{Display order}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Permission types endpoint}}",
									"host": [
										"{{Permission types endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Name length cannot be >8",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: app violation\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message.startsWith(\"size must be \")) {\r",
											"            pm.expect(failures[i].constraint).to.equal(\"name\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"xxxxxxxxx\",\n    \"description\": \"{{Permission type description}}\",\n    \"displayOrder\": {{Display order}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Permission types endpoint}}",
									"host": [
										"{{Permission types endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Name cannot be null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: primary id required\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message == \"no primary identifier provided\") {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": null,\n    \"description\": \"{{Permission type description}}\",\n    \"displayOrder\": {{Display order}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Permission types endpoint}}",
									"host": [
										"{{Permission types endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Name cannot be changed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 409 Conflict\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(409);\r",
											"    pm.expect(response.status).to.equal(\"Conflict\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(409);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: primary id change\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message.startsWith(\"altered from \")) {\r",
											"            pm.expect(failures[i].constraint).to.equal(\"primary identifier\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"xxxxxx\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created permission type}}",
									"host": [
										"{{Created permission type}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Description length cannot be <1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: app violation\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message.startsWith(\"size must be \")) {\r",
											"            pm.expect(failures[i].constraint).to.equal(\"description\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"description\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created permission type}}",
									"host": [
										"{{Created permission type}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Description length cannot be >40",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: app violation\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message.startsWith(\"size must be \")) {\r",
											"            pm.expect(failures[i].constraint).to.equal(\"description\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"description\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created permission type}}",
									"host": [
										"{{Created permission type}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Description cannot be null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: app violation\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message == \"must not be null\") {\r",
											"            pm.expect(failures[i].constraint).to.equal(\"description\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"description\": null\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created permission type}}",
									"host": [
										"{{Created permission type}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Permission",
					"item": [
						{
							"name": "Name length cannot be <1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: app violation\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message.startsWith(\"size must be \")) {\r",
											"            pm.expect(failures[i].constraint).to.equal(\"name\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"\",\n    \"description\": \"{{Permission description}}\",\n    \"displayOrder\": {{Display order}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Permissions endpoint}}",
									"host": [
										"{{Permissions endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Name length cannot be >64",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: app violation\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message.startsWith(\"size must be \")) {\r",
											"            pm.expect(failures[i].constraint).to.equal(\"name\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n    \"description\": \"{{Permission type description}}\",\n    \"displayOrder\": {{Display order}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Permissions endpoint}}",
									"host": [
										"{{Permissions endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Name cannot be null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: primary id required\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message == \"no primary identifier provided\") {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": null,\n    \"description\": \"{{Permission type description}}\",\n    \"displayOrder\": {{Display order}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Permissions endpoint}}",
									"host": [
										"{{Permissions endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Name cannot be changed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(409);\r",
											"    pm.expect(response.status).to.equal(\"Conflict\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(409);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: primary id change\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message.startsWith(\"altered from \")) {\r",
											"            pm.expect(failures[i].constraint).to.equal(\"primary identifier\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"xxxxxx\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created permission}}",
									"host": [
										"{{Created permission}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Description length cannot be <1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: app violation\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message.startsWith(\"size must be \")) {\r",
											"            pm.expect(failures[i].constraint).to.equal(\"description\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"description\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created permission}}",
									"host": [
										"{{Created permission}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Description length cannot be >80",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: app violation\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message.startsWith(\"size must be \")) {\r",
											"            pm.expect(failures[i].constraint).to.equal(\"description\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"description\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created permission}}",
									"host": [
										"{{Created permission}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Description cannot be null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: app violation\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message == \"must not be null\") {\r",
											"            pm.expect(failures[i].constraint).to.equal(\"description\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"description\": null\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created permission}}",
									"host": [
										"{{Created permission}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Timezone",
					"item": [
						{
							"name": "Name length cannot be >80",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: app violation\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message.startsWith(\"size must be \")) {\r",
											"            pm.expect(failures[i].constraint).to.equal(\"name\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created timezone}}",
									"host": [
										"{{Created timezone}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Name cannot be null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: app violation\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message == \"must not be null\") {\r",
											"            pm.expect(failures[i].constraint).to.equal(\"name\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": null\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created timezone}}",
									"host": [
										"{{Created timezone}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Status can be A, S or D",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: enum violation\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message.startsWith(\"not one of the values accepted: [\")) {\r",
											"            pm.expect(failures[i].constraint).to.equal(\"status\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"status\": \"x\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created timezone}}",
									"host": [
										"{{Created timezone}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Display can be Y or N",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: enum violation\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message.startsWith(\"not one of the values accepted: [\")) {\r",
											"            pm.expect(failures[i].constraint).to.equal(\"status\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"status\": \"x\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created timezone}}",
									"host": [
										"{{Created timezone}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Position",
					"item": [
						{
							"name": "Name length cannot be >64",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: app violation\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message.startsWith(\"size must be \")) {\r",
											"            pm.expect(failures[i].constraint).to.equal(\"name\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created position}}",
									"host": [
										"{{Created position}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Name cannot be null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: app violation\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message == \"must not be null\") {\r",
											"            pm.expect(failures[i].constraint).to.equal(\"name\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": null\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created position}}",
									"host": [
										"{{Created position}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Jurisdiction",
					"item": [
						{
							"name": "Name is unique",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 500 Internal Server Error\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(500);\r",
											"    pm.expect(response.status).to.equal(\"Internal Server Error\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(500);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: db violation\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message == \"duplicate value for a record with unique key\") {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Jurisdiction name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Jurisdictions endpoint}}",
									"host": [
										"{{Jurisdictions endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Name length cannot be >64",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: app violation\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message.startsWith(\"size must be \")) {\r",
											"            pm.expect(failures[i].constraint).to.equal(\"name\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created jurisdiction}}",
									"host": [
										"{{Created jurisdiction}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Name cannot be null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: app violation\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message == \"must not be null\") {\r",
											"            pm.expect(failures[i].constraint).to.equal(\"name\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": null\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created jurisdiction}}",
									"host": [
										"{{Created jurisdiction}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Flag Definition",
					"item": [
						{
							"name": "Name length cannot be >32",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: app violation\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message.startsWith(\"size must be \")) {\r",
											"            pm.expect(failures[i].constraint).to.equal(\"name\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n    \"description\": \"{{Flag definition description}}\",\n    \"note\": \"{{Flag definition note}}\",\n    \"defaultValue\": \"{{Flag definition default value}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Flag definitions endpoint}}",
									"host": [
										"{{Flag definitions endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Name cannot be null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: primary id required\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message == \"no primary identifier provided\") {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": null,\n    \"description\": \"{{Flag definition description}}\",\n    \"note\": \"{{Flag definition note}}\",\n    \"defaultValue\": \"{{Flag definition default value}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Flag definitions endpoint}}",
									"host": [
										"{{Flag definitions endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Name cannot be changed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 409 Conflict\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(409);\r",
											"    pm.expect(response.status).to.equal(\"Conflict\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(409);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: primary id change\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message.startsWith(\"altered from \")) {\r",
											"            pm.expect(failures[i].constraint).to.equal(\"primary identifier\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"xxxxxx\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created flag definition}}",
									"host": [
										"{{Created flag definition}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Description length cannot be >255",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: app violation\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message.startsWith(\"size must be \")) {\r",
											"            pm.expect(failures[i].constraint).to.equal(\"description\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"description\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created flag definition}}",
									"host": [
										"{{Created flag definition}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Note length cannot be >255",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: app violation\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message.startsWith(\"size must be \")) {\r",
											"            pm.expect(failures[i].constraint).to.equal(\"note\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"note\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created flag definition}}",
									"host": [
										"{{Created flag definition}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Default value length cannot be >255",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: app violation\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message.startsWith(\"size must be \")) {\r",
											"            pm.expect(failures[i].constraint).to.equal(\"defaultValue\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"defaultValue\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created flag definition}}",
									"host": [
										"{{Created flag definition}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Flag",
					"item": [
						{
							"name": "User id cannot be null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 500 Internal Server Error\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(500);\r",
											"    pm.expect(response.status).to.equal(\"Internal Server Error\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(500);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: db integrity\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message == \"Primary key has a field with a null key value.\") {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"id\": {\n        \"userId\": null,\n        \"flagName\": \"{{Created flag definition's name}}\"\n    },\n    \"value\": \"{{Flag value}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Flags endpoint}}",
									"host": [
										"{{Flags endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "User id must match existing user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 500 Internal Server Error\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(500);\r",
											"    pm.expect(response.status).to.equal(\"Internal Server Error\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(500);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: db violation\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message == \"no record found\") {\r",
											"            pm.expect(failures[i]).to.have.property(\"constraint\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"id\": {\n        \"userId\": \"{{Incorrect id}}\",\n        \"flagName\": \"{{Create flag definition's name}}\"\n    },\n    \"value\": \"{{Flag value}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Flags endpoint}}",
									"host": [
										"{{Flags endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "User id cannot be changed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 500 Internal Server Error\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(500);\r",
											"    pm.expect(response.status).to.equal(\"Internal Server Error\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(500);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: db unknown\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message == \"composite key does not match an existing record\") {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"id\": {\n        \"userId\": \"99999\",\n        \"flagName\": \"{{Created flag definition's name}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created flag}}",
									"host": [
										"{{Created flag}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Name cannot be changed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 500 Internal Server Error\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(500);\r",
											"    pm.expect(response.status).to.equal(\"Internal Server Error\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(500);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: db unknown\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message == \"composite key does not match an existing record\") {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"id\": {\n        \"userId\": {{Created user's id}},\n        \"flagName\": \"xxxxxxxxxxxx\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created flag}}",
									"host": [
										"{{Created flag}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Name cannot be null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 500 Internal Server Error\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(500);\r",
											"    pm.expect(response.status).to.equal(\"Internal Server Error\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(500);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: db integrity\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message == \"Primary key has a field with a null key value.\") {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"id\": {\n        \"userId\": \"{{Created user's id}}\",\n        \"flagName\": null\n    },\n    \"value\": \"{{Flag value}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Flags endpoint}}",
									"host": [
										"{{Flags endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Name must match existing flag definition",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 500 Internal Server Error\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(500);\r",
											"    pm.expect(response.status).to.equal(\"Internal Server Error\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(500);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: db violation\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message == \"no record found\") {\r",
											"            pm.expect(failures[i]).to.have.property(\"constraint\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"id\": {\n        \"userId\": \"{{Created user's id}}\",\n        \"flagName\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n    },\n    \"value\": \"{{Flag value}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Flags endpoint}}",
									"host": [
										"{{Flags endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Value length cannot be >64",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: app violation\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message.startsWith(\"size must be \")) {\r",
											"            pm.expect(failures[i].constraint).to.equal(\"value\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"id\": {\n        \"flagName\": \"{{Created flag definition's name}}\",\n        \"userId\": \"{{Created user's id}}\"\n    },\n    \"value\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created flag}}",
									"host": [
										"{{Created flag}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Teardown",
					"item": [
						{
							"name": "Delete flag",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Created flag}}",
									"host": [
										"{{Created flag}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete flag definition",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Created flag definition}}",
									"host": [
										"{{Created flag definition}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete jurisdiction",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Created jurisdiction}}",
									"host": [
										"{{Created jurisdiction}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Created position}}",
									"host": [
										"{{Created position}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete timezone",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Created timezone}}",
									"host": [
										"{{Created timezone}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete permission",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Created permission}}",
									"host": [
										"{{Created permission}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete permission type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Created permission type}}",
									"host": [
										"{{Created permission type}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Created group}}",
									"host": [
										"{{Created group}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Created user}}",
									"host": [
										"{{Created user}}"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Associations",
			"item": [
				{
					"name": "Setup",
					"item": [
						{
							"name": "Create a user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 201 Created status\", () => {\r",
											"    const response = pm.response;\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(response.code).to.equal(201);\r",
											"    pm.expect(response.status).to.equal(\"Created\");\r",
											"\r",
											"    pm.collectionVariables.set(\"Created user\", jsonData._links.user.href);\r",
											"    pm.collectionVariables.set(\"Created user's timezone\", jsonData._links.timezone.href);\r",
											"    pm.collectionVariables.set(\"Created user's permissions\", jsonData._links.permissions.href);\r",
											"    pm.collectionVariables.set(\"Created user's position\", jsonData._links.position.href);\r",
											"    pm.collectionVariables.set(\"Created user's owned groups\", jsonData._links.ownedGroups.href);\r",
											"    pm.collectionVariables.set(\"Created user's groups\", jsonData._links.groups.href);\r",
											"    pm.collectionVariables.set(\"Created user's id\", jsonData.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"username\": \"{{Username}}\",\n    \"password\": \"{{Password}}\",\n    \"firstName\": \"{{First name}}\",\n    \"lastName\": \"{{Last name}}\",\n    \"email\": \"{{Email}}\",\n    \"status\": \"{{User status}}\",\n    \"passwordExpires\": \"{{Password expires}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Users endpoint}}",
									"host": [
										"{{Users endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a second user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 201 Created status\", () => {\r",
											"    const response = pm.response;\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(response.code).to.equal(201);\r",
											"    pm.expect(response.status).to.equal(\"Created\");\r",
											"\r",
											"    pm.collectionVariables.set(\"Second created user\", jsonData._links.user.href);\r",
											"    pm.collectionVariables.set(\"Second created user's timezone\", jsonData._links.timezone.href);\r",
											"    pm.collectionVariables.set(\"Second created user's permissions\", jsonData._links.permissions.href);\r",
											"    pm.collectionVariables.set(\"Second created user's position\", jsonData._links.position.href);\r",
											"    pm.collectionVariables.set(\"Second created user's owned groups\", jsonData._links.ownedGroups.href);\r",
											"    pm.collectionVariables.set(\"Second created user's groups\", jsonData._links.groups.href);\r",
											"    pm.collectionVariables.set(\"Second created user's id\", jsonData.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"username\": \"{{Modified username}}\",\n    \"password\": \"{{Password}}\",\n    \"firstName\": \"{{First name}}\",\n    \"lastName\": \"{{Last name}}\",\n    \"email\": \"{{Email}}\",\n    \"status\": \"{{User status}}\",\n    \"passwordExpires\": \"{{Password expires}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Users endpoint}}",
									"host": [
										"{{Users endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 201 Created status\", () => {\r",
											"    const response = pm.response;\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(response.code).to.equal(201);\r",
											"    pm.expect(response.status).to.equal(\"Created\");\r",
											"\r",
											"    pm.collectionVariables.set(\"Created group\", jsonData._links.group.href);\r",
											"    pm.collectionVariables.set(\"Created group's owner\", jsonData._links.owner.href);\r",
											"    pm.collectionVariables.set(\"Created group's users\", jsonData._links.users.href);\r",
											"    pm.collectionVariables.set(\"Created group's permissions\", jsonData._links.permissions.href);\r",
											"    pm.collectionVariables.set(\"Created group's positions\", jsonData._links.positions.href);\r",
											"    pm.collectionVariables.set(\"Created group's jurisdictions\", jsonData._links.jurisdictions.href);\r",
											"    pm.collectionVariables.set(\"Created group's id\", jsonData.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Group name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Groups endpoint}}",
									"host": [
										"{{Groups endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a second group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 201 Created status\", () => {\r",
											"    const response = pm.response;\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(response.code).to.equal(201);\r",
											"    pm.expect(response.status).to.equal(\"Created\");\r",
											"\r",
											"    pm.collectionVariables.set(\"Second created group\", jsonData._links.group.href);\r",
											"    pm.collectionVariables.set(\"Second created group's owner\", jsonData._links.owner.href);\r",
											"    pm.collectionVariables.set(\"Second created group's users\", jsonData._links.users.href);\r",
											"    pm.collectionVariables.set(\"Second created group's permissions\", jsonData._links.permissions.href);\r",
											"    pm.collectionVariables.set(\"Second created group's positions\", jsonData._links.positions.href);\r",
											"    pm.collectionVariables.set(\"Second created group's jurisdictions\", jsonData._links.jurisdictions.href);\r",
											"    pm.collectionVariables.set(\"Second created group's id\", jsonData.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Modified group name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Groups endpoint}}",
									"host": [
										"{{Groups endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a permission type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 201 Created status\", () => {\r",
											"    const response = pm.response;\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(response.code).to.equal(201);\r",
											"    pm.expect(response.status).to.equal(\"Created\");\r",
											"\r",
											"    pm.collectionVariables.set(\"Created permission type\", jsonData._links.permissionType.href);\r",
											"    pm.collectionVariables.set(\"Created permission type's permissions\", jsonData._links.permissions.href);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Permission type name}}\",\n    \"description\": \"{{Permission type description}}\",\n    \"displayOrder\": {{Display order}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Permission types endpoint}}",
									"host": [
										"{{Permission types endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a permission",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 201 Created status\", () => {\r",
											"    const response = pm.response;\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(response.code).to.equal(201);\r",
											"    pm.expect(response.status).to.equal(\"Created\");\r",
											"\r",
											"    pm.collectionVariables.set(\"Created permission\", jsonData._links.permission.href);\r",
											"    pm.collectionVariables.set(\"Created permission's type\", jsonData._links.type.href);\r",
											"    pm.collectionVariables.set(\"Created permission's users\", jsonData._links.users.href);\r",
											"    pm.collectionVariables.set(\"Created permission's groups\", jsonData._links.groups.href);\r",
											"    pm.collectionVariables.set(\"Created permission's id\", jsonData.name);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Permission name}}\",\n    \"description\": \"{{Permission description}}\",\n    \"displayOrder\": {{Display order}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Permissions endpoint}}",
									"host": [
										"{{Permissions endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a second permission",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 201 Created status\", () => {\r",
											"    const response = pm.response;\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(response.code).to.equal(201);\r",
											"    pm.expect(response.status).to.equal(\"Created\");\r",
											"\r",
											"    pm.collectionVariables.set(\"Second created permission\", jsonData._links.permission.href);\r",
											"    pm.collectionVariables.set(\"Second created permission's type\", jsonData._links.type.href);\r",
											"    pm.collectionVariables.set(\"Second created permission's users\", jsonData._links.users.href);\r",
											"    pm.collectionVariables.set(\"Second created permission's groups\", jsonData._links.groups.href);\r",
											"    pm.collectionVariables.set(\"Second created permission's id\", jsonData.name);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Incorrect id}}\",\n    \"description\": \"{{Permission description}}\",\n    \"displayOrder\": {{Display order}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Permissions endpoint}}",
									"host": [
										"{{Permissions endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a timezone",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 201 Created status\", () => {\r",
											"    const response = pm.response;\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(response.code).to.equal(201);\r",
											"    pm.expect(response.status).to.equal(\"Created\");\r",
											"\r",
											"    pm.collectionVariables.set(\"Created timezone\", jsonData._links.timezone.href);\r",
											"    pm.collectionVariables.set(\"Created timezone's users\", jsonData._links.users.href);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Timezone name}}\",\n    \"status\": \"{{Timezone status}}\",\n    \"display\": \"{{Display}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Timezones endpoint}}",
									"host": [
										"{{Timezones endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 201 Created status\", () => {\r",
											"    const response = pm.response;\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.collectionVariables.set(\"Created position\", jsonData._links.position.href);\r",
											"    pm.collectionVariables.set(\"Created position's child positions\", jsonData._links.childPositions.href);\r",
											"    pm.collectionVariables.set(\"Created position's parent position\", jsonData._links.parentPosition.href);\r",
											"    pm.collectionVariables.set(\"Created position's users\", jsonData._links.users.href);\r",
											"    pm.collectionVariables.set(\"Created position's groups\", jsonData._links.groups.href);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Position name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Positions endpoint}}",
									"host": [
										"{{Positions endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a second position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 201 Created status\", () => {\r",
											"    const response = pm.response;\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.collectionVariables.set(\"Second created position\", jsonData._links.position.href);\r",
											"    pm.collectionVariables.set(\"Second created position's child positions\", jsonData._links.childPositions.href);\r",
											"    pm.collectionVariables.set(\"Second created position's parent position\", jsonData._links.parentPosition.href);\r",
											"    pm.collectionVariables.set(\"Second created position's users\", jsonData._links.users.href);\r",
											"    pm.collectionVariables.set(\"Second created position's groups\", jsonData._links.groups.href);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Modified position name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Positions endpoint}}",
									"host": [
										"{{Positions endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a third position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 201 Created status\", () => {\r",
											"    const response = pm.response;\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.collectionVariables.set(\"Third created position\", jsonData._links.position.href);\r",
											"    pm.collectionVariables.set(\"Third created position's child positions\", jsonData._links.childPositions.href);\r",
											"    pm.collectionVariables.set(\"Third created position's parent position\", jsonData._links.parentPosition.href);\r",
											"    pm.collectionVariables.set(\"Third created position's users\", jsonData._links.users.href);\r",
											"    pm.collectionVariables.set(\"Third created position's groups\", jsonData._links.groups.href);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Alternate position name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Positions endpoint}}",
									"host": [
										"{{Positions endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a jurisdiction",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 201 Created status\", () => {\r",
											"    const response = pm.response;\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(response.code).to.equal(201);\r",
											"    pm.expect(response.status).to.equal(\"Created\");\r",
											"\r",
											"    pm.collectionVariables.set(\"Created jurisdiction\", jsonData._links.jurisdiction.href);\r",
											"    pm.collectionVariables.set(\"Created jurisdiction's groups\", jsonData._links.groups.href);\r",
											"    pm.collectionVariables.set(\"Created jurisdiction's id\", jsonData.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Jurisdiction name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Jurisdictions endpoint}}",
									"host": [
										"{{Jurisdictions endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a second jurisdiction",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 201 Created status\", () => {\r",
											"    const response = pm.response;\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(response.code).to.equal(201);\r",
											"    pm.expect(response.status).to.equal(\"Created\");\r",
											"\r",
											"    pm.collectionVariables.set(\"Second created jurisdiction\", jsonData._links.jurisdiction.href);\r",
											"    pm.collectionVariables.set(\"Second created jurisdiction's groups\", jsonData._links.groups.href);\r",
											"    pm.collectionVariables.set(\"Second created jurisdiction's id\", jsonData.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Modified jurisdiction name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Jurisdictions endpoint}}",
									"host": [
										"{{Jurisdictions endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a flag definition",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 201 Created status\", () => {\r",
											"    const response = pm.response;\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(response.code).to.equal(201);\r",
											"    pm.expect(response.status).to.equal(\"Created\");\r",
											"\r",
											"    pm.collectionVariables.set(\"Created flag definition\", jsonData._links.flagDefinition.href);\r",
											"    pm.collectionVariables.set(\"Created flag definition's flags\", jsonData._links.flags.href);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Flag definition name}}\",\n    \"description\": \"{{Flag definition description}}\",\n    \"note\": \"{{Flag definition note}}\",\n    \"defaultValue\": \"{{Flag definition default value}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Flag definitions endpoint}}",
									"host": [
										"{{Flag definitions endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a second flag definition",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 201 Created status\", () => {\r",
											"    const response = pm.response;\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(response.code).to.equal(201);\r",
											"    pm.expect(response.status).to.equal(\"Created\");\r",
											"\r",
											"    pm.collectionVariables.set(\"Second created flag definition\", jsonData._links.flagDefinition.href);\r",
											"    pm.collectionVariables.set(\"Second created flag definition's flags\", jsonData._links.flags.href);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Incorrect id}}\",\n    \"description\": \"{{Flag definition description}}\",\n    \"note\": \"{{Flag definition note}}\",\n    \"defaultValue\": \"{{Flag definition default value}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Flag definitions endpoint}}",
									"host": [
										"{{Flag definitions endpoint}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Many users can have one timezone",
					"item": [
						{
							"name": "Assign timezone to first user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"timezone\": \"{{Created timezone}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created user}}",
									"host": [
										"{{Created user}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign timezone to second user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"timezone\": \"{{Created timezone}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Second created user}}",
									"host": [
										"{{Second created user}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve first user's timezone",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Is created timezone\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData._links.timezone.href).to.equal(pm.collectionVariables.get(\"Created timezone\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created user's timezone}}",
									"host": [
										"{{Created user's timezone}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve second user's timezone",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Is created timezone\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData._links.timezone.href).to.equal(pm.collectionVariables.get(\"Created timezone\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Second created user's timezone}}",
									"host": [
										"{{Second created user's timezone}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign timezone from first user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Created user's timezone}}",
									"host": [
										"{{Created user's timezone}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign timezone from second user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Second created user's timezone}}",
									"host": [
										"{{Second created user's timezone}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve first user's timezone",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created user's timezone}}",
									"host": [
										"{{Created user's timezone}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve second user's timezone",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Second created user's timezone}}",
									"host": [
										"{{Second created user's timezone}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Many users can have one position",
					"item": [
						{
							"name": "Assign position to first user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"position\": \"{{Created position}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created user}}",
									"host": [
										"{{Created user}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign position to second user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"position\": \"{{Created position}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Second created user}}",
									"host": [
										"{{Second created user}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve first user's position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Is created position\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData._links.position.href).to.equal(pm.collectionVariables.get(\"Created position\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created user's position}}",
									"host": [
										"{{Created user's position}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve second user's position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Is created position\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData._links.position.href).to.equal(pm.collectionVariables.get(\"Created position\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Second created user's position}}",
									"host": [
										"{{Second created user's position}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign position from first user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Created user's position}}",
									"host": [
										"{{Created user's position}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign position from second user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Second created user's position}}",
									"host": [
										"{{Second created user's position}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve first user's position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created user's position}}",
									"host": [
										"{{Created user's position}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve second user's position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Second created user's position}}",
									"host": [
										"{{Second created user's position}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "One user can own many groups",
					"item": [
						{
							"name": "Assign user as the owner of first group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"owner\": \"{{Created user}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created group}}",
									"host": [
										"{{Created group}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign user as the owner of second group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"owner\": \"{{Created user}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Second created group}}",
									"host": [
										"{{Second created group}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve user's owned groups",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Contains created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Contains second created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Second created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created user's owned groups}}",
									"host": [
										"{{Created user's owned groups}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign user as the owner of first group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Created group's owner}}",
									"host": [
										"{{Created group's owner}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign user as the owner of second group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Second created group's owner}}",
									"host": [
										"{{Second created group's owner}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve user's owned groups",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain second created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Second created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created user's owned groups}}",
									"host": [
										"{{Created user's owned groups}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Many users can have many permissions",
					"item": [
						{
							"name": "Assign both permissions to first user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{Created permission}}\r\n{{Second created permission}}",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{Created user's permissions}}",
									"host": [
										"{{Created user's permissions}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign both permissions to second user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{Created permission}}\r\n{{Second created permission}}",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{Second created user's permissions}}",
									"host": [
										"{{Second created user's permissions}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve first user's permissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Contains created permission\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const permissions = jsonData._embedded.permissions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < permissions.length; i++) {\r",
											"        if (permissions[i]._links.permission.href == pm.collectionVariables.get(\"Created permission\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Contains second created permission\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const permissions = jsonData._embedded.permissions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < permissions.length; i++) {\r",
											"        if (permissions[i]._links.permission.href == pm.collectionVariables.get(\"Second created permission\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created user's permissions}}",
									"host": [
										"{{Created user's permissions}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve second user's permissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Contains created permission\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const permissions = jsonData._embedded.permissions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < permissions.length; i++) {\r",
											"        if (permissions[i]._links.permission.href == pm.collectionVariables.get(\"Created permission\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Contains second created permission\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const permissions = jsonData._embedded.permissions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < permissions.length; i++) {\r",
											"        if (permissions[i]._links.permission.href == pm.collectionVariables.get(\"Second created permission\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Second created user's permissions}}",
									"host": [
										"{{Second created user's permissions}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign first permissions to first group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{Created permission}}",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{Created user's permissions}}",
									"host": [
										"{{Created user's permissions}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve first user's permissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Contains created permission\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const permissions = jsonData._embedded.permissions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < permissions.length; i++) {\r",
											"        if (permissions[i]._links.permission.href == pm.collectionVariables.get(\"Created permission\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contains second created permission\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const permissions = jsonData._embedded.permissions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < permissions.length; i++) {\r",
											"        if (permissions[i]._links.permission.href == pm.collectionVariables.get(\"Second created permission\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created user's permissions}}",
									"host": [
										"{{Created user's permissions}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign first permission from first user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Created user's permissions}}/{{Permission name}}",
									"host": [
										"{{Created user's permissions}}"
									],
									"path": [
										"{{Permission name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign first permission from second user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Second created user's permissions}}/{{Permission name}}",
									"host": [
										"{{Second created user's permissions}}"
									],
									"path": [
										"{{Permission name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign second permission from second user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Second created user's permissions}}/{{Incorrect id}}",
									"host": [
										"{{Second created user's permissions}}"
									],
									"path": [
										"{{Incorrect id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve first user's permissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain created permission\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const permissions = jsonData._embedded.permissions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < permissions.length; i++) {\r",
											"        if (permissions[i]._links.permission.href == pm.collectionVariables.get(\"Created permission\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain second created permission\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const permissions = jsonData._embedded.permissions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < permissions.length; i++) {\r",
											"        if (permissions[i]._links.permission.href == pm.collectionVariables.get(\"Second created permission\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created user's permissions}}",
									"host": [
										"{{Created user's permissions}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve second user's permissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain created permission\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const permissions = jsonData._embedded.permissions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < permissions.length; i++) {\r",
											"        if (permissions[i]._links.permission.href == pm.collectionVariables.get(\"Created permission\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain second created permission\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const permissions = jsonData._embedded.permissions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < permissions.length; i++) {\r",
											"        if (permissions[i]._links.permission.href == pm.collectionVariables.get(\"Second created permission\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Second created user's permissions}}",
									"host": [
										"{{Second created user's permissions}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Many users can belong to many groups",
					"item": [
						{
							"name": "Assign both groups to first user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{Created group}}\r\n{{Second created group}}",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{Created user's groups}}",
									"host": [
										"{{Created user's groups}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign both groups to second user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{Created group}}\r\n{{Second created group}}",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{Second created user's groups}}",
									"host": [
										"{{Second created user's groups}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve first user's groups",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Contains created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Contains second created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Second created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created user's groups}}",
									"host": [
										"{{Created user's groups}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve second user's groups",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Contains created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Contains second created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Second created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Second created user's groups}}",
									"host": [
										"{{Second created user's groups}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign first group to first user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{Created group}}",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{Created user's groups}}",
									"host": [
										"{{Created user's groups}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve first user's groups",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Contains created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain second created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Second created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created user's groups}}",
									"host": [
										"{{Created user's groups}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign first group from first user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Created user's groups}}/{{Created group's id}}",
									"host": [
										"{{Created user's groups}}"
									],
									"path": [
										"{{Created group's id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign first group from second user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Second created user's groups}}/{{Created group's id}}",
									"host": [
										"{{Second created user's groups}}"
									],
									"path": [
										"{{Created group's id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign second group from second user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Second created user's groups}}/{{Second created group's id}}",
									"host": [
										"{{Second created user's groups}}"
									],
									"path": [
										"{{Second created group's id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve first user's groups",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain second created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Second created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created user's groups}}",
									"host": [
										"{{Created user's groups}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve second user's groups",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain second created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Second created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Second created user's groups}}",
									"host": [
										"{{Second created user's groups}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Many groups can be owned by one user",
					"item": [
						{
							"name": "Assign user as the owner of first group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"owner\": \"{{Created user}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created group}}",
									"host": [
										"{{Created group}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign user as the owner of second group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"owner\": \"{{Created user}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Second created group}}",
									"host": [
										"{{Second created group}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve first group's owning user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Is created user\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData._links.user.href).to.equal(pm.collectionVariables.get(\"Created user\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created group's owner}}",
									"host": [
										"{{Created group's owner}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve second group's owning user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Is created user\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData._links.user.href).to.equal(pm.collectionVariables.get(\"Created user\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Second created group's owner}}",
									"host": [
										"{{Second created group's owner}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign user as the owner of first group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Created group's owner}}",
									"host": [
										"{{Created group's owner}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign user as the owner of second group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Second created group's owner}}",
									"host": [
										"{{Second created group's owner}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve first group's owning user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created group's owner}}",
									"host": [
										"{{Created group's owner}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve second group's owning user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Second created group's owner}}",
									"host": [
										"{{Second created group's owner}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Many groups can consist of many positions",
					"item": [
						{
							"name": "Assign both groups to first position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{Created group}}\r\n{{Second created group}}",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{Created position's groups}}",
									"host": [
										"{{Created position's groups}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign both groups to second position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{Created group}}\r\n{{Second created group}}",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{Second created position's groups}}",
									"host": [
										"{{Second created position's groups}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve first group's positions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Contains created position\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const positions = jsonData._embedded.positions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < positions.length; i++) {\r",
											"        if (positions[i]._links.position.href == pm.collectionVariables.get(\"Created position\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Contains second created position\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const positions = jsonData._embedded.positions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < positions.length; i++) {\r",
											"        if (positions[i]._links.position.href == pm.collectionVariables.get(\"Second created position\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created group's positions}}",
									"host": [
										"{{Created group's positions}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve second group's positions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Contains created position\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const positions = jsonData._embedded.positions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < positions.length; i++) {\r",
											"        if (positions[i]._links.position.href == pm.collectionVariables.get(\"Created position\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Contains second created position\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const positions = jsonData._embedded.positions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < positions.length; i++) {\r",
											"        if (positions[i]._links.position.href == pm.collectionVariables.get(\"Second created position\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Second created group's positions}}",
									"host": [
										"{{Second created group's positions}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign first group from first position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Created position's groups}}/{{Created group's id}}",
									"host": [
										"{{Created position's groups}}"
									],
									"path": [
										"{{Created group's id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign first group from second position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Second created position's groups}}/{{Created group's id}}",
									"host": [
										"{{Second created position's groups}}"
									],
									"path": [
										"{{Created group's id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign second group from first position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Created position's groups}}/{{Second created group's id}}",
									"host": [
										"{{Created position's groups}}"
									],
									"path": [
										"{{Second created group's id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign second group from second position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Second created position's groups}}/{{Second created group's id}}",
									"host": [
										"{{Second created position's groups}}"
									],
									"path": [
										"{{Second created group's id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve first position's groups",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain second created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Second created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created position's groups}}",
									"host": [
										"{{Created position's groups}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve second position's groups",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain second created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Second created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Second created position's groups}}",
									"host": [
										"{{Second created position's groups}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Many groups can consist of many users",
					"item": [
						{
							"name": "Assign both groups to first user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{Created group}}\r\n{{Second created group}}",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{Created user's groups}}",
									"host": [
										"{{Created user's groups}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign both groups to second user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{Created group}}\r\n{{Second created group}}",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{Second created user's groups}}",
									"host": [
										"{{Second created user's groups}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve first user's groups",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Contains created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Contains second created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Second created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created user's groups}}",
									"host": [
										"{{Created user's groups}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve second user's groups",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Contains created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Contains second created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Second created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Second created user's groups}}",
									"host": [
										"{{Second created user's groups}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign first group to first user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{Created group}}",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{Created user's groups}}",
									"host": [
										"{{Created user's groups}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve first user's groups",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Contains created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain second created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Second created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created user's groups}}",
									"host": [
										"{{Created user's groups}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign first group from first user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Created user's groups}}/{{Created group's id}}",
									"host": [
										"{{Created user's groups}}"
									],
									"path": [
										"{{Created group's id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign first group from second user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Second created user's groups}}/{{Created group's id}}",
									"host": [
										"{{Second created user's groups}}"
									],
									"path": [
										"{{Created group's id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign second user from second group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Second created user's groups}}/{{Second created group's id}}",
									"host": [
										"{{Second created user's groups}}"
									],
									"path": [
										"{{Second created group's id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve first group's users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain second created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Second created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created user's groups}}",
									"host": [
										"{{Created user's groups}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve second group's users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain second created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Second created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Second created user's groups}}",
									"host": [
										"{{Second created user's groups}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Many groups can have many permissions",
					"item": [
						{
							"name": "Assign both permissions to first group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{Created permission}}\r\n{{Second created permission}}",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{Created group's permissions}}",
									"host": [
										"{{Created group's permissions}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign both permissions to second group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{Created permission}}\r\n{{Second created permission}}",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{Second created group's permissions}}",
									"host": [
										"{{Second created group's permissions}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve first group's permissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Contains created permission\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const permissions = jsonData._embedded.permissions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < permissions.length; i++) {\r",
											"        if (permissions[i]._links.permission.href == pm.collectionVariables.get(\"Created permission\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Contains second created permission\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const permissions = jsonData._embedded.permissions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < permissions.length; i++) {\r",
											"        if (permissions[i]._links.permission.href == pm.collectionVariables.get(\"Second created permission\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created group's permissions}}",
									"host": [
										"{{Created group's permissions}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve second group's permissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Contains created permission\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const permissions = jsonData._embedded.permissions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < permissions.length; i++) {\r",
											"        if (permissions[i]._links.permission.href == pm.collectionVariables.get(\"Created permission\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Contains second created permission\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const permissions = jsonData._embedded.permissions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < permissions.length; i++) {\r",
											"        if (permissions[i]._links.permission.href == pm.collectionVariables.get(\"Second created permission\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Second created group's permissions}}",
									"host": [
										"{{Second created group's permissions}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign first permission to first group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{Created permission}}",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{Created group's permissions}}",
									"host": [
										"{{Created group's permissions}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve first group's permissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Contains created permission\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const permissions = jsonData._embedded.permissions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < permissions.length; i++) {\r",
											"        if (permissions[i]._links.permission.href == pm.collectionVariables.get(\"Created permission\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain second created permission\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const permissions = jsonData._embedded.permissions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < permissions.length; i++) {\r",
											"        if (permissions[i]._links.permission.href == pm.collectionVariables.get(\"Second created permission\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created group's permissions}}",
									"host": [
										"{{Created group's permissions}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign first permission from first group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Created group's permissions}}/{{Created permission's id}}",
									"host": [
										"{{Created group's permissions}}"
									],
									"path": [
										"{{Created permission's id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign first permission from second group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Second created group's permissions}}/{{Created permission's id}}",
									"host": [
										"{{Second created group's permissions}}"
									],
									"path": [
										"{{Created permission's id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign second permission from second group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Second created group's permissions}}/{{Second created permission's id}}",
									"host": [
										"{{Second created group's permissions}}"
									],
									"path": [
										"{{Second created permission's id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve first group's permissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain created permission\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const permissions = jsonData._embedded.permissions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < permissions.length; i++) {\r",
											"        if (permissions[i]._links.permission.href == pm.collectionVariables.get(\"Created permission\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain second created permission\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const permissions = jsonData._embedded.permissions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < permissions.length; i++) {\r",
											"        if (permissions[i]._links.permission.href == pm.collectionVariables.get(\"Second created permission\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created group's permissions}}",
									"host": [
										"{{Created group's permissions}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve second group's permissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain created permission\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const permissions = jsonData._embedded.permissions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < permissions.length; i++) {\r",
											"        if (permissions[i]._links.permission.href == pm.collectionVariables.get(\"Created permission\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain second created permission\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const permissions = jsonData._embedded.permissions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < permissions.length; i++) {\r",
											"        if (permissions[i]._links.permission.href == pm.collectionVariables.get(\"Second created permission\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Second created group's permissions}}",
									"host": [
										"{{Second created group's permissions}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Many groups can have many jurisdictions",
					"item": [
						{
							"name": "Assign both jurisdictions to first group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{Created jurisdiction}}\r\n{{Second created jurisdiction}}",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{Created group's jurisdictions}}",
									"host": [
										"{{Created group's jurisdictions}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign both jurisdictions to second group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{Created jurisdiction}}\r\n{{Second created jurisdiction}}",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{Second created group's jurisdictions}}",
									"host": [
										"{{Second created group's jurisdictions}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve first group's jurisdictions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Contains created jurisdiction\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const jurisdictions = jsonData._embedded.jurisdictions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < jurisdictions.length; i++) {\r",
											"        if (jurisdictions[i]._links.jurisdiction.href == pm.collectionVariables.get(\"Created jurisdiction\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Contains second created jurisdiction\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const jurisdictions = jsonData._embedded.jurisdictions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < jurisdictions.length; i++) {\r",
											"        if (jurisdictions[i]._links.jurisdiction.href == pm.collectionVariables.get(\"Second created jurisdiction\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created group's jurisdictions}}",
									"host": [
										"{{Created group's jurisdictions}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve second group's jurisdictions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Contains created jurisdiction\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const jurisdictions = jsonData._embedded.jurisdictions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < jurisdictions.length; i++) {\r",
											"        if (jurisdictions[i]._links.jurisdiction.href == pm.collectionVariables.get(\"Created jurisdiction\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Contains second created jurisdiction\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const jurisdictions = jsonData._embedded.jurisdictions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < jurisdictions.length; i++) {\r",
											"        if (jurisdictions[i]._links.jurisdiction.href == pm.collectionVariables.get(\"Second created jurisdiction\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Second created group's jurisdictions}}",
									"host": [
										"{{Second created group's jurisdictions}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign first jurisdiction to first group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{Created jurisdiction}}",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{Created group's jurisdictions}}",
									"host": [
										"{{Created group's jurisdictions}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve first group's jurisdictions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Contains created jurisdiction\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const jurisdictions = jsonData._embedded.jurisdictions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < jurisdictions.length; i++) {\r",
											"        if (jurisdictions[i]._links.jurisdiction.href == pm.collectionVariables.get(\"Created jurisdiction\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain second created jurisdiction\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const jurisdictions = jsonData._embedded.jurisdictions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < jurisdictions.length; i++) {\r",
											"        if (jurisdictions[i]._links.jurisdiction.href == pm.collectionVariables.get(\"Second created jurisdiction\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created group's jurisdictions}}",
									"host": [
										"{{Created group's jurisdictions}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign first jurisdiction from first group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Created group's jurisdictions}}/{{Created jurisdiction's id}}",
									"host": [
										"{{Created group's jurisdictions}}"
									],
									"path": [
										"{{Created jurisdiction's id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign first jurisdiction from second group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Second created group's jurisdictions}}/{{Created jurisdiction's id}}",
									"host": [
										"{{Second created group's jurisdictions}}"
									],
									"path": [
										"{{Created jurisdiction's id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign second jurisdiction from second group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Second created group's jurisdictions}}/{{Second created jurisdiction's id}}",
									"host": [
										"{{Second created group's jurisdictions}}"
									],
									"path": [
										"{{Second created jurisdiction's id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve first group's jurisdictions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain created jurisdiction\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const jurisdictions = jsonData._embedded.jurisdictions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < jurisdictions.length; i++) {\r",
											"        if (jurisdictions[i]._links.jurisdiction.href == pm.collectionVariables.get(\"Created jurisdiction\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain second created jurisdiction\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const jurisdictions = jsonData._embedded.jurisdictions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < jurisdictions.length; i++) {\r",
											"        if (jurisdictions[i]._links.jurisdiction.href == pm.collectionVariables.get(\"Second created jurisdiction\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created group's jurisdictions}}",
									"host": [
										"{{Created group's jurisdictions}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve second group's jurisdictions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain created jurisdiction\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const jurisdictions = jsonData._embedded.jurisdictions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < jurisdictions.length; i++) {\r",
											"        if (jurisdictions[i]._links.jurisdiction.href == pm.collectionVariables.get(\"Created jurisdiction\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain second created jurisdiction\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const jurisdictions = jsonData._embedded.jurisdictions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < jurisdictions.length; i++) {\r",
											"        if (jurisdictions[i]._links.jurisdiction.href == pm.collectionVariables.get(\"Second created jurisdiction\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Second created group's jurisdictions}}",
									"host": [
										"{{Second created group's jurisdictions}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Many permissions can be assigned to many users",
					"item": [
						{
							"name": "Assign both permissions to first user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{Created permission}}\r\n{{Second created permission}}",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{Created user's permissions}}",
									"host": [
										"{{Created user's permissions}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign both permissions to second user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{Created permission}}\r\n{{Second created permission}}",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{Second created user's permissions}}",
									"host": [
										"{{Second created user's permissions}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve first user's permissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Contains created permission\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const permissions = jsonData._embedded.permissions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < permissions.length; i++) {\r",
											"        if (permissions[i]._links.permission.href == pm.collectionVariables.get(\"Created permission\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Contains second created permission\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const permissions = jsonData._embedded.permissions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < permissions.length; i++) {\r",
											"        if (permissions[i]._links.permission.href == pm.collectionVariables.get(\"Second created permission\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created user's permissions}}",
									"host": [
										"{{Created user's permissions}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve second user's permissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Contains created permission\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const permissions = jsonData._embedded.permissions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < permissions.length; i++) {\r",
											"        if (permissions[i]._links.permission.href == pm.collectionVariables.get(\"Created permission\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Contains second created permission\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const permissions = jsonData._embedded.permissions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < permissions.length; i++) {\r",
											"        if (permissions[i]._links.permission.href == pm.collectionVariables.get(\"Second created permission\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Second created user's permissions}}",
									"host": [
										"{{Second created user's permissions}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign first permission to first user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{Created permission}}",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{Created user's permissions}}",
									"host": [
										"{{Created user's permissions}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve first user's permissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Contains created permission\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const permissions = jsonData._embedded.permissions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < permissions.length; i++) {\r",
											"        if (permissions[i]._links.permission.href == pm.collectionVariables.get(\"Created permission\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain second created permission\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const permissions = jsonData._embedded.permissions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < permissions.length; i++) {\r",
											"        if (permissions[i]._links.permission.href == pm.collectionVariables.get(\"Second created permission\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created user's permissions}}",
									"host": [
										"{{Created user's permissions}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign first permission from first user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Created user's permissions}}/{{Created permission's id}}",
									"host": [
										"{{Created user's permissions}}"
									],
									"path": [
										"{{Created permission's id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign first permission from second user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Second created user's permissions}}/{{Created permission's id}}",
									"host": [
										"{{Second created user's permissions}}"
									],
									"path": [
										"{{Created permission's id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign second permission from second user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Second created user's permissions}}/{{Second created permission's id}}",
									"host": [
										"{{Second created user's permissions}}"
									],
									"path": [
										"{{Second created permission's id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve first user's permissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain created permission\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const permissions = jsonData._embedded.permissions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < permissions.length; i++) {\r",
											"        if (permissions[i]._links.permission.href == pm.collectionVariables.get(\"Created permission\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain second created permission\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const permissions = jsonData._embedded.permissions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < permissions.length; i++) {\r",
											"        if (permissions[i]._links.permission.href == pm.collectionVariables.get(\"Second created permission\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created user's permissions}}",
									"host": [
										"{{Created user's permissions}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve second user's permissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain created permission\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const permissions = jsonData._embedded.permissions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < permissions.length; i++) {\r",
											"        if (permissions[i]._links.permission.href == pm.collectionVariables.get(\"Created permission\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain second created permission\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const permissions = jsonData._embedded.permissions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < permissions.length; i++) {\r",
											"        if (permissions[i]._links.permission.href == pm.collectionVariables.get(\"Second created permission\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Second created user's permissions}}",
									"host": [
										"{{Second created user's permissions}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Many permissions can be assigned to many groups",
					"item": [
						{
							"name": "Assign both permissions to first group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{Created permission}}\r\n{{Second created permission}}",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{Created group's permissions}}",
									"host": [
										"{{Created group's permissions}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign both permissions to second group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{Created permission}}\r\n{{Second created permission}}",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{Second created group's permissions}}",
									"host": [
										"{{Second created group's permissions}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve first permission's groups",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Contains created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Contains second created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Second created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created permission's groups}}",
									"host": [
										"{{Created permission's groups}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve second permission's groups",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Contains created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Contains second created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Second created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Second created permission's groups}}",
									"host": [
										"{{Second created permission's groups}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign first permission from first group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Created group's permissions}}/{{Created permission's id}}",
									"host": [
										"{{Created group's permissions}}"
									],
									"path": [
										"{{Created permission's id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign first permission from second group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Second created group's permissions}}/{{Created permission's id}}",
									"host": [
										"{{Second created group's permissions}}"
									],
									"path": [
										"{{Created permission's id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign second permission from first group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Created group's permissions}}/{{Second created permission's id}}",
									"host": [
										"{{Created group's permissions}}"
									],
									"path": [
										"{{Second created permission's id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign second permission from second group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Second created group's permissions}}/{{Second created permission's id}}",
									"host": [
										"{{Second created group's permissions}}"
									],
									"path": [
										"{{Second created permission's id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve first permission's groups",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain second created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Second created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created permission's groups}}",
									"host": [
										"{{Created permission's groups}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve second permission's groups",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain second created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Second created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Second created permission's groups}}",
									"host": [
										"{{Second created permission's groups}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Many permissions can have one permission type",
					"item": [
						{
							"name": "Retrieve first permission's type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Is default permission type\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Default permission type name\"));\r",
											"    pm.expect(jsonData.description).to.equal(pm.collectionVariables.get(\"Default permission type description\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created permission's type}}",
									"host": [
										"{{Created permission's type}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign permission type to first permission",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"type\": \"{{Created permission type}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created permission}}",
									"host": [
										"{{Created permission}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign permission type to second permission",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"type\": \"{{Created permission type}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Second created permission}}",
									"host": [
										"{{Second created permission}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve first permission's type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Is created permission type\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData._links.permissionType.href).to.equal(pm.collectionVariables.get(\"Created permission type\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created permission's type}}",
									"host": [
										"{{Created permission's type}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve second permission's type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Is created permission type\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData._links.permissionType.href).to.equal(pm.collectionVariables.get(\"Created permission type\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Second created permission's type}}",
									"host": [
										"{{Second created permission's type}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign permission type from first permission",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Created permission's type}}",
									"host": [
										"{{Created permission's type}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign permission type from second permission Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Second created permission's type}}",
									"host": [
										"{{Second created permission's type}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve first permission's type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Is not created permission type\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData._links.permissionType.href).to.not.equal(pm.collectionVariables.get(\"Created permission type\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created permission's type}}",
									"host": [
										"{{Created permission's type}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve second permission's type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Is not created permission type\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData._links.permissionType.href).to.not.equal(pm.collectionVariables.get(\"Created permission type\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Second created permission's type}}",
									"host": [
										"{{Second created permission's type}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "One permission type can be assigned to many permissions",
					"item": [
						{
							"name": "Assign permission type to first permission",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"type\": \"{{Created permission type}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created permission}}",
									"host": [
										"{{Created permission}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign permission type to second permission",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"type\": \"{{Created permission type}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Second created permission}}",
									"host": [
										"{{Second created permission}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve permission type's permissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Contains created permission\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const permissions = jsonData._embedded.permissions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < permissions.length; i++) {\r",
											"        if (permissions[i]._links.permission.href == pm.collectionVariables.get(\"Created permission\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Contains second created permission\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const permissions = jsonData._embedded.permissions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < permissions.length; i++) {\r",
											"        if (permissions[i]._links.permission.href == pm.collectionVariables.get(\"Second created permission\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created permission type's permissions}}",
									"host": [
										"{{Created permission type's permissions}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign permission type from first permission",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Created permission's type}}",
									"host": [
										"{{Created permission's type}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign permission type from second permission Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Second created permission's type}}",
									"host": [
										"{{Second created permission's type}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve permission type's permissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain created permission\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const permissions = jsonData._embedded.permissions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < permissions.length; i++) {\r",
											"        if (permissions[i]._links.permission.href == pm.collectionVariables.get(\"Created permission\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain second created permission\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const permissions = jsonData._embedded.permissions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < permissions.length; i++) {\r",
											"        if (permissions[i]._links.permission.href == pm.collectionVariables.get(\"Second created permission\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created permission type's permissions}}",
									"host": [
										"{{Created permission type's permissions}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Many positions can have one parent position",
					"item": [
						{
							"name": "Assign parent position to first position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"parentPosition\": \"{{Third created position}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created position}}",
									"host": [
										"{{Created position}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign parent position to second position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"parentPosition\": \"{{Third created position}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Second created position}}",
									"host": [
										"{{Second created position}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve first position's parent position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Is third created position\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData._links.position.href).to.equal(pm.collectionVariables.get(\"Third created position\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created position's parent position}}",
									"host": [
										"{{Created position's parent position}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve second position's parent position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Is third created position\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData._links.position.href).to.equal(pm.collectionVariables.get(\"Third created position\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Second created position's parent position}}",
									"host": [
										"{{Second created position's parent position}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign parent position from first position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Created position's parent position}}",
									"host": [
										"{{Created position's parent position}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign parent position from second position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Second created position's parent position}}",
									"host": [
										"{{Second created position's parent position}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve first position's parent position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created position's parent position}}",
									"host": [
										"{{Created position's parent position}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve second position's parent position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Second created position's parent position}}",
									"host": [
										"{{Second created position's parent position}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "One position can be the parent of many positions",
					"item": [
						{
							"name": "Assign parent position to first position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"parentPosition\": \"{{Third created position}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created position}}",
									"host": [
										"{{Created position}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign parent position to second position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"parentPosition\": \"{{Third created position}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Second created position}}",
									"host": [
										"{{Second created position}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve parent position's child positions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Contains created position\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const positions = jsonData._embedded.positions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < positions.length; i++) {\r",
											"        if (positions[i]._links.position.href == pm.collectionVariables.get(\"Created position\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Contains second created position\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const positions = jsonData._embedded.positions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < positions.length; i++) {\r",
											"        if (positions[i]._links.position.href == pm.collectionVariables.get(\"Second created position\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Third created position's child positions}}",
									"host": [
										"{{Third created position's child positions}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign parent position from first position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Created position's parent position}}",
									"host": [
										"{{Created position's parent position}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign parent position from second position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Second created position's parent position}}",
									"host": [
										"{{Second created position's parent position}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve parent position's child positions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain created position\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const positions = jsonData._embedded.positions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < positions.length; i++) {\r",
											"        if (positions[i]._links.position.href == pm.collectionVariables.get(\"Created position\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain second created position\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const positions = jsonData._embedded.positions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < positions.length; i++) {\r",
											"        if (positions[i]._links.position.href == pm.collectionVariables.get(\"Second created position\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Third created position's child positions}}",
									"host": [
										"{{Third created position's child positions}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "One position can be assigned to many users",
					"item": [
						{
							"name": "Assign position to first user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"position\": \"{{Created position}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created user}}",
									"host": [
										"{{Created user}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign position to second user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"position\": \"{{Created position}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Second created user}}",
									"host": [
										"{{Second created user}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve position's users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Contains created user\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const users = jsonData._embedded.users;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < users.length; i++) {\r",
											"        if (users[i]._links.user.href == pm.collectionVariables.get(\"Created user\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Contains second created user\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const users = jsonData._embedded.users;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < users.length; i++) {\r",
											"        if (users[i]._links.user.href == pm.collectionVariables.get(\"Second created user\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created position's users}}",
									"host": [
										"{{Created position's users}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign position from first user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Created user's position}}",
									"host": [
										"{{Created user's position}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign position from second user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Second created user's position}}",
									"host": [
										"{{Second created user's position}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve position's users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain created user\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const users = jsonData._embedded.users;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < users.length; i++) {\r",
											"        if (users[i]._links.user.href == pm.collectionVariables.get(\"Created user\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain second created user\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const users = jsonData._embedded.users;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < users.length; i++) {\r",
											"        if (users[i]._links.user.href == pm.collectionVariables.get(\"Second created user\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created position's users}}",
									"host": [
										"{{Created position's users}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Many positions can be part of many groups",
					"item": [
						{
							"name": "Assign both groups to first position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{Created group}}\r\n{{Second created group}}",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{Created position's groups}}",
									"host": [
										"{{Created position's groups}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign both groups to second position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{Created group}}\r\n{{Second created group}}",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{Second created position's groups}}",
									"host": [
										"{{Second created position's groups}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve first position's groups",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Contains created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Contains second created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Second created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created position's groups}}",
									"host": [
										"{{Created position's groups}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve second position's groups",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Contains created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Contains second created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Second created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Second created position's groups}}",
									"host": [
										"{{Second created position's groups}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign first group to first position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{Created group}}",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{Created position's groups}}",
									"host": [
										"{{Created position's groups}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve first position's groups Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Contains created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain second created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Second created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created position's groups}}",
									"host": [
										"{{Created position's groups}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign first group from first position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Created position's groups}}/{{Created group's id}}",
									"host": [
										"{{Created position's groups}}"
									],
									"path": [
										"{{Created group's id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign first group from second position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Second created position's groups}}/{{Created group's id}}",
									"host": [
										"{{Second created position's groups}}"
									],
									"path": [
										"{{Created group's id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign second group from first position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Created position's groups}}/{{Second created group's id}}",
									"host": [
										"{{Created position's groups}}"
									],
									"path": [
										"{{Second created group's id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign second group from second position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Second created position's groups}}/{{Second created group's id}}",
									"host": [
										"{{Second created position's groups}}"
									],
									"path": [
										"{{Second created group's id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve first position's groups",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain second created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Second created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created position's groups}}",
									"host": [
										"{{Created position's groups}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve second position's groups",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain second created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Second created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Second created position's groups}}",
									"host": [
										"{{Second created position's groups}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "One timezone can be assigned to many users",
					"item": [
						{
							"name": "Assign timezone to first user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"timezone\": \"{{Created timezone}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created user}}",
									"host": [
										"{{Created user}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign timezone to second user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"timezone\": \"{{Created timezone}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Second created user}}",
									"host": [
										"{{Second created user}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve timezone's users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Contains created user\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const users = jsonData._embedded.users;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < users.length; i++) {\r",
											"        if (users[i]._links.user.href == pm.collectionVariables.get(\"Created user\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Contains second created user\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const users = jsonData._embedded.users;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < users.length; i++) {\r",
											"        if (users[i]._links.user.href == pm.collectionVariables.get(\"Second created user\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created timezone's users}}",
									"host": [
										"{{Created timezone's users}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign timezone from first user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Created user's timezone}}",
									"host": [
										"{{Created user's timezone}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign timezone from second user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Second created user's timezone}}",
									"host": [
										"{{Second created user's timezone}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve timezone's users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain created user\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const users = jsonData._embedded.users;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < users.length; i++) {\r",
											"        if (users[i]._links.user.href == pm.collectionVariables.get(\"Created user\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain second created user\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const users = jsonData._embedded.users;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < users.length; i++) {\r",
											"        if (users[i]._links.user.href == pm.collectionVariables.get(\"Second created user\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created timezone's users}}",
									"host": [
										"{{Created timezone's users}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Many jurisdictions can be assigned to many groups",
					"item": [
						{
							"name": "Assign both jurisdictions to first group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{Created jurisdiction}}\r\n{{Second created jurisdiction}}",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{Created group's jurisdictions}}",
									"host": [
										"{{Created group's jurisdictions}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign both jurisdictions to second group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{Created jurisdiction}}\r\n{{Second created jurisdiction}}",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{Second created group's jurisdictions}}",
									"host": [
										"{{Second created group's jurisdictions}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve first jurisdiction's groups",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Contains created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Contains second created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Second created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created jurisdiction's groups}}",
									"host": [
										"{{Created jurisdiction's groups}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve second jurisdiction's groups",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Contains created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Contains second created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Second created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Second created jurisdiction's groups}}",
									"host": [
										"{{Second created jurisdiction's groups}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign first jurisdiction from first group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Created group's jurisdictions}}/{{Created jurisdiction's id}}",
									"host": [
										"{{Created group's jurisdictions}}"
									],
									"path": [
										"{{Created jurisdiction's id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign first jurisdiction from second group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Second created group's jurisdictions}}/{{Created jurisdiction's id}}",
									"host": [
										"{{Second created group's jurisdictions}}"
									],
									"path": [
										"{{Created jurisdiction's id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign second jurisdiction from first group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Created group's jurisdictions}}/{{Second created jurisdiction's id}}",
									"host": [
										"{{Created group's jurisdictions}}"
									],
									"path": [
										"{{Second created jurisdiction's id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign second jurisdiction from second group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Second created group's jurisdictions}}/{{Second created jurisdiction's id}}",
									"host": [
										"{{Second created group's jurisdictions}}"
									],
									"path": [
										"{{Second created jurisdiction's id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve first jurisdiction's groups",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain second created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Second created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created jurisdiction's groups}}",
									"host": [
										"{{Created jurisdiction's groups}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve second jurisdiction's groups",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain second created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Second created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Second created jurisdiction's groups}}",
									"host": [
										"{{Second created jurisdiction's groups}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Teardown",
					"item": [
						{
							"name": "Delete second flag definition",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Second created flag definition}}",
									"host": [
										"{{Second created flag definition}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete flag definition",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Created flag definition}}",
									"host": [
										"{{Created flag definition}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete second jurisdiction",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Second created jurisdiction}}",
									"host": [
										"{{Second created jurisdiction}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete jurisdiction",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Created jurisdiction}}",
									"host": [
										"{{Created jurisdiction}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete third position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Third created position}}",
									"host": [
										"{{Third created position}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete second position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Second created position}}",
									"host": [
										"{{Second created position}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Created position}}",
									"host": [
										"{{Created position}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete timezone",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Created timezone}}",
									"host": [
										"{{Created timezone}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete second permission",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Second created permission}}",
									"host": [
										"{{Second created permission}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete permission",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Created permission}}",
									"host": [
										"{{Created permission}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete permission type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Created permission type}}",
									"host": [
										"{{Created permission type}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete second group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Second created group}}",
									"host": [
										"{{Second created group}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Created group}}",
									"host": [
										"{{Created group}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete second user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Second created user}}",
									"host": [
										"{{Second created user}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Created user}}",
									"host": [
										"{{Created user}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Misc",
			"item": [
				{
					"name": "Authorized via group",
					"item": [
						{
							"name": "Create a user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 201 Created status\", () => {\r",
											"    const response = pm.response;\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(response.code).to.equal(201);\r",
											"    pm.expect(response.status).to.equal(\"Created\");\r",
											"\r",
											"    pm.collectionVariables.set(\"Created user\", jsonData._links.user.href);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "PrivilegedUser",
											"type": "string"
										},
										{
											"key": "password",
											"value": "1ncharge",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"username\": \"{{Username}}\",\n    \"password\": \"{{Password}}\",\n    \"firstName\": \"{{First name}}\",\n    \"lastName\": \"{{Last name}}\",\n    \"email\": \"{{Email}}\",\n    \"status\": \"{{User status}}\",\n    \"passwordExpires\": \"{{Password expires}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Users endpoint}}",
									"host": [
										"{{Users endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "PrivilegedUser",
											"type": "string"
										},
										{
											"key": "password",
											"value": "1ncharge",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Created user}}",
									"host": [
										"{{Created user}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Other",
					"item": [
						{
							"name": "Endpoint not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(404);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: not found\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{Users endpoint}}xxx",
									"host": [
										"{{Users endpoint}}xxx"
									]
								}
							},
							"response": []
						},
						{
							"name": "Resource not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(404);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: not found\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{Users endpoint}}/{{Incorrect id}}",
									"host": [
										"{{Users endpoint}}"
									],
									"path": [
										"{{Incorrect id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "No credentials sent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 401 Unauthorizeddd\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(401);\r",
											"    pm.expect(response.status).to.equal(\"Unauthorized\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(401);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: unauthorized\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();\r",
											"const url = pm.collectionVariables.get(\"Users endpoint\");\r",
											"\r",
											"jar.clear(pm.collectionVariables.get(\"Users endpoint\"), (error) => {\r",
											"    if (error) {\r",
											"        console.error(error);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{Users endpoint}}",
									"host": [
										"{{Users endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Wrong username",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 401 Unauthorized\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(401);\r",
											"    pm.expect(response.status).to.equal(\"Unauthorized\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(401);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: unauthorized\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "invalid_password",
											"type": "string"
										},
										{
											"key": "username",
											"value": "invalid_user",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{Users endpoint}}",
									"host": [
										"{{Users endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Wrong password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 401 Unauthorized\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(401);\r",
											"    pm.expect(response.status).to.equal(\"Unauthorized\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(401);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: unauthorized\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "Administrator",
											"type": "string"
										},
										{
											"key": "password",
											"value": "invalid_password",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{Users endpoint}}",
									"host": [
										"{{Users endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Access forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 403 Forbidden\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(403);\r",
											"    pm.expect(response.status).to.equal(\"Forbidden\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(403);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: forbidden\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "1ncharge",
											"type": "string"
										},
										{
											"key": "username",
											"value": "NonPrivilegedUser",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{Users endpoint}}",
									"host": [
										"{{Users endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "URL incorrect data type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: data type conversion\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message.startsWith(\"input string: \")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{Groups endpoint}}/a",
									"host": [
										"{{Groups endpoint}}"
									],
									"path": [
										"a"
									]
								}
							},
							"response": []
						},
						{
							"name": "Missing body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: missing input\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message == \"missing input\") {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{Users endpoint}}",
									"host": [
										"{{Users endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Malformed body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: malformed input\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message == \"malformed JSON input\") {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"username\": \"{{Username}}\",\n    \"password\": \"{{Password}}\",\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Users endpoint}}",
									"host": [
										"{{Users endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid composite key format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(404);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: not found\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"description\": \"{{Flag definition description}}\",\n    \"note\": \"{{Modified flag definition note}}\",\n    \"defaultValue\": \"{{Flag definition default value}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Flags endpoint}}/{{Incorrect id}}",
									"host": [
										"{{Flags endpoint}}"
									],
									"path": [
										"{{Incorrect id}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "password",
				"value": "1ncharge",
				"type": "string"
			},
			{
				"key": "username",
				"value": "Administrator",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.collectionVariables.set(\"Actuator health schema\", {",
					"    \"type\": \"object\",",
					"    \"properties\": {",
					"        \"status\": { \"type\": \"string\" }",
					"    },",
					"    \"required\": [",
					"        \"status\"",
					"    ],",
					"    \"additionalProperties\": false",
					"});",
					"",
					"pm.collectionVariables.set(\"Entry point schema\", {",
					"    \"type\": \"object\",",
					"    \"properties\": {",
					"        \"_links\": {",
					"            \"type\": \"object\",",
					"            \"properties\": {",
					"                \"permissions\": {",
					"                    \"type\": \"object\",",
					"                    \"properties\": {",
					"                        \"href\": { \"type\": \"string\" }",
					"                    },",
					"                    \"required\": [ \"href\" ],",
					"                    \"additionalProperties\": false",
					"                },",
					"                \"positions\": {",
					"                    \"type\": \"object\",",
					"                    \"properties\": {",
					"                        \"href\": { \"type\": \"string\" }",
					"                    },",
					"                    \"required\": [ \"href\" ],",
					"                    \"additionalProperties\": false",
					"                },",
					"                \"permissionTypes\": {",
					"                    \"type\": \"object\",",
					"                    \"properties\": {",
					"                        \"href\": { \"type\": \"string\" }",
					"                    },",
					"                    \"required\": [ \"href\" ],",
					"                    \"additionalProperties\": false",
					"                },",
					"                \"users\": {",
					"                    \"type\": \"object\",",
					"                    \"properties\": {",
					"                        \"href\": { \"type\": \"string\" }",
					"                    },",
					"                    \"required\": [ \"href\" ],",
					"                    \"additionalProperties\": false",
					"                },",
					"                \"groups\": {",
					"                    \"type\": \"object\",",
					"                    \"properties\": {",
					"                        \"href\": { \"type\": \"string\" }",
					"                    },",
					"                    \"required\": [ \"href\" ],",
					"                    \"additionalProperties\": false",
					"                },                ",
					"                \"timezones\": {",
					"                    \"type\": \"object\",",
					"                    \"properties\": {",
					"                        \"href\": { \"type\": \"string\" }",
					"                    },",
					"                    \"required\": [ \"href\" ],",
					"                    \"additionalProperties\": false",
					"                },",
					"                \"jurisdictions\": {",
					"                    \"type\": \"object\",",
					"                    \"properties\": {",
					"                        \"href\": { \"type\": \"string\" }",
					"                    },",
					"                    \"required\": [ \"href\" ],",
					"                    \"additionalProperties\": false",
					"                },",
					"                \"flags\": {",
					"                    \"type\": \"object\",",
					"                    \"properties\": {",
					"                        \"href\": { \"type\": \"string\" }",
					"                    },",
					"                    \"required\": [ \"href\" ],",
					"                    \"additionalProperties\": false",
					"                },",
					"                \"flagDefinitions\": {",
					"                    \"type\": \"object\",",
					"                    \"properties\": {",
					"                        \"href\": { \"type\": \"string\" }",
					"                    },",
					"                    \"required\": [ \"href\" ],",
					"                    \"additionalProperties\": false",
					"                },",
					"                \"profile\": {",
					"                    \"type\": \"object\",",
					"                    \"properties\": {",
					"                        \"href\": { \"type\": \"string\" }",
					"                    },",
					"                    \"required\": [ \"href\" ],",
					"                    \"additionalProperties\": false",
					"                }",
					"            },",
					"            \"required\": [",
					"                \"permissions\",",
					"                \"positions\",",
					"                \"permissionTypes\",",
					"                \"users\",",
					"                \"groups\",",
					"                \"timezones\",",
					"                \"jurisdictions\",",
					"                \"flags\",",
					"                \"flagDefinitions\",",
					"                \"profile\"",
					"            ],",
					"            \"additionalProperties\": false",
					"        }",
					"    },",
					"    \"required\": [ \"_links\" ],",
					"    \"additionalProperties\": false",
					"});",
					"",
					"pm.collectionVariables.set(\"Problem schema\", {",
					"    \"type\": \"object\",",
					"    \"properties\": {",
					"        \"status\": { \"type\": \"integer\" },",
					"        \"type\": { \"type\": \"string\" },",
					"        \"title\": { \"type\": \"string\" },",
					"        \"detail\": { \"type\": \"string\" },",
					"        \"instance\": { \"type\": \"string\" },",
					"        \"failures\": {",
					"            \"type\": \"array\",",
					"            \"items\": {",
					"                \"anyOf\": [",
					"                    {",
					"                        \"type\": \"object\",",
					"                        \"properties\": {",
					"                            \"message\": { \"type\": \"string\" },",
					"                            \"constraint\": { \"type\": \"string\" },",
					"                            \"advice\": { \"type\": \"string\" },",
					"                            \"example\": { \"type\": \"string\" }",
					"                        },",
					"                        \"required\": [ ",
					"                            \"message\"",
					"                        ],",
					"                        \"additionalProperties\": false",
					"                    }",
					"                ]",
					"            },",
					"        },",
					"    },",
					"    \"required\": [",
					"        \"status\",",
					"        \"title\",",
					"        \"instance\"",
					"    ],",
					"    \"additionalProperties\": false",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"id": "945508ca-1880-465d-8e90-0b09e13c1a86",
			"key": "Health endpoint",
			"value": "{{Backoffice User Manager URL}}/actuator/health"
		},
		{
			"id": "ee7cf52e-d7c3-4e0b-b10b-648f4ce4be80",
			"key": "Home endpoint",
			"value": "{{Backoffice User Manager URL}}/api/v1"
		},
		{
			"id": "8f5f68d6-38e6-46ff-8805-825dbc6393bc",
			"key": "Authentication user",
			"value": "Administrator"
		},
		{
			"id": "a273bc0e-ed5b-4046-ab6f-c03c42aa2953",
			"key": "Authentication password",
			"value": "1ncharge"
		},
		{
			"id": "afe33496-9ca6-4028-b8d3-f5760d0d9290",
			"key": "Incorrect id",
			"value": "9999999"
		},
		{
			"id": "b5040b2a-97a9-4585-8bb2-c0ae719d3131",
			"key": "Username",
			"value": "ktsagkournis"
		},
		{
			"id": "740af35b-bf26-4d71-9f9e-204b000fadc8",
			"key": "Modified username",
			"value": "kstefanis"
		},
		{
			"id": "bac25703-e948-4fd8-acb0-fbff06fb4e80",
			"key": "Password",
			"value": "T3t3nt3k"
		},
		{
			"id": "af6f1806-795f-46b3-8be4-97a0804b0fa1",
			"key": "First name",
			"value": "Kostas"
		},
		{
			"id": "7059a101-b894-4c36-ab31-137454bfcccd",
			"key": "Last name",
			"value": "Tsagkournis"
		},
		{
			"id": "5eba4b8f-57af-45a5-8280-0597f97a416a",
			"key": "Modified last name",
			"value": "Stefanis"
		},
		{
			"id": "3934f66b-deb3-42b7-8ce2-68bb339fa523",
			"key": "Email",
			"value": "ktsagkou@yahoo.gr"
		},
		{
			"id": "1d929a20-aced-4256-862e-cebbc242f6b9",
			"key": "User status",
			"value": "A"
		},
		{
			"id": "b9579230-ff18-4cc1-b547-c20bff9e77c9",
			"key": "Password expires",
			"value": "Y"
		},
		{
			"id": "0ec72a22-f83e-4675-8588-98f32456e056",
			"key": "Permission type name",
			"value": "GDPR"
		},
		{
			"id": "0c208668-78c6-4c98-bd7a-2e4233cbf859",
			"key": "Permission type description",
			"value": "GDPR permission type"
		},
		{
			"id": "c8734969-a5ee-49ef-997f-5c0d24f58497",
			"key": "Modified permission type description",
			"value": "GDPR permission type value"
		},
		{
			"id": "fc152539-58c6-4546-a6f1-1ee61b750c33",
			"key": "Default permission type name",
			"value": "GEN"
		},
		{
			"id": "94352309-ccb0-408a-b3c5-5d4b31cb817c",
			"key": "Default permission type description",
			"value": "Default permission type"
		},
		{
			"id": "697bb8f6-b0df-4cf7-8e21-0488d0e9a1ed",
			"key": "Display order",
			"value": "0"
		},
		{
			"id": "246b7e88-5264-4364-ae54-0a9894279d11",
			"key": "Incorrect permission type id",
			"value": "DFLT"
		},
		{
			"id": "e4f65e2f-17ab-494c-b710-ace6e1fac3a7",
			"key": "Permission name",
			"value": "CanViewSensitiveData"
		},
		{
			"id": "ca1058ee-121c-490d-b834-97497afe84da",
			"key": "Permission description",
			"value": "Can view sensitive data"
		},
		{
			"id": "907d53f2-ef6e-4afc-8505-74e122fbd7fc",
			"key": "Modified permission description",
			"value": "Can access sensitive data"
		},
		{
			"id": "c87f20c2-ef96-4064-ad28-0d6a9f1a34fc",
			"key": "Incorrect permission id",
			"value": "CanAccessSensitiveData"
		},
		{
			"id": "d5c46b1f-0224-4b24-866d-e69fcb2f4e12",
			"key": "Timezone name",
			"value": "Europe/Bucharest"
		},
		{
			"id": "e92e3ad6-6fbe-4c46-b597-6a79d0fa5790",
			"key": "Modified timezone name",
			"value": "Europe/Cluj"
		},
		{
			"id": "c8c77e22-e1da-4698-928e-e5123182a2b4",
			"key": "Timezone status",
			"value": "A"
		},
		{
			"id": "4f2e7290-9199-4eb7-abd8-c575bb663437",
			"key": "Display",
			"value": "Y"
		},
		{
			"id": "fd71ac4f-9d3e-4a42-a5fb-f6581907063b",
			"key": "Position name",
			"value": "Software Engineer"
		},
		{
			"id": "e3bee8e6-e3fc-485f-9861-5184ee121c58",
			"key": "Modified position name",
			"value": "Systems Engineer"
		},
		{
			"id": "552c731a-d1fc-4b3c-abd8-dee951019b1b",
			"key": "Alternate position name",
			"value": "QA Analyst"
		},
		{
			"id": "875e0d81-3c0e-4aa2-94d9-7044a39d1a28",
			"key": "Group name",
			"value": "Administrators"
		},
		{
			"id": "6a7b2d81-82fa-4dc6-912b-c4281eaa7f1e",
			"key": "Modified group name",
			"value": "HR"
		},
		{
			"id": "0118c44f-f46e-4b24-85a4-fffd73ef59eb",
			"key": "Jurisdiction name",
			"value": "GREECE"
		},
		{
			"id": "454c197b-1216-439d-877c-ce8e3a2bcd62",
			"key": "Modified jurisdiction name",
			"value": "AUSTRALIA"
		},
		{
			"id": "96a02565-96b9-4330-9fa1-a1d8cf842aee",
			"key": "Flag value name",
			"value": "IS_AUTOMATED"
		},
		{
			"id": "bee064e8-40fc-4445-8e56-4b45ccc91f5c",
			"key": "Flag value",
			"value": "0"
		},
		{
			"id": "0a851354-5885-44b9-80a5-4e15fef2f1d5",
			"key": "Flag modified value",
			"value": "1"
		},
		{
			"id": "c4753c57-10da-458f-8826-fa9fae7e9482",
			"key": "Incorrect flag id",
			"value": "999999_FLAG"
		},
		{
			"id": "a4141900-dc13-4bb8-86c4-919604e36d0e",
			"key": "Flag definition name",
			"value": "LANGUAGE"
		},
		{
			"id": "eadbb3ab-949d-465e-8933-a6d416e38b54",
			"key": "Flag definition description",
			"value": "The user's language"
		},
		{
			"id": "f709dadb-7be4-4416-bcb4-104756a5482c",
			"key": "Flag definition note",
			"value": "Only affects specific components"
		},
		{
			"id": "018e8551-c1f8-469f-b369-ddbb54809791",
			"key": "Flag definition default value",
			"value": "English"
		},
		{
			"id": "a8a827e4-0cf0-4a5d-9a83-1e03fe1e0337",
			"key": "Modified flag definition note",
			"value": "Only affects some components"
		},
		{
			"id": "a2810494-a75a-4f78-8758-49df5186e77e",
			"key": "Permission types endpoint",
			"value": ""
		},
		{
			"id": "69b947d4-689d-43ac-891e-7f2b14913b4c",
			"key": "Permissions endpoint",
			"value": ""
		},
		{
			"id": "eb7e2f3c-55bc-4d85-a5bc-00e19d7adcbf",
			"key": "Positions endpoint",
			"value": ""
		},
		{
			"id": "9b4d79ae-1a2f-4eb1-b95c-2eb6b779aefc",
			"key": "Profile endpoint",
			"value": ""
		},
		{
			"id": "edb5fb48-5a91-4ac6-a335-66484ce34842",
			"key": "Timezones endpoint",
			"value": ""
		},
		{
			"id": "5c2b156f-29d3-435d-81a3-30ff5c2d078a",
			"key": "Users endpoint",
			"value": ""
		},
		{
			"id": "c443770d-496b-4272-b4ca-e57be043bd52",
			"key": "Created user",
			"value": ""
		},
		{
			"id": "5ad66eab-7623-4dae-99f7-40478d782438",
			"key": "Created user's id",
			"value": ""
		},
		{
			"id": "617d59d6-00b8-42ef-80ae-5ada8c574561",
			"key": "Created user's permissions",
			"value": ""
		},
		{
			"id": "debe6982-d6d2-4bd6-b03d-80981e914f95",
			"key": "Created user's position",
			"value": ""
		},
		{
			"id": "87d516e3-3729-45bb-a231-95dea3f93fc8",
			"key": "Created user's timezone",
			"value": ""
		},
		{
			"id": "89bf88b9-d245-46e0-8a55-dd461bcc749b",
			"key": "Second created user",
			"value": ""
		},
		{
			"id": "d5862006-d7eb-4426-a98d-c14f62c4e3da",
			"key": "Created permission type",
			"value": ""
		},
		{
			"id": "62b97a65-cf4b-4481-8458-08daf3178e1f",
			"key": "Created permission type's permissions",
			"value": ""
		},
		{
			"id": "b3520ed1-3c9c-455b-96c6-ad20b4882fb4",
			"key": "Second created permission type",
			"value": ""
		},
		{
			"id": "440dd297-1709-44f2-b261-77b41d308795",
			"key": "Created permission",
			"value": ""
		},
		{
			"id": "b6ece066-0cd8-4248-a4ed-71043dd38edd",
			"key": "Created permission's type",
			"value": ""
		},
		{
			"id": "1e549c07-aaa4-4067-bf4f-fe6ebb445a88",
			"key": "Created permission's users",
			"value": ""
		},
		{
			"id": "16272213-fa67-425a-8915-18cd0292f54c",
			"key": "Second created permission",
			"value": ""
		},
		{
			"id": "77cf5008-9040-4142-96c8-cce49f65a87c",
			"key": "Created timezone",
			"value": ""
		},
		{
			"id": "b0a0ffc6-3f17-46a8-980e-6b5ad4fecdfa",
			"key": "Created timezone's users",
			"value": ""
		},
		{
			"id": "ab2d5857-a4f5-4963-968c-464820c848b8",
			"key": "Second created timezone",
			"value": ""
		},
		{
			"id": "e7a7fae7-b494-4c41-9c47-a31c40f1fafc",
			"key": "Created position",
			"value": ""
		},
		{
			"id": "874d738c-a82d-4370-9b6b-83a516e2fd8a",
			"key": "Created position's child positions",
			"value": ""
		},
		{
			"id": "e07b08a2-aeaf-4e7d-bc0f-e634491ea762",
			"key": "Created position's parent position",
			"value": ""
		},
		{
			"id": "66074421-cd99-4aac-94a1-316dc6e616dd",
			"key": "Created position's users",
			"value": ""
		},
		{
			"id": "2eff5e9e-e2f3-40c8-bb92-9b01a7c4ac03",
			"key": "Second created position",
			"value": ""
		},
		{
			"id": "c6c4e098-299a-45e2-9bb3-1c7313ac38d1",
			"key": "User schema",
			"value": ""
		},
		{
			"id": "67b3832e-9652-4ce2-b008-f4fecb8a1343",
			"key": "User collection schema",
			"value": ""
		},
		{
			"id": "07e9b418-a006-4fd6-84aa-8ff96169c49d",
			"key": "User item schema",
			"value": ""
		},
		{
			"id": "ef5e6c36-fb52-47e8-8cbb-1e09ebb26920",
			"key": "User search schema",
			"value": ""
		},
		{
			"id": "1f095c54-f728-4c25-82db-5c9a5fea7a48",
			"key": "User search root schema",
			"value": ""
		},
		{
			"id": "8b33b2f6-a199-4f34-a9d8-d0a5695c1559",
			"key": "User search term schema",
			"value": ""
		},
		{
			"id": "2e7ca8eb-2bc4-4b7a-bda4-397f7e28c20e",
			"key": "Permission type collection schema",
			"value": ""
		},
		{
			"id": "ad9cf955-322e-48f3-9bff-682c7b9fbabe",
			"key": "Permission type item schema",
			"value": ""
		},
		{
			"id": "7cf6dc54-8b64-481c-949f-284b877e8bfb",
			"key": "Permission collection schema",
			"value": ""
		},
		{
			"id": "f5c30d33-ea07-4ca5-aca6-598c455fba4b",
			"key": "Permission item schema",
			"value": ""
		},
		{
			"id": "394d858d-5955-4ef3-b108-cff890068741",
			"key": "Timezone collection schema",
			"value": ""
		},
		{
			"id": "85e26f6a-e239-4b63-b368-a854b98f4a1d",
			"key": "Timezone item schema",
			"value": ""
		},
		{
			"id": "b7aeee4c-28e1-498d-863a-7066ff4bbd15",
			"key": "Position collection schema",
			"value": ""
		},
		{
			"id": "dbc8be22-fb4f-4278-802f-ae2e999d6432",
			"key": "Position item schema",
			"value": ""
		},
		{
			"id": "5bcfeaa1-916d-41ce-abb5-1884a0d432ac",
			"key": "Actuator health schema",
			"value": ""
		},
		{
			"id": "1f346b3b-2b94-4cb8-9597-503fc30702b6",
			"key": "Entry point schema",
			"value": ""
		},
		{
			"id": "c62efeb8-58f3-4324-b3d6-e5918d519e29",
			"key": "Groups endpoint",
			"value": ""
		},
		{
			"id": "2ade802b-7cb5-4d1c-8097-069d5c5b2627",
			"key": "Group collection schema",
			"value": ""
		},
		{
			"id": "414b15b8-2de4-40e2-bc0b-cde020039c84",
			"key": "Group item schema",
			"value": ""
		},
		{
			"id": "d75288d2-65df-43b0-93ab-f08855c6f75f",
			"key": "Created group",
			"value": ""
		},
		{
			"id": "8c6d8729-db6d-4d56-b198-960feff26a1f",
			"key": "Created group's id",
			"value": ""
		},
		{
			"id": "162092d4-45a3-4036-bb7b-7c71d76dc507",
			"key": "Created group's owner",
			"value": ""
		},
		{
			"id": "47277bef-8185-412c-9d01-b8602c1f6028",
			"key": "Second created group",
			"value": ""
		},
		{
			"id": "3cca889c-de77-4df5-a02f-08699787fc67",
			"key": "Created group's permissions",
			"value": ""
		},
		{
			"id": "e04b51e4-39b9-4d52-b578-10b4012a4220",
			"key": "Created group's positions",
			"value": ""
		},
		{
			"id": "651f5158-6c59-42c9-9fd5-7820026b3190",
			"key": "Created group's users",
			"value": ""
		},
		{
			"id": "55d21400-1131-4cc5-a979-5b4cbe2e41da",
			"key": "Created user's groups",
			"value": ""
		},
		{
			"id": "bed6dba8-6945-4183-b4a7-dcef125a78d5",
			"key": "Created user's ownedGroups",
			"value": ""
		},
		{
			"id": "f5ced981-253e-414b-b4e7-cb2950b96b1b",
			"key": "Created user's owned groups",
			"value": ""
		},
		{
			"id": "0fd6bf6c-0666-4d9b-b5ff-7de5f4f99152",
			"key": "Created position's groups",
			"value": ""
		},
		{
			"id": "d5bca1dc-f535-4c5f-8233-3c5ac678061c",
			"key": "Created permission's groups",
			"value": ""
		},
		{
			"id": "5b973c14-9413-40c5-815c-017beaf8bad9",
			"key": "Second created group's id",
			"value": ""
		},
		{
			"id": "a99c0a53-252f-4da9-a23c-c823be427560",
			"key": "Second created permission's type",
			"value": ""
		},
		{
			"id": "74757ed1-350b-4a42-97bc-c2ab8798dc69",
			"key": "Second created permission's users",
			"value": ""
		},
		{
			"id": "e03b233c-007b-416f-8d03-b75a5aecff88",
			"key": "Second created permission's groups",
			"value": ""
		},
		{
			"id": "060df049-6816-456f-ab16-b4d9bacfa6b7",
			"key": "Second created group's owner",
			"value": ""
		},
		{
			"id": "a7189f3d-2a7d-4fa6-99a1-055a869606cf",
			"key": "Second created user's timezone",
			"value": ""
		},
		{
			"id": "bc7f5e19-e945-4f0c-89c4-65479f07d2a2",
			"key": "Second created user's permissions",
			"value": ""
		},
		{
			"id": "897c4f8b-adf1-4802-a390-2bc14951270d",
			"key": "Second created user's position",
			"value": ""
		},
		{
			"id": "1de25201-8688-45ba-9eee-91c501f05696",
			"key": "Second created user's owned groups",
			"value": ""
		},
		{
			"id": "c289c282-18a5-4a87-b592-8b3e67670c3b",
			"key": "Second created user's groups",
			"value": ""
		},
		{
			"id": "a674cf10-2be1-4f33-893f-3a993a1d29a4",
			"key": "Second created user's id",
			"value": ""
		},
		{
			"id": "9a258eb2-3b35-4ae4-8b94-90ed098e6c68",
			"key": "Created permission's id",
			"value": ""
		},
		{
			"id": "0f45606f-a717-4332-af04-2120969c9b12",
			"key": "Second created permission's id",
			"value": ""
		},
		{
			"id": "4da2a63d-bfff-408a-91cb-93ae3ade3b1f",
			"key": "Second created group's users",
			"value": ""
		},
		{
			"id": "d0bd9d19-cc7d-4726-8425-8354817d8d40",
			"key": "Second created group's permissions",
			"value": ""
		},
		{
			"id": "91aa8b22-0a72-40df-93d6-edd24b9d8a5e",
			"key": "Second created position's child positions",
			"value": ""
		},
		{
			"id": "65d1af3e-3203-4f83-9100-9ad500a42900",
			"key": "Second created position's parent position",
			"value": ""
		},
		{
			"id": "58b39d2d-5bd0-40a9-bb42-3d5aea7cf5ba",
			"key": "Second created position's users",
			"value": ""
		},
		{
			"id": "2ba8d8d2-466c-4662-a891-269e053af318",
			"key": "Second created position's groups",
			"value": ""
		},
		{
			"id": "61c35cc3-3b22-4729-a692-2ef73a9622bd",
			"key": "Third created position",
			"value": ""
		},
		{
			"id": "1d698499-e4bc-4c8b-bd78-30cd7c4c2459",
			"key": "Third created position's child positions",
			"value": ""
		},
		{
			"id": "f2de1c22-1af8-4cbd-8e1c-3d8f9927a64f",
			"key": "Third created position's parent position",
			"value": ""
		},
		{
			"id": "83e2c04e-b1b2-4fbd-bcdf-e1a618b067e0",
			"key": "Third created position's users",
			"value": ""
		},
		{
			"id": "785dad13-ffc9-470e-b45b-46055077c43a",
			"key": "Third created position's groups",
			"value": ""
		},
		{
			"id": "208a5e83-68c4-4075-8a05-f3ed07725f71",
			"key": "Second created group's positions",
			"value": ""
		},
		{
			"id": "999725ee-c2a3-49ec-903a-6edf85f8d5a0",
			"key": "Problem schema",
			"value": ""
		},
		{
			"id": "dd0d875e-5127-4d46-93c4-07c169cf5c64",
			"key": "Problem: primary id required",
			"value": "Primary identifier required"
		},
		{
			"id": "077d6d1b-5a6c-4160-bf1a-a3f5b5b04801",
			"key": "Problem: primary id change",
			"value": "Primary identifier change attempt"
		},
		{
			"id": "78bc5d9c-da61-4e40-9f70-07b4e435a1d0",
			"key": "Problem: app violation",
			"value": "Application level constraint violation"
		},
		{
			"id": "0199ac2f-f7ad-4d7e-8bed-1dbc03d43a64",
			"key": "Problem: db violation",
			"value": "Database level constraint violation"
		},
		{
			"id": "122f1573-b2d4-4776-8415-420f1bd3d6b5",
			"key": "Problem: enum violation",
			"value": "Enumeration constraint violation"
		},
		{
			"id": "04646fe2-4cce-4b13-9e66-101499b93e91",
			"key": "Problem: data type conversion",
			"value": "Data type conversion failure"
		},
		{
			"id": "36b3ce2b-bcad-4160-92e8-ba46bb3fa70b",
			"key": "Problem: missing input",
			"value": "Missing input"
		},
		{
			"id": "8372702f-3036-45c3-adb8-19feeff07c65",
			"key": "Problem: malformed input",
			"value": "Malformed input"
		},
		{
			"id": "c1aeb220-3509-4197-9a29-4fbd09456d3a",
			"key": "Problem: immutable id change",
			"value": "Immutable identifier change attempt"
		},
		{
			"id": "c35b04dc-23d8-4aa8-a826-c9037e0907a5",
			"key": "Problem: not found",
			"value": "Not Found"
		},
		{
			"id": "7a802dac-6881-4670-9e42-fb44ab48b604",
			"key": "Problem: unauthorized",
			"value": "Unauthorized"
		},
		{
			"id": "e628ae10-d4e5-48c7-9fdf-9716c3bb4a1b",
			"key": "Problem: forbidden",
			"value": "Forbidden"
		},
		{
			"id": "9fd43de7-5e8a-4d33-b8ab-90b92f00a877",
			"key": "Problem: db integrity",
			"value": "Database integrity violation"
		},
		{
			"id": "c69579e1-d4c5-40a9-85c1-2546b254a4f0",
			"key": "Problem: db unknown",
			"value": "Unknown database level violation"
		},
		{
			"id": "9174ec42-1d02-4ef3-8f57-ef771c6e8976",
			"key": "Permission search root schema",
			"value": ""
		},
		{
			"id": "0e144867-a59a-478a-b341-e992813c5bfd",
			"key": "Permission search term schema",
			"value": ""
		},
		{
			"id": "1d282662-4a39-4894-a94c-6fb72b033d10",
			"key": "Jurisdictions endpoint",
			"value": ""
		},
		{
			"id": "597898a5-235e-4d5f-a4fd-9228246bb69d",
			"key": "Jurisdiction item schema",
			"value": ""
		},
		{
			"id": "32310389-2924-4a6d-b8fc-70a7c12a3f4b",
			"key": "Jurisdiction collection schema",
			"value": ""
		},
		{
			"id": "86c87b5d-ee42-4c1f-9be9-543f6eb3a4db",
			"key": "Created jurisdiction",
			"value": ""
		},
		{
			"id": "dbdf1374-28cb-4977-b25b-3cfa1832d7fe",
			"key": "Created jurisdiction's groups",
			"value": ""
		},
		{
			"id": "8a8a6a6e-1bc5-4ba6-8e6f-e2349ac1ece3",
			"key": "Created jurisdiction's id",
			"value": ""
		},
		{
			"id": "d0af0ac4-efbc-44ac-9306-311e82f3f628",
			"key": "Second created jurisdiction",
			"value": ""
		},
		{
			"id": "93d10c6f-2909-48c0-b502-8061d9df701e",
			"key": "Created group's jurisdictions",
			"value": ""
		},
		{
			"id": "550d9742-20d9-442d-bb49-4315cc4600ac",
			"key": "Second created group's jurisdictions",
			"value": ""
		},
		{
			"id": "1369c3f0-0c46-4f40-8109-cf77925ef204",
			"key": "Second created jurisdiction's groups",
			"value": ""
		},
		{
			"id": "3c6921f7-5e5b-45f2-b034-4a4ae85b6136",
			"key": "Second created jurisdiction's id",
			"value": ""
		},
		{
			"id": "e3c19d66-02d5-4462-9364-01599ad2c6b7",
			"key": "Flag values endpoint",
			"value": ""
		},
		{
			"id": "937d8dea-a870-4ce9-9dbc-69366f740fbd",
			"key": "Flag definitions endpoint",
			"value": ""
		},
		{
			"id": "1ed33e69-c30d-4815-ab64-ddc5d3c5cfee",
			"key": "Flag definition item schema",
			"value": ""
		},
		{
			"id": "2f9e16cc-c545-43fc-9a07-85b86bbf1cdf",
			"key": "Flag definition collection schema",
			"value": ""
		},
		{
			"id": "e7949fb8-95a6-4942-935c-18e5adc9fbb2",
			"key": "Created flag definition",
			"value": ""
		},
		{
			"id": "f06d2ad1-7321-44c0-870f-49048b682563",
			"key": "Created flag definition's flags",
			"value": ""
		},
		{
			"id": "5a624fa6-af44-4918-b0a0-12300760406d",
			"key": "Created flag definition's id",
			"value": ""
		},
		{
			"id": "2429adb4-3c48-4e0e-988d-f5153ab4e322",
			"key": "Second created flag definition",
			"value": ""
		},
		{
			"id": "7ddf6e28-c8f7-4026-b857-6f2b7b55fde6",
			"key": "Second created flag definition's flags",
			"value": ""
		},
		{
			"id": "6ec046b5-21e7-4143-84dd-e28ce2945d0a",
			"key": "Flags endpoint",
			"value": ""
		},
		{
			"id": "a772686d-1031-45dc-badc-2ae50bd7ce73",
			"key": "Created flag definition's name",
			"value": ""
		},
		{
			"id": "d7583b31-e95d-4927-a1c9-db96d0b0d57b",
			"key": "Flag item schema",
			"value": ""
		},
		{
			"id": "9ed22580-09bf-4df7-abcd-ece50b6185b1",
			"key": "Flag collection schema",
			"value": ""
		},
		{
			"id": "3d18e485-e7e0-4c2a-9715-4d3bbff05ba0",
			"key": "Created flag",
			"value": ""
		},
		{
			"id": "3e95f05e-44ee-4402-ad1c-fda98b50a8fa",
			"key": "Created flag's definition",
			"value": ""
		},
		{
			"id": "e14683b8-9ecf-4e6e-bb22-f0c4f979cbd8",
			"key": "Created flag's user",
			"value": ""
		}
	]
}