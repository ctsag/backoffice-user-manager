{
	"info": {
		"_postman_id": "a77c9522-5c9b-45ac-a2ed-54791c88ddea",
		"name": "Backoffice User Manager",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Service",
			"item": [
				{
					"name": "Health check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Returns a 200 OK status\", () => {\r",
									"    const response = pm.response;\r",
									"\r",
									"    pm.expect(response.code).to.equal(200);\r",
									"    pm.expect(response.status).to.equal(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Returns expected JSON schema\", () => {\r",
									"    const schema = pm.collectionVariables.get(\"Actuator health schema\");\r",
									"\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"Service status is UP\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData.status).to.equal(\"UP\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Health endpoint}}",
							"host": [
								"{{Health endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Entry point check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Returns a 200 OK status\", () => {\r",
									"    const response = pm.response; \r",
									"\r",
									"    pm.expect(response.code).to.equal(200);\r",
									"    pm.expect(response.status).to.equal(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Returns expected JSON schema\", () => {\r",
									"    const schema = pm.collectionVariables.get(\"Entry point schema\");\r",
									"    const jsonData = pm.response.json();\r",
									"\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"\r",
									"    pm.collectionVariables.set(\"Users endpoint\", jsonData._links.users.href);\r",
									"    pm.collectionVariables.set(\"Groups endpoint\", jsonData._links.groups.href);\r",
									"    pm.collectionVariables.set(\"Permissions endpoint\", jsonData._links.permissions.href);\r",
									"    pm.collectionVariables.set(\"Positions endpoint\", jsonData._links.positions.href);\r",
									"    pm.collectionVariables.set(\"Permission types endpoint\", jsonData._links.permissionTypes.href);    \r",
									"    pm.collectionVariables.set(\"Timezones endpoint\", jsonData._links.timezones.href);\r",
									"    pm.collectionVariables.set(\"Profile endpoint\", jsonData._links.profile.href);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Home endpoint}}",
							"host": [
								"{{Home endpoint}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.collectionVariables.set(\"Actuator health schema\", {",
							"    \"type\": \"object\",",
							"    \"properties\": {",
							"        \"status\": { \"type\": \"string\" }",
							"    },",
							"    \"required\": [",
							"        \"status\"",
							"    ],",
							"    \"additionalProperties\": false",
							"});",
							"",
							"pm.collectionVariables.set(\"Entry point schema\", {",
							"    \"type\": \"object\",",
							"    \"properties\": {",
							"        \"_links\": {",
							"            \"type\": \"object\",",
							"            \"properties\": {",
							"                \"permissions\": {",
							"                    \"type\": \"object\",",
							"                    \"properties\": {",
							"                        \"href\": { \"type\": \"string\" }",
							"                    },",
							"                    \"required\": [ \"href\" ],",
							"                    \"additionalProperties\": false",
							"                },",
							"                \"positions\": {",
							"                    \"type\": \"object\",",
							"                    \"properties\": {",
							"                        \"href\": { \"type\": \"string\" }",
							"                    },",
							"                    \"required\": [ \"href\" ],",
							"                    \"additionalProperties\": false",
							"                },",
							"                \"permissionTypes\": {",
							"                    \"type\": \"object\",",
							"                    \"properties\": {",
							"                        \"href\": { \"type\": \"string\" }",
							"                    },",
							"                    \"required\": [ \"href\" ],",
							"                    \"additionalProperties\": false",
							"                },",
							"                \"users\": {",
							"                    \"type\": \"object\",",
							"                    \"properties\": {",
							"                        \"href\": { \"type\": \"string\" }",
							"                    },",
							"                    \"required\": [ \"href\" ],",
							"                    \"additionalProperties\": false",
							"                },",
							"                \"groups\": {",
							"                    \"type\": \"object\",",
							"                    \"properties\": {",
							"                        \"href\": { \"type\": \"string\" }",
							"                    },",
							"                    \"required\": [ \"href\" ],",
							"                    \"additionalProperties\": false",
							"                },                ",
							"                \"timezones\": {",
							"                    \"type\": \"object\",",
							"                    \"properties\": {",
							"                        \"href\": { \"type\": \"string\" }",
							"                    },",
							"                    \"required\": [ \"href\" ],",
							"                    \"additionalProperties\": false",
							"                },",
							"                \"profile\": {",
							"                    \"type\": \"object\",",
							"                    \"properties\": {",
							"                        \"href\": { \"type\": \"string\" }",
							"                    },",
							"                    \"required\": [ \"href\" ],",
							"                    \"additionalProperties\": false",
							"                }",
							"            },",
							"            \"required\": [",
							"                \"permissions\",",
							"                \"positions\",",
							"                \"permissionTypes\",",
							"                \"users\",",
							"                \"groups\",",
							"                \"timezones\",",
							"                \"profile\"",
							"            ],",
							"            \"additionalProperties\": false",
							"        }",
							"    },",
							"    \"required\": [ \"_links\" ],",
							"    \"additionalProperties\": false",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "Resources",
			"item": [
				{
					"name": "User",
					"item": [
						{
							"name": "Create a user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 201 Created status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(201);\r",
											"    pm.expect(response.status).to.equal(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"User item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.username).to.equal(pm.collectionVariables.get(\"Username\"));\r",
											"    pm.expect(jsonData.firstName).to.equal(pm.collectionVariables.get(\"First name\"));\r",
											"    pm.expect(jsonData.lastName).to.equal(pm.collectionVariables.get(\"Last name\"));\r",
											"    pm.expect(jsonData.email).to.equal(pm.collectionVariables.get(\"Email\"));\r",
											"    pm.expect(jsonData.status).to.equal(pm.collectionVariables.get(\"User status\"));\r",
											"    pm.expect(jsonData.passwordExpires).to.equal(pm.collectionVariables.get(\"Password expires\"));\r",
											"    pm.expect(jsonData.agent).to.be.null;\r",
											"    pm.expect(jsonData.phoneSwitch).to.be.null;\r",
											"    pm.expect(jsonData.overrideCode).to.be.null;\r",
											"\r",
											"    pm.collectionVariables.set(\"Created user\", jsonData._links.user.href);\r",
											"    pm.collectionVariables.set(\"Created user's timezone\", jsonData._links.timezone.href);\r",
											"    pm.collectionVariables.set(\"Created user's permissions\", jsonData._links.permissions.href);\r",
											"    pm.collectionVariables.set(\"Created user's position\", jsonData._links.position.href);\r",
											"    pm.collectionVariables.set(\"Created user's owned groups\", jsonData._links.ownedGroups.href);\r",
											"    pm.collectionVariables.set(\"Created user's groups\", jsonData._links.groups.href);\r",
											"    pm.collectionVariables.set(\"Created user's id\", jsonData.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"username\": \"{{Username}}\",\n    \"password\": \"{{Password}}\",\n    \"firstName\": \"{{First name}}\",\n    \"lastName\": \"{{Last name}}\",\n    \"email\": \"{{Email}}\",\n    \"status\": \"{{User status}}\",\n    \"passwordExpires\": \"{{Password expires}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Users endpoint}}",
									"host": [
										"{{Users endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "List all users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"User collection schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the created user\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const users = jsonData._embedded.users;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < users.length; i++) {\r",
											"        if (users[i]._links.user.href == pm.collectionVariables.get(\"Created user\")) {\r",
											"            pm.expect(users[i].id).to.equal(pm.collectionVariables.get(\"Created user's id\"));\r",
											"            pm.expect(users[i].username).to.equal(pm.collectionVariables.get(\"Username\"));\r",
											"            pm.expect(users[i].firstName).to.equal(pm.collectionVariables.get(\"First name\"));\r",
											"            pm.expect(users[i].lastName).to.equal(pm.collectionVariables.get(\"Last name\"));\r",
											"            pm.expect(users[i].email).to.equal(pm.collectionVariables.get(\"Email\"));\r",
											"            pm.expect(users[i].status).to.equal(pm.collectionVariables.get(\"User status\"));\r",
											"            pm.expect(users[i].passwordExpires).to.equal(pm.collectionVariables.get(\"Password expires\"));\r",
											"            pm.expect(users[i].agent).to.be.null;\r",
											"            pm.expect(users[i].phoneSwitch).to.be.null;\r",
											"            pm.expect(users[i].overrideCode).to.be.null;\r",
											"            pm.expect(users[i]._links.self.href).to.equal(pm.collectionVariables.get(\"Created user\"));\r",
											"            pm.expect(users[i]._links.user.href).to.equal(pm.collectionVariables.get(\"Created user\"));\r",
											"            pm.expect(users[i]._links.permissions.href).to.equal(pm.collectionVariables.get(\"Created user's permissions\"));\r",
											"            pm.expect(users[i]._links.timezone.href).to.equal(pm.collectionVariables.get(\"Created user's timezone\"));\r",
											"            pm.expect(users[i]._links.position.href).to.equal(pm.collectionVariables.get(\"Created user's position\"));\r",
											"            pm.expect(users[i]._links.ownedGroups.href).to.equal(pm.collectionVariables.get(\"Created user's owned groups\"));\r",
											"            pm.expect(users[i]._links.groups.href).to.equal(pm.collectionVariables.get(\"Created user's groups\"));\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Users endpoint}}",
									"host": [
										"{{Users endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve created user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"User item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.id).to.equal(pm.collectionVariables.get(\"Created user's id\"));\r",
											"    pm.expect(jsonData.username).to.equal(pm.collectionVariables.get(\"Username\"));\r",
											"    pm.expect(jsonData.firstName).to.equal(pm.collectionVariables.get(\"First name\"));\r",
											"    pm.expect(jsonData.lastName).to.equal(pm.collectionVariables.get(\"Last name\"));\r",
											"    pm.expect(jsonData.email).to.equal(pm.collectionVariables.get(\"Email\"));\r",
											"    pm.expect(jsonData.status).to.equal(pm.collectionVariables.get(\"User status\"));\r",
											"    pm.expect(jsonData.passwordExpires).to.equal(pm.collectionVariables.get(\"Password expires\"));\r",
											"    pm.expect(jsonData.agent).to.be.null;\r",
											"    pm.expect(jsonData.phoneSwitch).to.be.null;\r",
											"    pm.expect(jsonData.overrideCode).to.be.null;\r",
											"\r",
											"    pm.expect(jsonData._links.self.href).to.equal(pm.collectionVariables.get(\"Created user\"));\r",
											"    pm.expect(jsonData._links.user.href).to.equal(pm.collectionVariables.get(\"Created user\"));\r",
											"    pm.expect(jsonData._links.permissions.href).to.equal(pm.collectionVariables.get(\"Created user's permissions\"));\r",
											"    pm.expect(jsonData._links.timezone.href).to.equal(pm.collectionVariables.get(\"Created user's timezone\"));\r",
											"    pm.expect(jsonData._links.position.href).to.equal(pm.collectionVariables.get(\"Created user's position\"));\r",
											"    pm.expect(jsonData._links.ownedGroups.href).to.equal(pm.collectionVariables.get(\"Created user's owned groups\"));\r",
											"    pm.expect(jsonData._links.groups.href).to.equal(pm.collectionVariables.get(\"Created user's groups\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created user}}",
									"host": [
										"{{Created user}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve non existent user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Users endpoint}}/{{Incorrect user id}}",
									"host": [
										"{{Users endpoint}}"
									],
									"path": [
										"{{Incorrect user id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update user via PUT with partial data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"User item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.id).to.equal(pm.collectionVariables.get(\"Created user's id\"));\r",
											"    pm.expect(jsonData.username).to.equal(pm.collectionVariables.get(\"Username\"));\r",
											"    pm.expect(jsonData.firstName).to.be.null;\r",
											"    pm.expect(jsonData.lastName).to.equal(pm.collectionVariables.get(\"Modified last name\"));\r",
											"    pm.expect(jsonData.email).to.be.null;\r",
											"    pm.expect(jsonData.status).to.equal(\"A\");\r",
											"    pm.expect(jsonData.passwordExpires).to.equal(\"Y\");\r",
											"    pm.expect(jsonData.agent).to.be.null;\r",
											"    pm.expect(jsonData.phoneSwitch).to.be.null;\r",
											"    pm.expect(jsonData.overrideCode).to.be.null;\r",
											"\r",
											"    pm.expect(jsonData._links.self.href).to.equal(pm.collectionVariables.get(\"Created user\"));\r",
											"    pm.expect(jsonData._links.user.href).to.equal(pm.collectionVariables.get(\"Created user\"));\r",
											"    pm.expect(jsonData._links.timezone.href).to.equal(pm.collectionVariables.get(\"Created user's timezone\"));\r",
											"    pm.expect(jsonData._links.permissions.href).to.equal(pm.collectionVariables.get(\"Created user's permissions\"));\r",
											"    pm.expect(jsonData._links.position.href).to.equal(pm.collectionVariables.get(\"Created user's position\"));\r",
											"    pm.expect(jsonData._links.ownedGroups.href).to.equal(pm.collectionVariables.get(\"Created user's owned groups\"));\r",
											"    pm.expect(jsonData._links.groups.href).to.equal(pm.collectionVariables.get(\"Created user's groups\"));    \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"password\": \"{{Password}}\",\n    \"lastName\": \"{{Modified last name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created user}}",
									"host": [
										"{{Created user}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update user via PUT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"User item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.id).to.equal(pm.collectionVariables.get(\"Created user's id\"));\r",
											"    pm.expect(jsonData.username).to.equal(pm.collectionVariables.get(\"Username\"));\r",
											"    pm.expect(jsonData.firstName).to.equal(pm.collectionVariables.get(\"First name\"));\r",
											"    pm.expect(jsonData.lastName).to.equal(pm.collectionVariables.get(\"Last name\"));\r",
											"    pm.expect(jsonData.email).to.equal(pm.collectionVariables.get(\"Email\"));\r",
											"    pm.expect(jsonData.status).to.equal(pm.collectionVariables.get(\"User status\"));\r",
											"    pm.expect(jsonData.passwordExpires).to.equal(pm.collectionVariables.get(\"Password expires\"));\r",
											"    pm.expect(jsonData.agent).to.be.null;\r",
											"    pm.expect(jsonData.phoneSwitch).to.be.null;\r",
											"    pm.expect(jsonData.overrideCode).to.be.null;\r",
											"\r",
											"    pm.expect(jsonData._links.self.href).to.equal(pm.collectionVariables.get(\"Created user\"));\r",
											"    pm.expect(jsonData._links.user.href).to.equal(pm.collectionVariables.get(\"Created user\"));\r",
											"    pm.expect(jsonData._links.timezone.href).to.equal(pm.collectionVariables.get(\"Created user's timezone\"));\r",
											"    pm.expect(jsonData._links.permissions.href).to.equal(pm.collectionVariables.get(\"Created user's permissions\"));\r",
											"    pm.expect(jsonData._links.position.href).to.equal(pm.collectionVariables.get(\"Created user's position\"));\r",
											"    pm.expect(jsonData._links.ownedGroups.href).to.equal(pm.collectionVariables.get(\"Created user's owned groups\"));\r",
											"    pm.expect(jsonData._links.groups.href).to.equal(pm.collectionVariables.get(\"Created user's groups\"));    \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"username\": \"{{Username}}\",\n    \"password\": \"{{Password}}\",\n    \"firstName\": \"{{First name}}\",\n    \"lastName\": \"{{Last name}}\",\n    \"email\": \"{{Email}}\",\n    \"status\": \"{{User status}}\",\n    \"passwordExpires\": \"{{Password expires}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created user}}",
									"host": [
										"{{Created user}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update non existent user via PUT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 201 Created status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(201);\r",
											"    pm.expect(response.status).to.equal(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"User item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.username).to.equal(pm.collectionVariables.get(\"Modified username\"));\r",
											"    pm.expect(jsonData.firstName).to.equal(pm.collectionVariables.get(\"First name\"));\r",
											"    pm.expect(jsonData.lastName).to.equal(pm.collectionVariables.get(\"Modified last name\"));\r",
											"    pm.expect(jsonData.email).to.equal(pm.collectionVariables.get(\"Email\"));\r",
											"    pm.expect(jsonData.status).to.equal(pm.collectionVariables.get(\"User status\"));\r",
											"    pm.expect(jsonData.passwordExpires).to.equal(pm.collectionVariables.get(\"Password expires\"));\r",
											"    pm.expect(jsonData.agent).to.be.null;\r",
											"    pm.expect(jsonData.phoneSwitch).to.be.null;\r",
											"    pm.expect(jsonData.overrideCode).to.be.null;\r",
											"\r",
											"    pm.collectionVariables.set(\"Second created user\", jsonData._links.user.href);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"username\": \"{{Modified username}}\",\n    \"password\": \"{{Password}}\",\n    \"firstName\": \"{{First name}}\",\n    \"lastName\": \"{{Modified last name}}\",\n    \"email\": \"{{Email}}\",\n    \"status\": \"{{User status}}\",\n    \"passwordExpires\": \"{{Password expires}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Users endpoint}}/{{Incorrect user id}}",
									"host": [
										"{{Users endpoint}}"
									],
									"path": [
										"{{Incorrect user id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete second created user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Second created user}}",
									"host": [
										"{{Second created user}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update user via PATCH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"User item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.id).to.equal(pm.collectionVariables.get(\"Created user's id\"));\r",
											"    pm.expect(jsonData.username).to.equal(pm.collectionVariables.get(\"Username\"));\r",
											"    pm.expect(jsonData.firstName).to.equal(pm.collectionVariables.get(\"First name\"));\r",
											"    pm.expect(jsonData.lastName).to.equal(pm.collectionVariables.get(\"Modified last name\"));\r",
											"    pm.expect(jsonData.email).to.equal(pm.collectionVariables.get(\"Email\"));\r",
											"    pm.expect(jsonData.status).to.equal(pm.collectionVariables.get(\"User status\"));\r",
											"    pm.expect(jsonData.passwordExpires).to.equal(pm.collectionVariables.get(\"Password expires\"));\r",
											"    pm.expect(jsonData.agent).to.be.null;\r",
											"    pm.expect(jsonData.phoneSwitch).to.be.null;\r",
											"    pm.expect(jsonData.overrideCode).to.be.null;\r",
											"\r",
											"    pm.expect(jsonData._links.self.href).to.equal(pm.collectionVariables.get(\"Created user\"));\r",
											"    pm.expect(jsonData._links.user.href).to.equal(pm.collectionVariables.get(\"Created user\"));\r",
											"    pm.expect(jsonData._links.permissions.href).to.equal(pm.collectionVariables.get(\"Created user's permissions\"));\r",
											"    pm.expect(jsonData._links.timezone.href).to.equal(pm.collectionVariables.get(\"Created user's timezone\"));\r",
											"    pm.expect(jsonData._links.position.href).to.equal(pm.collectionVariables.get(\"Created user's position\"));\r",
											"    pm.expect(jsonData._links.ownedGroups.href).to.equal(pm.collectionVariables.get(\"Created user's owned groups\"));\r",
											"    pm.expect(jsonData._links.groups.href).to.equal(pm.collectionVariables.get(\"Created user's groups\"));    \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"lastName\": \"{{Modified last name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created user}}",
									"host": [
										"{{Created user}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update non existent user via PATCH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n\t\"lastName\": \"{{Last name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Users endpoint}}/{{Incorrect user id}}",
									"host": [
										"{{Users endpoint}}"
									],
									"path": [
										"{{Incorrect user id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "List all user search options",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.eql(200);\r",
											"    pm.expect(response.status).to.eql(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"User search root schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Users endpoint}}/search",
									"host": [
										"{{Users endpoint}}"
									],
									"path": [
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve user by full name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"User search term schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the created user\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const users = jsonData._embedded.users;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < users.length; i++) {\r",
											"        if (users[i]._links.user.href == pm.collectionVariables.get(\"Created user\")) {\r",
											"            pm.expect(users[i].id).to.equal(pm.collectionVariables.get(\"Created user's id\"));\r",
											"            pm.expect(users[i].username).to.equal(pm.collectionVariables.get(\"Username\"));\r",
											"            pm.expect(users[i].firstName).to.equal(pm.collectionVariables.get(\"First name\"));\r",
											"            pm.expect(users[i].lastName).to.equal(pm.collectionVariables.get(\"Modified last name\"));\r",
											"            pm.expect(users[i].email).to.equal(pm.collectionVariables.get(\"Email\"));\r",
											"            pm.expect(users[i].status).to.equal(pm.collectionVariables.get(\"User status\"));\r",
											"            pm.expect(users[i].passwordExpires).to.equal(pm.collectionVariables.get(\"Password expires\"));\r",
											"            pm.expect(users[i].agent).to.be.null;\r",
											"            pm.expect(users[i].phoneSwitch).to.be.null;\r",
											"            pm.expect(users[i].overrideCode).to.be.null;\r",
											"            pm.expect(users[i]._links.self.href).to.equal(pm.collectionVariables.get(\"Created user\"));\r",
											"            pm.expect(users[i]._links.user.href).to.equal(pm.collectionVariables.get(\"Created user\"));\r",
											"            pm.expect(users[i]._links.permissions.href).to.equal(pm.collectionVariables.get(\"Created user's permissions\"));\r",
											"            pm.expect(users[i]._links.timezone.href).to.equal(pm.collectionVariables.get(\"Created user's timezone\"));\r",
											"            pm.expect(users[i]._links.position.href).to.equal(pm.collectionVariables.get(\"Created user's position\"));\r",
											"            pm.expect(users[i]._links.ownedGroups.href).to.equal(pm.collectionVariables.get(\"Created user's owned groups\"));\r",
											"            pm.expect(users[i]._links.groups.href).to.equal(pm.collectionVariables.get(\"Created user's groups\"));\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Users endpoint}}/search/byFullName?firstName={{First name}}&lastName={{Modified last name}}",
									"host": [
										"{{Users endpoint}}"
									],
									"path": [
										"search",
										"byFullName"
									],
									"query": [
										{
											"key": "firstName",
											"value": "{{First name}}"
										},
										{
											"key": "lastName",
											"value": "{{Modified last name}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve user by username",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"User search term schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the created user\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const users = jsonData._embedded.users;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < users.length; i++) {\r",
											"        if (users[i]._links.user.href == pm.collectionVariables.get(\"Created user\")) {\r",
											"            pm.expect(users[i].id).to.equal(pm.collectionVariables.get(\"Created user's id\"));\r",
											"            pm.expect(users[i].username).to.equal(pm.collectionVariables.get(\"Username\"));\r",
											"            pm.expect(users[i].firstName).to.equal(pm.collectionVariables.get(\"First name\"));\r",
											"            pm.expect(users[i].lastName).to.equal(pm.collectionVariables.get(\"Modified last name\"));\r",
											"            pm.expect(users[i].email).to.equal(pm.collectionVariables.get(\"Email\"));\r",
											"            pm.expect(users[i].status).to.equal(pm.collectionVariables.get(\"User status\"));\r",
											"            pm.expect(users[i].passwordExpires).to.equal(pm.collectionVariables.get(\"Password expires\"));\r",
											"            pm.expect(users[i].agent).to.be.null;\r",
											"            pm.expect(users[i].phoneSwitch).to.be.null;\r",
											"            pm.expect(users[i].overrideCode).to.be.null;\r",
											"            pm.expect(users[i]._links.self.href).to.equal(pm.collectionVariables.get(\"Created user\"));\r",
											"            pm.expect(users[i]._links.user.href).to.equal(pm.collectionVariables.get(\"Created user\"));\r",
											"            pm.expect(users[i]._links.permissions.href).to.equal(pm.collectionVariables.get(\"Created user's permissions\"));\r",
											"            pm.expect(users[i]._links.timezone.href).to.equal(pm.collectionVariables.get(\"Created user's timezone\"));\r",
											"            pm.expect(users[i]._links.position.href).to.equal(pm.collectionVariables.get(\"Created user's position\"));\r",
											"            pm.expect(users[i]._links.ownedGroups.href).to.equal(pm.collectionVariables.get(\"Created user's owned groups\"));\r",
											"            pm.expect(users[i]._links.groups.href).to.equal(pm.collectionVariables.get(\"Created user's groups\"));\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Users endpoint}}/search/byUsername?username={{Username}}",
									"host": [
										"{{Users endpoint}}"
									],
									"path": [
										"search",
										"byUsername"
									],
									"query": [
										{
											"key": "username",
											"value": "{{Username}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete created user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Created user}}",
									"host": [
										"{{Created user}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete non existent user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Second created user}}",
									"host": [
										"{{Second created user}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve deleted user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created user}}",
									"host": [
										"{{Created user}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "List all users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"User collection schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain the created user\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const users = jsonData._embedded.users;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < users.length; i++) {\r",
											"        if (users[i]._links.self.href == pm.collectionVariables.get(\"Created user\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Users endpoint}}",
									"host": [
										"{{Users endpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.collectionVariables.set(\"User item schema\", {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"id\": { \"type\": \"integer\" },",
									"        \"username\": { \"type\": \"string\" },",
									"        \"firstName\": { \"type\": [ \"string\", \"null\" ] },",
									"        \"lastName\": { \"type\": [ \"string\", \"null\" ] },",
									"        \"email\": { \"type\": [ \"string\", \"null\" ] },",
									"        \"status\": { \"type\": \"string\", \"enum\": [ \"A\", \"S\", \"P\", \"L\", \"X\" ] },",
									"        \"passwordExpires\": { \"type\": \"string\", \"enum\": [ \"Y\", \"N\" ] },",
									"        \"agent\": { \"type\": [ \"string\", \"null\" ] },",
									"        \"phoneSwitch\": { \"type\": [ \"string\", \"null\" ] },",
									"        \"overrideCode\": { \"type\": [ \"string\", \"null\" ] },",
									"        \"_links\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"self\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"user\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"timezone\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"permissions\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"ownedGroups\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },       ",
									"                \"groups\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },                ",
									"                \"position\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"            },",
									"            \"required\": [",
									"                \"self\",",
									"                \"user\",",
									"                \"timezone\",",
									"                \"permissions\",",
									"                \"groups\",",
									"                \"position\"",
									"            ],",
									"            \"additionalProperties\": false",
									"        }",
									"    },",
									"    \"required\": [",
									"        \"id\",",
									"        \"username\",",
									"        \"firstName\",",
									"        \"lastName\",",
									"        \"email\",",
									"        \"status\",",
									"        \"passwordExpires\",",
									"        \"agent\",",
									"        \"phoneSwitch\",",
									"        \"overrideCode\",",
									"        \"_links\"",
									"    ],",
									"    \"additionalProperties\": false",
									"});",
									"",
									"pm.collectionVariables.set(\"User collection schema\", {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"_embedded\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"users\": {",
									"                    \"type\": \"array\",",
									"                    \"items\": pm.collectionVariables.get(\"User item schema\"),",
									"                    \"uniqueItems\": true",
									"                }",
									"            },",
									"            \"required\": [ \"users\" ],",
									"            \"additionalProperties\": false",
									"        },",
									"        \"_links\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"self\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"profile\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"search\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                }",
									"            },",
									"            \"required\": [ \"self\", \"profile\", \"search\" ],",
									"            \"additionalProperties\": false",
									"        },",
									"    },",
									"    \"required\": [ \"_embedded\", \"_links\" ],",
									"    \"additionalProperties\": false",
									"});",
									"",
									"pm.collectionVariables.set(\"User search root schema\", {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"_links\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"byFullName\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" },",
									"                        \"templated\": { \"type\": \"boolean\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"byUsername\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" },",
									"                        \"templated\": { \"type\": \"boolean\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"self\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" },",
									"                        \"templated\": { \"type\": \"boolean\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                }",
									"            },",
									"            \"required\": [ \"byFullName\", \"byUsername\", \"self\" ],",
									"            \"additionalProperties\": false",
									"        },",
									"    },",
									"    \"required\": [ \"_links\" ],",
									"    \"additionalProperties\": false",
									"});",
									"",
									"pm.collectionVariables.set(\"User search term schema\", {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"_embedded\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"users\": {",
									"                    \"type\": \"array\",",
									"                    \"items\": pm.collectionVariables.get(\"User item schema\"),",
									"                    \"uniqueItems\": true",
									"                }",
									"            },",
									"            \"required\": [ \"users\" ],",
									"            \"additionalProperties\": false",
									"        },",
									"        \"_links\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"self\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                }",
									"            },",
									"            \"required\": [ \"self\" ],",
									"            \"additionalProperties\": false",
									"        },",
									"    },",
									"    \"required\": [ \"_embedded\", \"_links\" ],",
									"    \"additionalProperties\": false",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Group",
					"item": [
						{
							"name": "Create a group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 201 Created status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(201);\r",
											"    pm.expect(response.status).to.equal(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Group item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Group name\"));\r",
											"\r",
											"    pm.collectionVariables.set(\"Created group\", jsonData._links.group.href);\r",
											"    pm.collectionVariables.set(\"Created group's owner\", jsonData._links.owner.href);\r",
											"    pm.collectionVariables.set(\"Created group's positions\", jsonData._links.positions.href);\r",
											"    pm.collectionVariables.set(\"Created group's permissions\", jsonData._links.permissions.href);\r",
											"    pm.collectionVariables.set(\"Created group's users\", jsonData._links.users.href);\r",
											"    pm.collectionVariables.set(\"Created group's id\", jsonData.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Group name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Groups endpoint}}",
									"host": [
										"{{Groups endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "List all groups",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Group collection schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Created group\")) {\r",
											"            pm.expect(groups[i].id).to.equal(pm.collectionVariables.get(\"Created group's id\"));\r",
											"            pm.expect(groups[i].name).to.equal(pm.collectionVariables.get(\"Group name\"));\r",
											"            pm.expect(groups[i]._links.self.href).to.equal(pm.collectionVariables.get(\"Created group\"));\r",
											"            pm.expect(groups[i]._links.group.href).to.equal(pm.collectionVariables.get(\"Created group\"));\r",
											"            pm.expect(groups[i]._links.owner.href).to.equal(pm.collectionVariables.get(\"Created group's owner\"));\r",
											"            pm.expect(groups[i]._links.positions.href).to.equal(pm.collectionVariables.get(\"Created group's positions\"));\r",
											"            pm.expect(groups[i]._links.permissions.href).to.equal(pm.collectionVariables.get(\"Created group's permissions\"));\r",
											"            pm.expect(groups[i]._links.users.href).to.equal(pm.collectionVariables.get(\"Created group's users\"));\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Groups endpoint}}",
									"host": [
										"{{Groups endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve created group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Group item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.id).to.equal(pm.collectionVariables.get(\"Created group's id\"));\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Group name\"));\r",
											"\r",
											"    pm.expect(jsonData._links.self.href).to.equal(pm.collectionVariables.get(\"Created group\"));\r",
											"    pm.expect(jsonData._links.group.href).to.equal(pm.collectionVariables.get(\"Created group\"));\r",
											"    pm.expect(jsonData._links.owner.href).to.equal(pm.collectionVariables.get(\"Created group's owner\"));\r",
											"    pm.expect(jsonData._links.positions.href).to.equal(pm.collectionVariables.get(\"Created group's positions\"));\r",
											"    pm.expect(jsonData._links.permissions.href).to.equal(pm.collectionVariables.get(\"Created group's permissions\"));\r",
											"    pm.expect(jsonData._links.users.href).to.equal(pm.collectionVariables.get(\"Created group's users\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created group}}",
									"host": [
										"{{Created group}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve non existent group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Groups endpoint}}/{{Incorrect group id}}",
									"host": [
										"{{Groups endpoint}}"
									],
									"path": [
										"{{Incorrect group id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update group via PUT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Group item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.id).to.equal(pm.collectionVariables.get(\"Created group's id\"));\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Modified group name\"));\r",
											"\r",
											"    pm.expect(jsonData._links.self.href).to.equal(pm.collectionVariables.get(\"Created group\"));\r",
											"    pm.expect(jsonData._links.group.href).to.equal(pm.collectionVariables.get(\"Created group\"));\r",
											"    pm.expect(jsonData._links.owner.href).to.equal(pm.collectionVariables.get(\"Created group's owner\"));\r",
											"    pm.expect(jsonData._links.positions.href).to.equal(pm.collectionVariables.get(\"Created group's positions\"));\r",
											"    pm.expect(jsonData._links.permissions.href).to.equal(pm.collectionVariables.get(\"Created group's permissions\"));\r",
											"    pm.expect(jsonData._links.users.href).to.equal(pm.collectionVariables.get(\"Created group's users\"));    \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Modified group name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created group}}",
									"host": [
										"{{Created group}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update non existent group via PUT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 201 Created status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(201);\r",
											"    pm.expect(response.status).to.equal(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Group item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Group name\"));\r",
											"\r",
											"    pm.collectionVariables.set(\"Second created group\", jsonData._links.group.href);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Group name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Groups endpoint}}/{{Incorrect group id}}",
									"host": [
										"{{Groups endpoint}}"
									],
									"path": [
										"{{Incorrect group id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete second created group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Second created group}}",
									"host": [
										"{{Second created group}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update group via PATCH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Group item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.id).to.equal(pm.collectionVariables.get(\"Created group's id\"));\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Group name\"));\r",
											"\r",
											"    pm.expect(jsonData._links.self.href).to.equal(pm.collectionVariables.get(\"Created group\"));\r",
											"    pm.expect(jsonData._links.group.href).to.equal(pm.collectionVariables.get(\"Created group\"));\r",
											"    pm.expect(jsonData._links.owner.href).to.equal(pm.collectionVariables.get(\"Created group's owner\"));\r",
											"    pm.expect(jsonData._links.positions.href).to.equal(pm.collectionVariables.get(\"Created group's positions\"));\r",
											"    pm.expect(jsonData._links.permissions.href).to.equal(pm.collectionVariables.get(\"Created group's permissions\"));\r",
											"    pm.expect(jsonData._links.users.href).to.equal(pm.collectionVariables.get(\"Created group's users\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Group name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created group}}",
									"host": [
										"{{Created group}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update non existent group via PATCH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n\t\"name\": \"{{Modified group name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Groups endpoint}}/{{Incorrect group id}}",
									"host": [
										"{{Groups endpoint}}"
									],
									"path": [
										"{{Incorrect group id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete created group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Created group}}",
									"host": [
										"{{Created group}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete non existent group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Second created group}}",
									"host": [
										"{{Second created group}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve deleted group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created group}}",
									"host": [
										"{{Created group}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "List all groups",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Group collection schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain the created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.self.href == pm.collectionVariables.get(\"Created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Groups endpoint}}",
									"host": [
										"{{Groups endpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.collectionVariables.set(\"Group item schema\", {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"id\": { \"type\": \"integer\" },",
									"        \"name\": { \"type\": \"string\" },",
									"        \"_links\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"self\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"group\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"owner\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"users\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"permissions\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"positions\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                }",
									"            },",
									"            \"required\": [",
									"                \"self\",",
									"                \"group\",",
									"                \"owner\",",
									"                \"users\",",
									"                \"permissions\",",
									"                \"positions\"",
									"            ],",
									"            \"additionalProperties\": false",
									"        }",
									"    },",
									"    \"required\": [",
									"        \"id\",",
									"        \"name\",",
									"        \"_links\"",
									"    ],",
									"    \"additionalProperties\": false",
									"});",
									"",
									"pm.collectionVariables.set(\"Group collection schema\", {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"_embedded\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"groups\": {",
									"                    \"type\": \"array\",",
									"                    \"items\": pm.collectionVariables.get(\"Group item schema\"),",
									"                    \"uniqueItems\": true",
									"                }",
									"            },",
									"            \"required\": [ \"groups\" ],",
									"            \"additionalProperties\": false",
									"        },",
									"        \"_links\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"self\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"profile\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                }",
									"            },",
									"            \"required\": [ \"self\", \"profile\" ],",
									"            \"additionalProperties\": false",
									"        },",
									"    },",
									"    \"required\": [ \"_embedded\", \"_links\" ],",
									"    \"additionalProperties\": false",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Permission Type",
					"item": [
						{
							"name": "Create a permission type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 201 Created status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(201);\r",
											"    pm.expect(response.status).to.equal(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Permission type item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Permission type name\"));\r",
											"    pm.expect(jsonData.description).to.equal(pm.collectionVariables.get(\"Permission type description\"));\r",
											"    pm.expect(jsonData.displayOrder).to.equal(parseInt(pm.collectionVariables.get(\"Display order\")));\r",
											"\r",
											"    pm.collectionVariables.set(\"Created permission type\", jsonData._links.permissionType.href);\r",
											"    pm.collectionVariables.set(\"Created permission type's permissions\", jsonData._links.permissions.href);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Permission type name}}\",\n    \"description\": \"{{Permission type description}}\",\n    \"displayOrder\": {{Display order}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Permission types endpoint}}",
									"host": [
										"{{Permission types endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "List all permission types",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Permission type collection schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the created permission type\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const permissionTypes = jsonData._embedded.permissionTypes;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < permissionTypes.length; i++) {\r",
											"        if (permissionTypes[i]._links.permissionType.href == pm.collectionVariables.get(\"Created permission type\")) {\r",
											"            pm.expect(permissionTypes[i].name.trimEnd()).to.equal(pm.collectionVariables.get(\"Permission type name\"));\r",
											"            pm.expect(permissionTypes[i].description).to.equal(pm.collectionVariables.get(\"Permission type description\"));\r",
											"            pm.expect(permissionTypes[i].displayOrder).to.equal(parseInt(pm.collectionVariables.get(\"Display order\")));\r",
											"            pm.expect(permissionTypes[i]._links.self.href).to.equal(pm.collectionVariables.get(\"Created permission type\"));\r",
											"            pm.expect(permissionTypes[i]._links.permissionType.href).to.equal(pm.collectionVariables.get(\"Created permission type\"));\r",
											"            pm.expect(permissionTypes[i]._links.permissions.href).to.equal(pm.collectionVariables.get(\"Created permission type's permissions\"));\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Permission types endpoint}}",
									"host": [
										"{{Permission types endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve created permission type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Permission type item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Permission type name\"));\r",
											"    pm.expect(jsonData.description).to.equal(pm.collectionVariables.get(\"Permission type description\"));\r",
											"    pm.expect(jsonData.displayOrder).to.equal(parseInt(pm.collectionVariables.get(\"Display order\")));\r",
											"\r",
											"    pm.expect(jsonData._links.self.href).to.equal(pm.collectionVariables.get(\"Created permission type\"));\r",
											"    pm.expect(jsonData._links.permissionType.href).to.equal(pm.collectionVariables.get(\"Created permission type\"));\r",
											"    pm.expect(jsonData._links.permissions.href).to.equal(pm.collectionVariables.get(\"Created permission type's permissions\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created permission type}}",
									"host": [
										"{{Created permission type}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve non existent permission type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Permission types endpoint}}/{{Incorrect permission type id}}",
									"host": [
										"{{Permission types endpoint}}"
									],
									"path": [
										"{{Incorrect permission type id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update permission type via PUT with partial data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Permission type item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Permission type name\"));\r",
											"    pm.expect(jsonData.description).to.equal(pm.collectionVariables.get(\"Modified permission type description\"));\r",
											"    pm.expect(jsonData.displayOrder).to.be.null;\r",
											"\r",
											"    pm.expect(jsonData._links.self.href).to.equal(pm.collectionVariables.get(\"Created permission type\"));\r",
											"    pm.expect(jsonData._links.permissionType.href).to.equal(pm.collectionVariables.get(\"Created permission type\"));\r",
											"    pm.expect(jsonData._links.permissions.href).to.equal(pm.collectionVariables.get(\"Created permission type's permissions\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"description\": \"{{Modified permission type description}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created permission type}}",
									"host": [
										"{{Created permission type}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update permission type via PUT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Permission type item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Permission type name\"));\r",
											"    pm.expect(jsonData.description).to.equal(pm.collectionVariables.get(\"Permission type description\"));\r",
											"    pm.expect(jsonData.displayOrder).to.equal(parseInt(pm.collectionVariables.get(\"Display order\")));\r",
											"\r",
											"    pm.expect(jsonData._links.self.href).to.equal(pm.collectionVariables.get(\"Created permission type\"));\r",
											"    pm.expect(jsonData._links.permissionType.href).to.equal(pm.collectionVariables.get(\"Created permission type\"));\r",
											"    pm.expect(jsonData._links.permissions.href).to.equal(pm.collectionVariables.get(\"Created permission type's permissions\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Permission type name}}\",\n    \"description\": \"{{Permission type description}}\",\n    \"displayOrder\": {{Display order}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created permission type}}",
									"host": [
										"{{Created permission type}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update non existent permission type via PUT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 201 Created status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(201);\r",
											"    pm.expect(response.status).to.equal(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Permission type item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Incorrect permission type id\"));\r",
											"    pm.expect(jsonData.description).to.equal(pm.collectionVariables.get(\"Modified permission type description\"));\r",
											"    pm.expect(jsonData.displayOrder).to.equal(parseInt(pm.collectionVariables.get(\"Display order\")));\r",
											"\r",
											"    pm.collectionVariables.set(\"Second created permission type\", jsonData._links.permissionType.href);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Permission type name}}\",\n    \"description\": \"{{Modified permission type description}}\",\n    \"displayOrder\": {{Display order}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Permission types endpoint}}/{{Incorrect permission type id}}",
									"host": [
										"{{Permission types endpoint}}"
									],
									"path": [
										"{{Incorrect permission type id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete second created permission type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Second created permission type}}",
									"host": [
										"{{Second created permission type}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update permission type via PATCH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Permission type item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Permission type name\"));\r",
											"    pm.expect(jsonData.description).to.equal(pm.collectionVariables.get(\"Modified permission type description\"));\r",
											"    pm.expect(jsonData.displayOrder).to.equal(parseInt(pm.collectionVariables.get(\"Display order\")));\r",
											"\r",
											"    pm.expect(jsonData._links.self.href).to.equal(pm.collectionVariables.get(\"Created permission type\"));\r",
											"    pm.expect(jsonData._links.permissionType.href).to.equal(pm.collectionVariables.get(\"Created permission type\"));\r",
											"    pm.expect(jsonData._links.permissions.href).to.equal(pm.collectionVariables.get(\"Created permission type's permissions\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"description\": \"{{Modified permission type description}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created permission type}}",
									"host": [
										"{{Created permission type}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update non existent permission type via PATCH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"description\": \"{{Permission type description}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Permission types endpoint}}/{{Incorrect permission type id}}",
									"host": [
										"{{Permission types endpoint}}"
									],
									"path": [
										"{{Incorrect permission type id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete created permission type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Created permission type}}",
									"host": [
										"{{Created permission type}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete non existent permission type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Second created permission type}}",
									"host": [
										"{{Second created permission type}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve deleted permission type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created permission type}}",
									"host": [
										"{{Created permission type}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "List all permission types",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Permission type collection schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain the created permission type\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const permissionTypes = jsonData._embedded.permissionTypes;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < permissionTypes.length; i++) {\r",
											"        if (permissionTypes[i]._links.self.href == pm.collectionVariables.get(\"Created permission type\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Permission types endpoint}}",
									"host": [
										"{{Permission types endpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.collectionVariables.set(\"Permission type item schema\", {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"name\": { \"type\": \"string\" },",
									"        \"description\": { \"type\": \"string\" },",
									"        \"displayOrder\": { \"type\": [ \"number\", \"null\" ] },",
									"        \"_links\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"self\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"permissionType\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"permissions\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                }",
									"            },",
									"            \"required\": [",
									"                \"self\",",
									"                \"permissionType\",",
									"                \"permissions\"",
									"            ],",
									"            \"additionalProperties\": false",
									"        }",
									"    },",
									"    \"required\": [",
									"        \"name\",",
									"        \"description\",",
									"        \"displayOrder\",",
									"        \"_links\"",
									"    ],",
									"    \"additionalProperties\": false",
									"});",
									"",
									"pm.collectionVariables.set(\"Permission type collection schema\", {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"_embedded\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"permissionTypes\": {",
									"                    \"type\": \"array\",",
									"                    \"items\": pm.collectionVariables.get(\"Permission type item schema\"),",
									"                    \"uniqueItems\": true",
									"                }",
									"            },",
									"            \"required\": [ \"permissionTypes\" ],",
									"            \"additionalProperties\": false",
									"        },",
									"        \"_links\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"self\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"profile\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                }",
									"            },",
									"            \"required\": [ \"self\", \"profile\" ],",
									"            \"additionalProperties\": false",
									"        },",
									"    },",
									"    \"required\": [ \"_embedded\", \"_links\" ],",
									"    \"additionalProperties\": false",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Permission",
					"item": [
						{
							"name": "Create a permission",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 201 Created status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(201);\r",
											"    pm.expect(response.status).to.equal(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Permission item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Permission name\"));\r",
											"    pm.expect(jsonData.description).to.equal(pm.collectionVariables.get(\"Permission description\"));\r",
											"    pm.expect(jsonData.displayOrder).to.equal(parseInt(pm.collectionVariables.get(\"Display order\")));\r",
											"\r",
											"    pm.collectionVariables.set(\"Created permission\", jsonData._links.permission.href);\r",
											"    pm.collectionVariables.set(\"Created permission's type\", jsonData._links.type.href);\r",
											"    pm.collectionVariables.set(\"Created permission's users\", jsonData._links.users.href);\r",
											"    pm.collectionVariables.set(\"Created permission's groups\", jsonData._links.groups.href);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Permission name}}\",\n    \"description\": \"{{Permission description}}\",\n    \"displayOrder\": {{Display order}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Permissions endpoint}}",
									"host": [
										"{{Permissions endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "List all permissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Permission collection schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the created permission\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const permissions = jsonData._embedded.permissions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < permissions.length; i++) {\r",
											"        if (permissions[i]._links.permission.href == pm.collectionVariables.get(\"Created permission\")) {\r",
											"            pm.expect(permissions[i].name).to.equal(pm.collectionVariables.get(\"Permission name\"));\r",
											"            pm.expect(permissions[i].description).to.equal(pm.collectionVariables.get(\"Permission description\"));\r",
											"            pm.expect(permissions[i].displayOrder).to.equal(parseInt(pm.collectionVariables.get(\"Display order\")));\r",
											"            pm.expect(permissions[i]._links.self.href).to.equal(pm.collectionVariables.get(\"Created permission\"));\r",
											"            pm.expect(permissions[i]._links.permission.href).to.equal(pm.collectionVariables.get(\"Created permission\"));\r",
											"            pm.expect(permissions[i]._links.type.href).to.equal(pm.collectionVariables.get(\"Created permission's type\"));\r",
											"            pm.expect(permissions[i]._links.users.href).to.equal(pm.collectionVariables.get(\"Created permission's users\"));\r",
											"            pm.expect(permissions[i]._links.groups.href).to.equal(pm.collectionVariables.get(\"Created permission's groups\"));\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Permissions endpoint}}",
									"host": [
										"{{Permissions endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve created permission",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Permission item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Permission name\"));\r",
											"    pm.expect(jsonData.description).to.equal(pm.collectionVariables.get(\"Permission description\"));\r",
											"    pm.expect(jsonData.displayOrder).to.equal(parseInt(pm.collectionVariables.get(\"Display order\")));\r",
											"\r",
											"    pm.expect(jsonData._links.self.href).to.equal(pm.collectionVariables.get(\"Created permission\"));\r",
											"    pm.expect(jsonData._links.permission.href).to.equal(pm.collectionVariables.get(\"Created permission\"));\r",
											"    pm.expect(jsonData._links.type.href).to.equal(pm.collectionVariables.get(\"Created permission's type\"));\r",
											"    pm.expect(jsonData._links.users.href).to.equal(pm.collectionVariables.get(\"Created permission's users\"));\r",
											"    pm.expect(jsonData._links.groups.href).to.equal(pm.collectionVariables.get(\"Created permission's groups\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created permission}}",
									"host": [
										"{{Created permission}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve non existent permission",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Permissions endpoint}}/{{Incorrect permission id}}",
									"host": [
										"{{Permissions endpoint}}"
									],
									"path": [
										"{{Incorrect permission id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update permission via PUT with partial data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Permission item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Permission name\"));\r",
											"    pm.expect(jsonData.description).to.equal(pm.collectionVariables.get(\"Modified permission description\"));\r",
											"    pm.expect(jsonData.displayOrder).to.be.null;\r",
											"\r",
											"    pm.expect(jsonData._links.self.href).to.equal(pm.collectionVariables.get(\"Created permission\"));\r",
											"    pm.expect(jsonData._links.permission.href).to.equal(pm.collectionVariables.get(\"Created permission\"));\r",
											"    pm.expect(jsonData._links.type.href).to.equal(pm.collectionVariables.get(\"Created permission's type\"));\r",
											"    pm.expect(jsonData._links.users.href).to.equal(pm.collectionVariables.get(\"Created permission's users\"));\r",
											"    pm.expect(jsonData._links.groups.href).to.equal(pm.collectionVariables.get(\"Created permission's groups\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"description\": \"{{Modified permission description}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created permission}}",
									"host": [
										"{{Created permission}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update permission via PUT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Permission item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Permission name\"));\r",
											"    pm.expect(jsonData.description).to.equal(pm.collectionVariables.get(\"Permission description\"));\r",
											"    pm.expect(jsonData.displayOrder).to.equal(parseInt(pm.collectionVariables.get(\"Display order\")));\r",
											"\r",
											"    pm.expect(jsonData._links.self.href).to.equal(pm.collectionVariables.get(\"Created permission\"));\r",
											"    pm.expect(jsonData._links.permission.href).to.equal(pm.collectionVariables.get(\"Created permission\"));\r",
											"    pm.expect(jsonData._links.type.href).to.equal(pm.collectionVariables.get(\"Created permission's type\"));\r",
											"    pm.expect(jsonData._links.users.href).to.equal(pm.collectionVariables.get(\"Created permission's users\"));\r",
											"    pm.expect(jsonData._links.groups.href).to.equal(pm.collectionVariables.get(\"Created permission's groups\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Permission name}}\",\n    \"description\": \"{{Permission description}}\",\n    \"displayOrder\": {{Display order}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created permission}}",
									"host": [
										"{{Created permission}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update non existent permission via PUT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 201 Created status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(201);\r",
											"    pm.expect(response.status).to.equal(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Permission item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Incorrect permission id\"));\r",
											"    pm.expect(jsonData.description).to.equal(pm.collectionVariables.get(\"Modified permission description\"));\r",
											"    pm.expect(jsonData.displayOrder).to.equal(parseInt(pm.collectionVariables.get(\"Display order\")));\r",
											"\r",
											"    pm.collectionVariables.set(\"Second created permission\", jsonData._links.permission.href);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Permission name}}\",\n    \"description\": \"{{Modified permission description}}\",\n    \"displayOrder\": {{Display order}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Permissions endpoint}}/{{Incorrect permission id}}",
									"host": [
										"{{Permissions endpoint}}"
									],
									"path": [
										"{{Incorrect permission id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete second created permission",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Second created permission}}",
									"host": [
										"{{Second created permission}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update permission via PATCH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Permission item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Permission name\"));\r",
											"    pm.expect(jsonData.description).to.equal(pm.collectionVariables.get(\"Modified permission description\"));\r",
											"    pm.expect(jsonData.displayOrder).to.equal(parseInt(pm.collectionVariables.get(\"Display order\")));\r",
											"\r",
											"    pm.expect(jsonData._links.self.href).to.equal(pm.collectionVariables.get(\"Created permission\"));\r",
											"    pm.expect(jsonData._links.permission.href).to.equal(pm.collectionVariables.get(\"Created permission\"));\r",
											"    pm.expect(jsonData._links.type.href).to.equal(pm.collectionVariables.get(\"Created permission's type\"));\r",
											"    pm.expect(jsonData._links.users.href).to.equal(pm.collectionVariables.get(\"Created permission's users\"));\r",
											"    pm.expect(jsonData._links.groups.href).to.equal(pm.collectionVariables.get(\"Created permission's groups\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"description\": \"{{Modified permission description}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created permission}}",
									"host": [
										"{{Created permission}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update non existent permission via PATCH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"description\": \"{{Permission description}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Permissions endpoint}}/{{Incorrect permission id}}",
									"host": [
										"{{Permissions endpoint}}"
									],
									"path": [
										"{{Incorrect permission id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete created permission",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Created permission}}",
									"host": [
										"{{Created permission}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete non existent permission",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Second created permission}}",
									"host": [
										"{{Second created permission}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve deleted permission",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created permission}}",
									"host": [
										"{{Created permission}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "List all permissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Permission collection schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain the created permission\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const permissions = jsonData._embedded.permissions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < permissions.length; i++) {\r",
											"        if (permissions[i]._links.self.href == pm.collectionVariables.get(\"Created permission\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Permissions endpoint}}",
									"host": [
										"{{Permissions endpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.collectionVariables.set(\"Permission item schema\", {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"name\": { \"type\": \"string\" },",
									"        \"description\": { \"type\": \"string\" },",
									"        \"displayOrder\": { \"type\": [ \"number\", \"null\" ] },",
									"        \"_links\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"self\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"permission\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"type\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"users\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"groups\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                }                ",
									"            },",
									"            \"required\": [",
									"                \"self\",",
									"                \"permission\",",
									"                \"type\",",
									"                \"users\",",
									"                \"groups\"",
									"            ],",
									"            \"additionalProperties\": false",
									"        }",
									"    },",
									"    \"required\": [",
									"        \"name\",",
									"        \"description\",",
									"        \"displayOrder\",",
									"        \"_links\"",
									"    ],",
									"    \"additionalProperties\": false",
									"});",
									"",
									"pm.collectionVariables.set(\"Permission collection schema\", {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"_embedded\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"permissions\": {",
									"                    \"type\": \"array\",",
									"                    \"items\": pm.collectionVariables.get(\"Permission item schema\"),",
									"                    \"uniqueItems\": true",
									"                }",
									"            },",
									"            \"required\": [ \"permissions\" ],",
									"            \"additionalProperties\": false",
									"        },",
									"        \"_links\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"self\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"profile\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                }",
									"            },",
									"            \"required\": [ \"self\", \"profile\" ],",
									"            \"additionalProperties\": false",
									"        },",
									"    },",
									"    \"required\": [ \"_embedded\", \"_links\" ],",
									"    \"additionalProperties\": false",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Timezone",
					"item": [
						{
							"name": "Create a timezone",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 201 Created status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(201);\r",
											"    pm.expect(response.status).to.equal(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Timezone item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Timezone name\"));\r",
											"    pm.expect(jsonData.status).to.equal(pm.collectionVariables.get(\"Timezone status\"));\r",
											"    pm.expect(jsonData.display).to.equal(pm.collectionVariables.get(\"Display\"));\r",
											"\r",
											"    pm.collectionVariables.set(\"Created timezone\", jsonData._links.timezone.href);\r",
											"    pm.collectionVariables.set(\"Created timezone's users\", jsonData._links.users.href);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Timezone name}}\",\n    \"status\": \"{{Timezone status}}\",\n    \"display\": \"{{Display}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Timezones endpoint}}",
									"host": [
										"{{Timezones endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "List all timezones",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Timezone collection schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the created timezone\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const timezones = jsonData._embedded.timezones;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < timezones.length; i++) {\r",
											"        if (timezones[i]._links.timezone.href == pm.collectionVariables.get(\"Created timezone\")) {\r",
											"            pm.expect(timezones[i].name).to.equal(pm.collectionVariables.get(\"Timezone name\"));\r",
											"            pm.expect(timezones[i].status).to.equal(pm.collectionVariables.get(\"Timezone status\"));\r",
											"            pm.expect(timezones[i].display).to.equal(pm.collectionVariables.get(\"Display\"));\r",
											"            pm.expect(timezones[i]._links.self.href).to.equal(pm.collectionVariables.get(\"Created timezone\"));\r",
											"            pm.expect(timezones[i]._links.timezone.href).to.equal(pm.collectionVariables.get(\"Created timezone\"));\r",
											"            pm.expect(timezones[i]._links.users.href).to.equal(pm.collectionVariables.get(\"Created timezone's users\"));\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Timezones endpoint}}",
									"host": [
										"{{Timezones endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve created timezone",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Timezone item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Timezone name\"));\r",
											"    pm.expect(jsonData.status).to.equal(pm.collectionVariables.get(\"Timezone status\"));\r",
											"    pm.expect(jsonData.display).to.equal(pm.collectionVariables.get(\"Display\"));\r",
											"\r",
											"    pm.expect(jsonData._links.self.href).to.equal(pm.collectionVariables.get(\"Created timezone\"));\r",
											"    pm.expect(jsonData._links.timezone.href).to.equal(pm.collectionVariables.get(\"Created timezone\"));\r",
											"    pm.expect(jsonData._links.users.href).to.equal(pm.collectionVariables.get(\"Created timezone's users\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created timezone}}",
									"host": [
										"{{Created timezone}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve non existent timezone",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Timezones endpoint}}/{{Incorrect timezone id}}",
									"host": [
										"{{Timezones endpoint}}"
									],
									"path": [
										"{{Incorrect timezone id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update timezone via PUT with partial data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Timezone item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Modified timezone name\"));\r",
											"    pm.expect(jsonData.status).to.equal(pm.collectionVariables.get(\"Timezone status\"));\r",
											"    pm.expect(jsonData.display).to.equal(\"N\");\r",
											"\r",
											"    pm.expect(jsonData._links.self.href).to.equal(pm.collectionVariables.get(\"Created timezone\"));\r",
											"    pm.expect(jsonData._links.timezone.href).to.equal(pm.collectionVariables.get(\"Created timezone\"));\r",
											"    pm.expect(jsonData._links.users.href).to.equal(pm.collectionVariables.get(\"Created timezone's users\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Modified timezone name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created timezone}}",
									"host": [
										"{{Created timezone}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update timezone via PUT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Timezone item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Timezone name\"));\r",
											"    pm.expect(jsonData.status).to.equal(pm.collectionVariables.get(\"Timezone status\"));\r",
											"    pm.expect(jsonData.display).to.equal(pm.collectionVariables.get(\"Display\"));\r",
											"\r",
											"    pm.expect(jsonData._links.self.href).to.equal(pm.collectionVariables.get(\"Created timezone\"));\r",
											"    pm.expect(jsonData._links.timezone.href).to.equal(pm.collectionVariables.get(\"Created timezone\"));\r",
											"    pm.expect(jsonData._links.users.href).to.equal(pm.collectionVariables.get(\"Created timezone's users\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Timezone name}}\",\n    \"status\": \"{{Timezone status}}\",\n    \"display\": \"{{Display}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created timezone}}",
									"host": [
										"{{Created timezone}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update non existent timezone via PUT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 201 Created status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(201);\r",
											"    pm.expect(response.status).to.equal(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Timezone item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Modified timezone name\"));\r",
											"    pm.expect(jsonData.status).to.equal(pm.collectionVariables.get(\"Timezone status\"));\r",
											"    pm.expect(jsonData.display).to.equal(pm.collectionVariables.get(\"Display\"));\r",
											"\r",
											"    pm.collectionVariables.set(\"Second created timezone\", jsonData._links.timezone.href);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Modified timezone name}}\",\n    \"status\": \"{{Timezone status}}\",\n    \"display\": \"{{Display}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Timezones endpoint}}/{{Incorrect timezone id}}",
									"host": [
										"{{Timezones endpoint}}"
									],
									"path": [
										"{{Incorrect timezone id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete second created timezone",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Second created timezone}}",
									"host": [
										"{{Second created timezone}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update timezone via PATCH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Timezone item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Modified timezone name\"));\r",
											"    pm.expect(jsonData.status).to.equal(pm.collectionVariables.get(\"Timezone status\"));\r",
											"    pm.expect(jsonData.display).to.equal(pm.collectionVariables.get(\"Display\"));\r",
											"\r",
											"    pm.expect(jsonData._links.self.href).to.equal(pm.collectionVariables.get(\"Created timezone\"));\r",
											"    pm.expect(jsonData._links.timezone.href).to.equal(pm.collectionVariables.get(\"Created timezone\"));\r",
											"    pm.expect(jsonData._links.users.href).to.equal(pm.collectionVariables.get(\"Created timezone's users\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Modified timezone name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created timezone}}",
									"host": [
										"{{Created timezone}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update non existent timezone via PATCH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Timezone name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Timezones endpoint}}/{{Incorrect timezone id}}",
									"host": [
										"{{Timezones endpoint}}"
									],
									"path": [
										"{{Incorrect timezone id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete created timezone",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Created timezone}}",
									"host": [
										"{{Created timezone}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete non existent timezone",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Second created timezone}}",
									"host": [
										"{{Second created timezone}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve deleted timezone",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created timezone}}",
									"host": [
										"{{Created timezone}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "List all timezone",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Timezone collection schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain the created timezone\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const timezones = jsonData._embedded.timezones;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < timezones.length; i++) {\r",
											"        if (timezones[i]._links.self.href == pm.collectionVariables.get(\"Created timezone\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Timezones endpoint}}",
									"host": [
										"{{Timezones endpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.collectionVariables.set(\"Timezone item schema\", {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"name\": { \"type\": \"string\" },",
									"        \"status\": { \"type\": \"string\", \"enum\": [ \"A\", \"S\", \"D\" ] },",
									"        \"display\": { \"type\": \"string\", \"enum\": [ \"Y\", \"N\" ] },",
									"        \"_links\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"self\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"timezone\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"users\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                }",
									"            },",
									"            \"required\": [",
									"                \"self\",",
									"                \"timezone\",",
									"                \"users\"",
									"            ],",
									"            \"additionalProperties\": false",
									"        }",
									"    },",
									"    \"required\": [",
									"        \"name\",",
									"        \"status\",",
									"        \"display\",",
									"        \"_links\"",
									"    ],",
									"    \"additionalProperties\": false",
									"});",
									"",
									"pm.collectionVariables.set(\"Timezone collection schema\", {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"_embedded\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"timezones\": {",
									"                    \"type\": \"array\",",
									"                    \"items\": pm.collectionVariables.get(\"Timezone item schema\"),",
									"                    \"uniqueItems\": true",
									"                }",
									"            },",
									"            \"required\": [ \"timezones\" ],",
									"            \"additionalProperties\": false",
									"        },",
									"        \"_links\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"self\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"profile\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                }",
									"            },",
									"            \"required\": [ \"self\", \"profile\" ],",
									"            \"additionalProperties\": false",
									"        },",
									"    },",
									"    \"required\": [ \"_embedded\", \"_links\" ],",
									"    \"additionalProperties\": false",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Position",
					"item": [
						{
							"name": "Create a position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 201 Created status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(201);\r",
											"    pm.expect(response.status).to.equal(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Position item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Position name\"));\r",
											"\r",
											"    pm.collectionVariables.set(\"Created position\", jsonData._links.position.href);\r",
											"    pm.collectionVariables.set(\"Created position's child positions\", jsonData._links.childPositions.href);\r",
											"    pm.collectionVariables.set(\"Created position's parent position\", jsonData._links.parentPosition.href);\r",
											"    pm.collectionVariables.set(\"Created position's users\", jsonData._links.users.href);\r",
											"    pm.collectionVariables.set(\"Created position's groups\", jsonData._links.groups.href);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Position name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Positions endpoint}}",
									"host": [
										"{{Positions endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "List all positions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Position collection schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the created position\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const positions = jsonData._embedded.positions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < positions.length; i++) {\r",
											"        if (positions[i]._links.position.href == pm.collectionVariables.get(\"Created position\")) {\r",
											"            pm.expect(positions[i].name).to.equal(pm.collectionVariables.get(\"Position name\"));\r",
											"            pm.expect(positions[i]._links.self.href).to.equal(pm.collectionVariables.get(\"Created position\"));\r",
											"            pm.expect(positions[i]._links.position.href).to.equal(pm.collectionVariables.get(\"Created position\"));\r",
											"            pm.expect(positions[i]._links.childPositions.href).to.equal(pm.collectionVariables.get(\"Created position's child positions\"));\r",
											"            pm.expect(positions[i]._links.parentPosition.href).to.equal(pm.collectionVariables.get(\"Created position's parent position\"));\r",
											"            pm.expect(positions[i]._links.users.href).to.equal(pm.collectionVariables.get(\"Created position's users\"));\r",
											"            pm.expect(positions[i]._links.groups.href).to.equal(pm.collectionVariables.get(\"Created position's groups\"));\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Positions endpoint}}",
									"host": [
										"{{Positions endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve created position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Position item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Position name\"));\r",
											"\r",
											"    pm.expect(jsonData._links.self.href).to.equal(pm.collectionVariables.get(\"Created position\"));\r",
											"    pm.expect(jsonData._links.position.href).to.equal(pm.collectionVariables.get(\"Created position\"));\r",
											"    pm.expect(jsonData._links.childPositions.href).to.equal(pm.collectionVariables.get(\"Created position's child positions\"));\r",
											"    pm.expect(jsonData._links.parentPosition.href).to.equal(pm.collectionVariables.get(\"Created position's parent position\"));\r",
											"    pm.expect(jsonData._links.users.href).to.equal(pm.collectionVariables.get(\"Created position's users\"));\r",
											"    pm.expect(jsonData._links.groups.href).to.equal(pm.collectionVariables.get(\"Created position's groups\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created position}}",
									"host": [
										"{{Created position}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve non existent position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Positions endpoint}}/{{Incorrect position id}}",
									"host": [
										"{{Positions endpoint}}"
									],
									"path": [
										"{{Incorrect position id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update position via PUT with partial data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Position item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Modified position name\"));\r",
											"\r",
											"    pm.expect(jsonData._links.self.href).to.equal(pm.collectionVariables.get(\"Created position\"));\r",
											"    pm.expect(jsonData._links.position.href).to.equal(pm.collectionVariables.get(\"Created position\"));\r",
											"    pm.expect(jsonData._links.childPositions.href).to.equal(pm.collectionVariables.get(\"Created position's child positions\"));\r",
											"    pm.expect(jsonData._links.parentPosition.href).to.equal(pm.collectionVariables.get(\"Created position's parent position\"));\r",
											"    pm.expect(jsonData._links.users.href).to.equal(pm.collectionVariables.get(\"Created position's users\"));\r",
											"    pm.expect(jsonData._links.groups.href).to.equal(pm.collectionVariables.get(\"Created position's groups\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Modified position name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created position}}",
									"host": [
										"{{Created position}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update position via PUT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Position item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Position name\"));\r",
											"\r",
											"    pm.expect(jsonData._links.self.href).to.equal(pm.collectionVariables.get(\"Created position\"));\r",
											"    pm.expect(jsonData._links.position.href).to.equal(pm.collectionVariables.get(\"Created position\"));\r",
											"    pm.expect(jsonData._links.childPositions.href).to.equal(pm.collectionVariables.get(\"Created position's child positions\"));\r",
											"    pm.expect(jsonData._links.parentPosition.href).to.equal(pm.collectionVariables.get(\"Created position's parent position\"));\r",
											"    pm.expect(jsonData._links.users.href).to.equal(pm.collectionVariables.get(\"Created position's users\"));\r",
											"    pm.expect(jsonData._links.groups.href).to.equal(pm.collectionVariables.get(\"Created position's groups\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Position name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created position}}",
									"host": [
										"{{Created position}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update non existent position via PUT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 201 Created status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(201);\r",
											"    pm.expect(response.status).to.equal(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Position item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Modified position name\"));\r",
											"\r",
											"    pm.collectionVariables.set(\"Second created position\", jsonData._links.position.href);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Modified position name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Positions endpoint}}/{{Incorrect position id}}",
									"host": [
										"{{Positions endpoint}}"
									],
									"path": [
										"{{Incorrect position id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete second created position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Second created position}}",
									"host": [
										"{{Second created position}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update position via PATCH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Position item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Modified position name\"));\r",
											"\r",
											"    pm.expect(jsonData._links.self.href).to.equal(pm.collectionVariables.get(\"Created position\"));\r",
											"    pm.expect(jsonData._links.position.href).to.equal(pm.collectionVariables.get(\"Created position\"));\r",
											"    pm.expect(jsonData._links.childPositions.href).to.equal(pm.collectionVariables.get(\"Created position's child positions\"));\r",
											"    pm.expect(jsonData._links.parentPosition.href).to.equal(pm.collectionVariables.get(\"Created position's parent position\"));\r",
											"    pm.expect(jsonData._links.users.href).to.equal(pm.collectionVariables.get(\"Created position's users\"));\r",
											"    pm.expect(jsonData._links.groups.href).to.equal(pm.collectionVariables.get(\"Created position's groups\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Modified position name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created position}}",
									"host": [
										"{{Created position}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update non existent position via PATCH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Position name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Positions endpoint}}/{{Incorrect position id}}",
									"host": [
										"{{Positions endpoint}}"
									],
									"path": [
										"{{Incorrect position id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete created position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Created position}}",
									"host": [
										"{{Created position}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete non existent position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Second created position}}",
									"host": [
										"{{Second created position}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve deleted position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created position}}",
									"host": [
										"{{Created position}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "List all positions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Position collection schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain the created position\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const positions = jsonData._embedded.positions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < positions.length; i++) {\r",
											"        if (positions[i]._links.self.href == pm.collectionVariables.get(\"Created position\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Positions endpoint}}",
									"host": [
										"{{Positions endpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.collectionVariables.set(\"Position item schema\", {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"name\": { \"type\": \"string\" },",
									"        \"_links\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"self\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"position\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"childPositions\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"parentPosition\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"users\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"groups\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                }                ",
									"            },",
									"            \"required\": [",
									"                \"self\",",
									"                \"position\",",
									"                \"childPositions\",",
									"                \"parentPosition\",",
									"                \"users\",",
									"                \"groups\"",
									"            ],",
									"            \"additionalProperties\": false",
									"        }",
									"    },",
									"    \"required\": [",
									"        \"name\",",
									"        \"_links\"",
									"    ],",
									"    \"additionalProperties\": false",
									"});",
									"",
									"pm.collectionVariables.set(\"Position collection schema\", {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"_embedded\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"positions\": {",
									"                    \"type\": \"array\",",
									"                    \"items\": pm.collectionVariables.get(\"Position item schema\"),",
									"                    \"uniqueItems\": true",
									"                }",
									"            },",
									"            \"required\": [ \"positions\" ],",
									"            \"additionalProperties\": false",
									"        },",
									"        \"_links\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"self\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"profile\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                }",
									"            },",
									"            \"required\": [ \"self\", \"profile\" ],",
									"            \"additionalProperties\": false",
									"        },",
									"    },",
									"    \"required\": [ \"_embedded\", \"_links\" ],",
									"    \"additionalProperties\": false",
									"});"
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "Constraints",
			"item": []
		},
		{
			"name": "Associations",
			"item": [
				{
					"name": "Each user has many permissions",
					"item": [],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Each user has many groups",
					"item": [],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Each user has one timezone",
					"item": [],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Each user has one position",
					"item": [],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Each permission has a permission type",
					"item": []
				},
				{
					"name": "Each position has a parent position",
					"item": []
				},
				{
					"name": "Each position has many groups",
					"item": [],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Each group has an owner user",
					"item": []
				},
				{
					"name": "Each group has many permissions",
					"item": []
				}
			]
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "password",
				"value": "1ncharge",
				"type": "string"
			},
			{
				"key": "username",
				"value": "Administrator",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "Health endpoint",
			"value": "{{Backoffice User Manager URL}}/actuator/health"
		},
		{
			"key": "Home endpoint",
			"value": "{{Backoffice User Manager URL}}/api/v1"
		},
		{
			"key": "Authentication user",
			"value": "Administrator"
		},
		{
			"key": "Authentication password",
			"value": "1ncharge"
		},
		{
			"key": "Username",
			"value": "ktsagkournis"
		},
		{
			"key": "Modified username",
			"value": "kstefanis"
		},
		{
			"key": "Password",
			"value": "t3nt3k"
		},
		{
			"key": "First name",
			"value": "Kostas"
		},
		{
			"key": "Last name",
			"value": "Tsagkournis"
		},
		{
			"key": "Modified last name",
			"value": "Stefanis"
		},
		{
			"key": "Email",
			"value": "ktsagkou@yahoo.gr"
		},
		{
			"key": "User status",
			"value": "A"
		},
		{
			"key": "Password expires",
			"value": "Y"
		},
		{
			"key": "Incorrect user id",
			"value": "9999999"
		},
		{
			"key": "Permission type name",
			"value": "GDPR"
		},
		{
			"key": "Permission type description",
			"value": "GDPR permission type"
		},
		{
			"key": "Modified permission type description",
			"value": "GDPR permission type value"
		},
		{
			"key": "Display order",
			"value": "0"
		},
		{
			"key": "Incorrect permission type id",
			"value": "DFLT"
		},
		{
			"key": "Permission name",
			"value": "CanViewSensitiveData"
		},
		{
			"key": "Permission description",
			"value": "Can view sensitive data"
		},
		{
			"key": "Modified permission description",
			"value": "Can access sensitive data"
		},
		{
			"key": "Incorrect permission id",
			"value": "CanAccessSensitiveData"
		},
		{
			"key": "Timezone name",
			"value": "Europe/Bucharest"
		},
		{
			"key": "Modified timezone name",
			"value": "Europe/Cluj"
		},
		{
			"key": "Timezone status",
			"value": "A"
		},
		{
			"key": "Display",
			"value": "Y"
		},
		{
			"key": "Incorrect timezone id",
			"value": "9999999"
		},
		{
			"key": "Position name",
			"value": "Software Engineer"
		},
		{
			"key": "Modified position name",
			"value": "Systems Engineer"
		},
		{
			"key": "Incorrect position id",
			"value": "9999999"
		},
		{
			"key": "Group name",
			"value": "Administrators"
		},
		{
			"key": "Modified group name",
			"value": "HR"
		},
		{
			"key": "Incorrect group id",
			"value": "9999999"
		},
		{
			"key": "Permission types endpoint",
			"value": ""
		},
		{
			"key": "Permissions endpoint",
			"value": ""
		},
		{
			"key": "Positions endpoint",
			"value": ""
		},
		{
			"key": "Profile endpoint",
			"value": ""
		},
		{
			"key": "Timezones endpoint",
			"value": ""
		},
		{
			"key": "Users endpoint",
			"value": ""
		},
		{
			"key": "Created user",
			"value": ""
		},
		{
			"key": "Created user's id",
			"value": ""
		},
		{
			"key": "Created user's permissions",
			"value": ""
		},
		{
			"key": "Created user's position",
			"value": ""
		},
		{
			"key": "Created user's timezone",
			"value": ""
		},
		{
			"key": "Second created user",
			"value": ""
		},
		{
			"key": "Created permission type",
			"value": ""
		},
		{
			"key": "Created permission type's permissions",
			"value": ""
		},
		{
			"key": "Second created permission type",
			"value": ""
		},
		{
			"key": "Created permission",
			"value": ""
		},
		{
			"key": "Created permission's type",
			"value": ""
		},
		{
			"key": "Created permission's users",
			"value": ""
		},
		{
			"key": "Second created permission",
			"value": ""
		},
		{
			"key": "Created timezone",
			"value": ""
		},
		{
			"key": "Created timezone's users",
			"value": ""
		},
		{
			"key": "Second created timezone",
			"value": ""
		},
		{
			"key": "Created position",
			"value": ""
		},
		{
			"key": "Created position's child positions",
			"value": ""
		},
		{
			"key": "Created position's parent position",
			"value": ""
		},
		{
			"key": "Created position's users",
			"value": ""
		},
		{
			"key": "Second created position",
			"value": ""
		},
		{
			"key": "User schema",
			"value": ""
		},
		{
			"key": "User collection schema",
			"value": ""
		},
		{
			"key": "User item schema",
			"value": ""
		},
		{
			"key": "User search schema",
			"value": ""
		},
		{
			"key": "User search root schema",
			"value": ""
		},
		{
			"key": "User search term schema",
			"value": ""
		},
		{
			"key": "Permission type collection schema",
			"value": ""
		},
		{
			"key": "Permission type item schema",
			"value": ""
		},
		{
			"key": "Permission collection schema",
			"value": ""
		},
		{
			"key": "Permission item schema",
			"value": ""
		},
		{
			"key": "Timezone collection schema",
			"value": ""
		},
		{
			"key": "Timezone item schema",
			"value": ""
		},
		{
			"key": "Position collection schema",
			"value": ""
		},
		{
			"key": "Position item schema",
			"value": ""
		},
		{
			"key": "Actuator health schema",
			"value": ""
		},
		{
			"key": "Entry point schema",
			"value": ""
		},
		{
			"key": "Groups endpoint",
			"value": ""
		},
		{
			"key": "Group collection schema",
			"value": ""
		},
		{
			"key": "Group item schema",
			"value": ""
		},
		{
			"key": "Created group",
			"value": ""
		},
		{
			"key": "Created group's id",
			"value": ""
		},
		{
			"key": "Created group's owner",
			"value": ""
		},
		{
			"key": "Second created group",
			"value": ""
		},
		{
			"key": "Created group's permissions",
			"value": ""
		},
		{
			"key": "Created group's positions",
			"value": ""
		},
		{
			"key": "Created group's users",
			"value": ""
		},
		{
			"key": "Created user's groups",
			"value": ""
		},
		{
			"key": "Created user's ownedGroups",
			"value": ""
		},
		{
			"key": "Created user's owned groups",
			"value": ""
		},
		{
			"key": "Created position's groups",
			"value": ""
		},
		{
			"key": "Created permission's groups",
			"value": ""
		}
	]
}