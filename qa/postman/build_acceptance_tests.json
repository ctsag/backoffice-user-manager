{
	"info": {
		"_postman_id": "a77c9522-5c9b-45ac-a2ed-54791c88ddea",
		"name": "Backoffice User Manager",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Service",
			"item": [
				{
					"name": "Health check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Returns a 200 OK status\", () => {\r",
									"    const response = pm.response;\r",
									"\r",
									"    pm.expect(response.code).to.equal(200);\r",
									"    pm.expect(response.status).to.equal(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content type is Spring Boot Actuator\", () => {\r",
									"    const response = pm.response;\r",
									"\r",
									"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/vnd.spring-boot.actuator.v3+json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Returns expected JSON schema\", () => {\r",
									"    const schema = pm.collectionVariables.get(\"Actuator health schema\");\r",
									"\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"Service status is UP\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData.status).to.equal(\"UP\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Health endpoint}}",
							"host": [
								"{{Health endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Entry point check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Returns a 200 OK status\", () => {\r",
									"    const response = pm.response; \r",
									"\r",
									"    pm.expect(response.code).to.equal(200);\r",
									"    pm.expect(response.status).to.equal(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content type is Hypermedia\", () => {\r",
									"    const response = pm.response;\r",
									"\r",
									"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Returns expected JSON schema\", () => {\r",
									"    const schema = pm.collectionVariables.get(\"Entry point schema\");\r",
									"    const jsonData = pm.response.json();\r",
									"\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"\r",
									"    pm.collectionVariables.set(\"Users endpoint\", jsonData._links.users.href);\r",
									"    pm.collectionVariables.set(\"Groups endpoint\", jsonData._links.groups.href);\r",
									"    pm.collectionVariables.set(\"Permissions endpoint\", jsonData._links.permissions.href);\r",
									"    pm.collectionVariables.set(\"Positions endpoint\", jsonData._links.positions.href);\r",
									"    pm.collectionVariables.set(\"Permission types endpoint\", jsonData._links.permissionTypes.href);    \r",
									"    pm.collectionVariables.set(\"Timezones endpoint\", jsonData._links.timezones.href);\r",
									"    pm.collectionVariables.set(\"Jurisdictions endpoint\", jsonData._links.jurisdictions.href);\r",
									"    pm.collectionVariables.set(\"Flag definitions endpoint\", jsonData._links.flagDefinitions.href);\r",
									"    pm.collectionVariables.set(\"Flags endpoint\", jsonData._links.flags.href);\r",
									"    pm.collectionVariables.set(\"Profile endpoint\", jsonData._links.profile.href);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Home endpoint}}",
							"host": [
								"{{Home endpoint}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Resources",
			"item": [
				{
					"name": "User",
					"item": [
						{
							"name": "Create a user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 201 Created status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(201);\r",
											"    pm.expect(response.status).to.equal(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"User item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.username).to.equal(pm.collectionVariables.get(\"Username\"));\r",
											"    pm.expect(jsonData.firstName).to.equal(pm.collectionVariables.get(\"First name\"));\r",
											"    pm.expect(jsonData.lastName).to.equal(pm.collectionVariables.get(\"Last name\"));\r",
											"    pm.expect(jsonData.email).to.equal(pm.collectionVariables.get(\"Email\"));\r",
											"    pm.expect(jsonData.status).to.equal(pm.collectionVariables.get(\"User status\"));\r",
											"    pm.expect(jsonData.passwordExpires).to.equal(pm.collectionVariables.get(\"Password expires\"));\r",
											"    pm.expect(jsonData.agent).to.be.null;\r",
											"    pm.expect(jsonData.phoneSwitch).to.be.null;\r",
											"    pm.expect(jsonData.overrideCode).to.be.null;\r",
											"\r",
											"    pm.collectionVariables.set(\"Created user\", jsonData._links.user.href);\r",
											"    pm.collectionVariables.set(\"Created user's timezone\", jsonData._links.timezone.href);\r",
											"    pm.collectionVariables.set(\"Created user's permissions\", jsonData._links.permissions.href);\r",
											"    pm.collectionVariables.set(\"Created user's position\", jsonData._links.position.href);\r",
											"    pm.collectionVariables.set(\"Created user's owned groups\", jsonData._links.ownedGroups.href);\r",
											"    pm.collectionVariables.set(\"Created user's groups\", jsonData._links.groups.href);\r",
											"    pm.collectionVariables.set(\"Created user's flags\", jsonData._links.flags.href);\r",
											"    pm.collectionVariables.set(\"Created user's id\", jsonData.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"username\": \"{{Username}}\",\n    \"password\": \"{{Password}}\",\n    \"firstName\": \"{{First name}}\",\n    \"lastName\": \"{{Last name}}\",\n    \"email\": \"{{Email}}\",\n    \"status\": \"{{User status}}\",\n    \"passwordExpires\": \"{{Password expires}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Users endpoint}}",
									"host": [
										"{{Users endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "List all users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"User collection schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the created user\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const users = jsonData._embedded.users;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < users.length; i++) {\r",
											"        if (users[i]._links.user.href == pm.collectionVariables.get(\"Created user\")) {\r",
											"            pm.expect(users[i].id).to.equal(pm.collectionVariables.get(\"Created user's id\"));\r",
											"            pm.expect(users[i].username).to.equal(pm.collectionVariables.get(\"Username\"));\r",
											"            pm.expect(users[i].firstName).to.equal(pm.collectionVariables.get(\"First name\"));\r",
											"            pm.expect(users[i].lastName).to.equal(pm.collectionVariables.get(\"Last name\"));\r",
											"            pm.expect(users[i].email).to.equal(pm.collectionVariables.get(\"Email\"));\r",
											"            pm.expect(users[i].status).to.equal(pm.collectionVariables.get(\"User status\"));\r",
											"            pm.expect(users[i].passwordExpires).to.equal(pm.collectionVariables.get(\"Password expires\"));\r",
											"            pm.expect(users[i].agent).to.be.null;\r",
											"            pm.expect(users[i].phoneSwitch).to.be.null;\r",
											"            pm.expect(users[i].overrideCode).to.be.null;\r",
											"            pm.expect(users[i]._links.self.href).to.equal(pm.collectionVariables.get(\"Created user\"));\r",
											"            pm.expect(users[i]._links.user.href).to.equal(pm.collectionVariables.get(\"Created user\"));\r",
											"            pm.expect(users[i]._links.permissions.href).to.equal(pm.collectionVariables.get(\"Created user's permissions\"));\r",
											"            pm.expect(users[i]._links.timezone.href).to.equal(pm.collectionVariables.get(\"Created user's timezone\"));\r",
											"            pm.expect(users[i]._links.position.href).to.equal(pm.collectionVariables.get(\"Created user's position\"));\r",
											"            pm.expect(users[i]._links.ownedGroups.href).to.equal(pm.collectionVariables.get(\"Created user's owned groups\"));\r",
											"            pm.expect(users[i]._links.groups.href).to.equal(pm.collectionVariables.get(\"Created user's groups\"));\r",
											"            pm.expect(users[i]._links.flags.href).to.equal(pm.collectionVariables.get(\"Created user's flags\"));\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Users endpoint}}",
									"host": [
										"{{Users endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve created user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"User item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.id).to.equal(pm.collectionVariables.get(\"Created user's id\"));\r",
											"    pm.expect(jsonData.username).to.equal(pm.collectionVariables.get(\"Username\"));\r",
											"    pm.expect(jsonData.firstName).to.equal(pm.collectionVariables.get(\"First name\"));\r",
											"    pm.expect(jsonData.lastName).to.equal(pm.collectionVariables.get(\"Last name\"));\r",
											"    pm.expect(jsonData.email).to.equal(pm.collectionVariables.get(\"Email\"));\r",
											"    pm.expect(jsonData.status).to.equal(pm.collectionVariables.get(\"User status\"));\r",
											"    pm.expect(jsonData.passwordExpires).to.equal(pm.collectionVariables.get(\"Password expires\"));\r",
											"    pm.expect(jsonData.agent).to.be.null;\r",
											"    pm.expect(jsonData.phoneSwitch).to.be.null;\r",
											"    pm.expect(jsonData.overrideCode).to.be.null;\r",
											"\r",
											"    pm.expect(jsonData._links.self.href).to.equal(pm.collectionVariables.get(\"Created user\"));\r",
											"    pm.expect(jsonData._links.user.href).to.equal(pm.collectionVariables.get(\"Created user\"));\r",
											"    pm.expect(jsonData._links.permissions.href).to.equal(pm.collectionVariables.get(\"Created user's permissions\"));\r",
											"    pm.expect(jsonData._links.timezone.href).to.equal(pm.collectionVariables.get(\"Created user's timezone\"));\r",
											"    pm.expect(jsonData._links.position.href).to.equal(pm.collectionVariables.get(\"Created user's position\"));\r",
											"    pm.expect(jsonData._links.ownedGroups.href).to.equal(pm.collectionVariables.get(\"Created user's owned groups\"));\r",
											"    pm.expect(jsonData._links.groups.href).to.equal(pm.collectionVariables.get(\"Created user's groups\"));\r",
											"    pm.expect(jsonData._links.flags.href).to.equal(pm.collectionVariables.get(\"Created user's flags\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created user}}",
									"host": [
										"{{Created user}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve non existent user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(404);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: not found\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Users endpoint}}/{{Incorrect id}}",
									"host": [
										"{{Users endpoint}}"
									],
									"path": [
										"{{Incorrect id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update user via PUT with partial data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"User item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.id).to.equal(pm.collectionVariables.get(\"Created user's id\"));\r",
											"    pm.expect(jsonData.username).to.equal(pm.collectionVariables.get(\"Username\"));\r",
											"    pm.expect(jsonData.firstName).to.be.null;\r",
											"    pm.expect(jsonData.lastName).to.equal(pm.collectionVariables.get(\"Modified last name\"));\r",
											"    pm.expect(jsonData.email).to.be.null;\r",
											"    pm.expect(jsonData.status).to.equal(\"A\");\r",
											"    pm.expect(jsonData.passwordExpires).to.equal(\"Y\");\r",
											"    pm.expect(jsonData.agent).to.be.null;\r",
											"    pm.expect(jsonData.phoneSwitch).to.be.null;\r",
											"    pm.expect(jsonData.overrideCode).to.be.null;\r",
											"\r",
											"    pm.expect(jsonData._links.self.href).to.equal(pm.collectionVariables.get(\"Created user\"));\r",
											"    pm.expect(jsonData._links.user.href).to.equal(pm.collectionVariables.get(\"Created user\"));\r",
											"    pm.expect(jsonData._links.timezone.href).to.equal(pm.collectionVariables.get(\"Created user's timezone\"));\r",
											"    pm.expect(jsonData._links.permissions.href).to.equal(pm.collectionVariables.get(\"Created user's permissions\"));\r",
											"    pm.expect(jsonData._links.position.href).to.equal(pm.collectionVariables.get(\"Created user's position\"));\r",
											"    pm.expect(jsonData._links.ownedGroups.href).to.equal(pm.collectionVariables.get(\"Created user's owned groups\"));\r",
											"    pm.expect(jsonData._links.groups.href).to.equal(pm.collectionVariables.get(\"Created user's groups\"));\r",
											"    pm.expect(jsonData._links.flags.href).to.equal(pm.collectionVariables.get(\"Created user's flags\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"username\": \"{{Username}}\",\n    \"password\": \"{{Password}}\",\n    \"lastName\": \"{{Modified last name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created user}}",
									"host": [
										"{{Created user}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update user via PUT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"User item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.id).to.equal(pm.collectionVariables.get(\"Created user's id\"));\r",
											"    pm.expect(jsonData.username).to.equal(pm.collectionVariables.get(\"Username\"));\r",
											"    pm.expect(jsonData.firstName).to.equal(pm.collectionVariables.get(\"First name\"));\r",
											"    pm.expect(jsonData.lastName).to.equal(pm.collectionVariables.get(\"Last name\"));\r",
											"    pm.expect(jsonData.email).to.equal(pm.collectionVariables.get(\"Email\"));\r",
											"    pm.expect(jsonData.status).to.equal(pm.collectionVariables.get(\"User status\"));\r",
											"    pm.expect(jsonData.passwordExpires).to.equal(pm.collectionVariables.get(\"Password expires\"));\r",
											"    pm.expect(jsonData.agent).to.be.null;\r",
											"    pm.expect(jsonData.phoneSwitch).to.be.null;\r",
											"    pm.expect(jsonData.overrideCode).to.be.null;\r",
											"\r",
											"    pm.expect(jsonData._links.self.href).to.equal(pm.collectionVariables.get(\"Created user\"));\r",
											"    pm.expect(jsonData._links.user.href).to.equal(pm.collectionVariables.get(\"Created user\"));\r",
											"    pm.expect(jsonData._links.timezone.href).to.equal(pm.collectionVariables.get(\"Created user's timezone\"));\r",
											"    pm.expect(jsonData._links.permissions.href).to.equal(pm.collectionVariables.get(\"Created user's permissions\"));\r",
											"    pm.expect(jsonData._links.position.href).to.equal(pm.collectionVariables.get(\"Created user's position\"));\r",
											"    pm.expect(jsonData._links.ownedGroups.href).to.equal(pm.collectionVariables.get(\"Created user's owned groups\"));\r",
											"    pm.expect(jsonData._links.groups.href).to.equal(pm.collectionVariables.get(\"Created user's groups\"));\r",
											"    pm.expect(jsonData._links.flags.href).to.equal(pm.collectionVariables.get(\"Created user's flags\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"username\": \"{{Username}}\",\n    \"password\": \"{{Password}}\",\n    \"firstName\": \"{{First name}}\",\n    \"lastName\": \"{{Last name}}\",\n    \"email\": \"{{Email}}\",\n    \"status\": \"{{User status}}\",\n    \"passwordExpires\": \"{{Password expires}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created user}}",
									"host": [
										"{{Created user}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update non existent user via PUT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 201 Created status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(201);\r",
											"    pm.expect(response.status).to.equal(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"User item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.username).to.equal(pm.collectionVariables.get(\"Incorrect id\"));\r",
											"    pm.expect(jsonData.firstName).to.equal(pm.collectionVariables.get(\"First name\"));\r",
											"    pm.expect(jsonData.lastName).to.equal(pm.collectionVariables.get(\"Modified last name\"));\r",
											"    pm.expect(jsonData.email).to.equal(pm.collectionVariables.get(\"Email\"));\r",
											"    pm.expect(jsonData.status).to.equal(pm.collectionVariables.get(\"User status\"));\r",
											"    pm.expect(jsonData.passwordExpires).to.equal(pm.collectionVariables.get(\"Password expires\"));\r",
											"    pm.expect(jsonData.agent).to.be.null;\r",
											"    pm.expect(jsonData.phoneSwitch).to.be.null;\r",
											"    pm.expect(jsonData.overrideCode).to.be.null;\r",
											"\r",
											"    pm.collectionVariables.set(\"Second created user\", jsonData._links.user.href);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"username\": \"{{Modified username}}\",\n    \"password\": \"{{Password}}\",\n    \"firstName\": \"{{First name}}\",\n    \"lastName\": \"{{Modified last name}}\",\n    \"email\": \"{{Email}}\",\n    \"status\": \"{{User status}}\",\n    \"passwordExpires\": \"{{Password expires}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Users endpoint}}/{{Incorrect id}}",
									"host": [
										"{{Users endpoint}}"
									],
									"path": [
										"{{Incorrect id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete second created user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Second created user}}",
									"host": [
										"{{Second created user}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update user via PATCH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"User item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.id).to.equal(pm.collectionVariables.get(\"Created user's id\"));\r",
											"    pm.expect(jsonData.username).to.equal(pm.collectionVariables.get(\"Username\"));\r",
											"    pm.expect(jsonData.firstName).to.equal(pm.collectionVariables.get(\"First name\"));\r",
											"    pm.expect(jsonData.lastName).to.equal(pm.collectionVariables.get(\"Modified last name\"));\r",
											"    pm.expect(jsonData.email).to.equal(pm.collectionVariables.get(\"Email\"));\r",
											"    pm.expect(jsonData.status).to.equal(pm.collectionVariables.get(\"User status\"));\r",
											"    pm.expect(jsonData.passwordExpires).to.equal(pm.collectionVariables.get(\"Password expires\"));\r",
											"    pm.expect(jsonData.agent).to.be.null;\r",
											"    pm.expect(jsonData.phoneSwitch).to.be.null;\r",
											"    pm.expect(jsonData.overrideCode).to.be.null;\r",
											"\r",
											"    pm.expect(jsonData._links.self.href).to.equal(pm.collectionVariables.get(\"Created user\"));\r",
											"    pm.expect(jsonData._links.user.href).to.equal(pm.collectionVariables.get(\"Created user\"));\r",
											"    pm.expect(jsonData._links.permissions.href).to.equal(pm.collectionVariables.get(\"Created user's permissions\"));\r",
											"    pm.expect(jsonData._links.timezone.href).to.equal(pm.collectionVariables.get(\"Created user's timezone\"));\r",
											"    pm.expect(jsonData._links.position.href).to.equal(pm.collectionVariables.get(\"Created user's position\"));\r",
											"    pm.expect(jsonData._links.ownedGroups.href).to.equal(pm.collectionVariables.get(\"Created user's owned groups\"));\r",
											"    pm.expect(jsonData._links.groups.href).to.equal(pm.collectionVariables.get(\"Created user's groups\"));\r",
											"    pm.expect(jsonData._links.flags.href).to.equal(pm.collectionVariables.get(\"Created user's flags\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"lastName\": \"{{Modified last name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created user}}",
									"host": [
										"{{Created user}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update non existent user via PATCH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(404);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: not found\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n\t\"lastName\": \"{{Last name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Users endpoint}}/{{Incorrect id}}",
									"host": [
										"{{Users endpoint}}"
									],
									"path": [
										"{{Incorrect id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "List all user search options",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.eql(200);\r",
											"    pm.expect(response.status).to.eql(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"User search root schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Users endpoint}}/search",
									"host": [
										"{{Users endpoint}}"
									],
									"path": [
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve user by full name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"User search term schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the created user\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const users = jsonData._embedded.users;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < users.length; i++) {\r",
											"        if (users[i]._links.user.href == pm.collectionVariables.get(\"Created user\")) {\r",
											"            pm.expect(users[i].id).to.equal(pm.collectionVariables.get(\"Created user's id\"));\r",
											"            pm.expect(users[i].username).to.equal(pm.collectionVariables.get(\"Username\"));\r",
											"            pm.expect(users[i].firstName).to.equal(pm.collectionVariables.get(\"First name\"));\r",
											"            pm.expect(users[i].lastName).to.equal(pm.collectionVariables.get(\"Modified last name\"));\r",
											"            pm.expect(users[i].email).to.equal(pm.collectionVariables.get(\"Email\"));\r",
											"            pm.expect(users[i].status).to.equal(pm.collectionVariables.get(\"User status\"));\r",
											"            pm.expect(users[i].passwordExpires).to.equal(pm.collectionVariables.get(\"Password expires\"));\r",
											"            pm.expect(users[i].agent).to.be.null;\r",
											"            pm.expect(users[i].phoneSwitch).to.be.null;\r",
											"            pm.expect(users[i].overrideCode).to.be.null;\r",
											"            pm.expect(users[i]._links.self.href).to.equal(pm.collectionVariables.get(\"Created user\"));\r",
											"            pm.expect(users[i]._links.user.href).to.equal(pm.collectionVariables.get(\"Created user\"));\r",
											"            pm.expect(users[i]._links.permissions.href).to.equal(pm.collectionVariables.get(\"Created user's permissions\"));\r",
											"            pm.expect(users[i]._links.timezone.href).to.equal(pm.collectionVariables.get(\"Created user's timezone\"));\r",
											"            pm.expect(users[i]._links.position.href).to.equal(pm.collectionVariables.get(\"Created user's position\"));\r",
											"            pm.expect(users[i]._links.ownedGroups.href).to.equal(pm.collectionVariables.get(\"Created user's owned groups\"));\r",
											"            pm.expect(users[i]._links.groups.href).to.equal(pm.collectionVariables.get(\"Created user's groups\"));\r",
											"            pm.expect(users[i]._links.flags.href).to.equal(pm.collectionVariables.get(\"Created user's flags\"));\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Users endpoint}}/search/byFullName?firstName={{First name}}&lastName={{Modified last name}}",
									"host": [
										"{{Users endpoint}}"
									],
									"path": [
										"search",
										"byFullName"
									],
									"query": [
										{
											"key": "firstName",
											"value": "{{First name}}"
										},
										{
											"key": "lastName",
											"value": "{{Modified last name}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete created user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Created user}}",
									"host": [
										"{{Created user}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete non existent user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(404);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: not found\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Second created user}}",
									"host": [
										"{{Second created user}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve deleted user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(404);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: not found\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created user}}",
									"host": [
										"{{Created user}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "List all users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"User collection schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain the created user\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const users = jsonData._embedded.users;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < users.length; i++) {\r",
											"        if (users[i]._links.self.href == pm.collectionVariables.get(\"Created user\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Users endpoint}}",
									"host": [
										"{{Users endpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.collectionVariables.set(\"User item schema\", {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"id\": { \"type\": \"integer\" },",
									"        \"username\": { \"type\": \"string\" },",
									"        \"firstName\": { \"type\": [ \"string\", \"null\" ] },",
									"        \"lastName\": { \"type\": [ \"string\", \"null\" ] },",
									"        \"email\": { \"type\": [ \"string\", \"null\" ] },",
									"        \"status\": { \"type\": \"string\", \"enum\": [ \"A\", \"S\", \"P\", \"L\", \"X\" ] },",
									"        \"passwordExpires\": { \"type\": \"string\", \"enum\": [ \"Y\", \"N\" ] },",
									"        \"agent\": { \"type\": [ \"string\", \"null\" ] },",
									"        \"phoneSwitch\": { \"type\": [ \"string\", \"null\" ] },",
									"        \"overrideCode\": { \"type\": [ \"string\", \"null\" ] },",
									"        \"_links\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"self\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"user\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"timezone\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"permissions\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"ownedGroups\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },       ",
									"                \"groups\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },                ",
									"                \"position\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"flags\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"            },",
									"            \"required\": [",
									"                \"self\",",
									"                \"user\",",
									"                \"timezone\",",
									"                \"permissions\",",
									"                \"groups\",",
									"                \"position\",",
									"                \"flags\"",
									"            ],",
									"            \"additionalProperties\": false",
									"        }",
									"    },",
									"    \"required\": [",
									"        \"id\",",
									"        \"username\",",
									"        \"firstName\",",
									"        \"lastName\",",
									"        \"email\",",
									"        \"status\",",
									"        \"passwordExpires\",",
									"        \"agent\",",
									"        \"phoneSwitch\",",
									"        \"overrideCode\",",
									"        \"_links\"",
									"    ],",
									"    \"additionalProperties\": false",
									"});",
									"",
									"pm.collectionVariables.set(\"User collection schema\", {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"_embedded\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"users\": {",
									"                    \"type\": \"array\",",
									"                    \"items\": pm.collectionVariables.get(\"User item schema\"),",
									"                    \"uniqueItems\": true",
									"                }",
									"            },",
									"            \"required\": [ \"users\" ],",
									"            \"additionalProperties\": false",
									"        },",
									"        \"_links\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"self\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"profile\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"search\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                }",
									"            },",
									"            \"required\": [ \"self\", \"profile\", \"search\" ],",
									"            \"additionalProperties\": false",
									"        },",
									"    },",
									"    \"required\": [ \"_embedded\", \"_links\" ],",
									"    \"additionalProperties\": false",
									"});",
									"",
									"pm.collectionVariables.set(\"User search root schema\", {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"_links\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"byFullName\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" },",
									"                        \"templated\": { \"type\": \"boolean\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"self\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" },",
									"                        \"templated\": { \"type\": \"boolean\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                }",
									"            },",
									"            \"required\": [ \"byFullName\", \"self\" ],",
									"            \"additionalProperties\": false",
									"        },",
									"    },",
									"    \"required\": [ \"_links\" ],",
									"    \"additionalProperties\": false",
									"});",
									"",
									"pm.collectionVariables.set(\"User search term schema\", {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"_embedded\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"users\": {",
									"                    \"type\": \"array\",",
									"                    \"items\": pm.collectionVariables.get(\"User item schema\"),",
									"                    \"uniqueItems\": true",
									"                }",
									"            },",
									"            \"required\": [ \"users\" ],",
									"            \"additionalProperties\": false",
									"        },",
									"        \"_links\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"self\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                }",
									"            },",
									"            \"required\": [ \"self\" ],",
									"            \"additionalProperties\": false",
									"        },",
									"    },",
									"    \"required\": [ \"_embedded\", \"_links\" ],",
									"    \"additionalProperties\": false",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Group",
					"item": [
						{
							"name": "Create a group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 201 Created status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(201);\r",
											"    pm.expect(response.status).to.equal(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Group item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Group name\"));\r",
											"\r",
											"    pm.collectionVariables.set(\"Created group\", jsonData._links.group.href);\r",
											"    pm.collectionVariables.set(\"Created group's owner\", jsonData._links.owner.href);\r",
											"    pm.collectionVariables.set(\"Created group's positions\", jsonData._links.positions.href);\r",
											"    pm.collectionVariables.set(\"Created group's permissions\", jsonData._links.permissions.href);\r",
											"    pm.collectionVariables.set(\"Created group's users\", jsonData._links.users.href);\r",
											"    pm.collectionVariables.set(\"Created group's jurisdictions\", jsonData._links.jurisdictions.href);\r",
											"    pm.collectionVariables.set(\"Created group's id\", jsonData.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Group name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Groups endpoint}}",
									"host": [
										"{{Groups endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "List all groups",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Group collection schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Created group\")) {\r",
											"            pm.expect(groups[i].id).to.equal(pm.collectionVariables.get(\"Created group's id\"));\r",
											"            pm.expect(groups[i].name).to.equal(pm.collectionVariables.get(\"Group name\"));\r",
											"            pm.expect(groups[i]._links.self.href).to.equal(pm.collectionVariables.get(\"Created group\"));\r",
											"            pm.expect(groups[i]._links.group.href).to.equal(pm.collectionVariables.get(\"Created group\"));\r",
											"            pm.expect(groups[i]._links.owner.href).to.equal(pm.collectionVariables.get(\"Created group's owner\"));\r",
											"            pm.expect(groups[i]._links.positions.href).to.equal(pm.collectionVariables.get(\"Created group's positions\"));\r",
											"            pm.expect(groups[i]._links.permissions.href).to.equal(pm.collectionVariables.get(\"Created group's permissions\"));\r",
											"            pm.expect(groups[i]._links.users.href).to.equal(pm.collectionVariables.get(\"Created group's users\"));\r",
											"            pm.expect(groups[i]._links.jurisdictions.href).to.equal(pm.collectionVariables.get(\"Created group's jurisdictions\"));\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Groups endpoint}}",
									"host": [
										"{{Groups endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve created group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Group item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.id).to.equal(pm.collectionVariables.get(\"Created group's id\"));\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Group name\"));\r",
											"\r",
											"    pm.expect(jsonData._links.self.href).to.equal(pm.collectionVariables.get(\"Created group\"));\r",
											"    pm.expect(jsonData._links.group.href).to.equal(pm.collectionVariables.get(\"Created group\"));\r",
											"    pm.expect(jsonData._links.owner.href).to.equal(pm.collectionVariables.get(\"Created group's owner\"));\r",
											"    pm.expect(jsonData._links.positions.href).to.equal(pm.collectionVariables.get(\"Created group's positions\"));\r",
											"    pm.expect(jsonData._links.permissions.href).to.equal(pm.collectionVariables.get(\"Created group's permissions\"));\r",
											"    pm.expect(jsonData._links.users.href).to.equal(pm.collectionVariables.get(\"Created group's users\"));\r",
											"    pm.expect(jsonData._links.jurisdictions.href).to.equal(pm.collectionVariables.get(\"Created group's jurisdictions\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created group}}",
									"host": [
										"{{Created group}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve non existent group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(404);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: not found\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Groups endpoint}}/{{Incorrect id}}",
									"host": [
										"{{Groups endpoint}}"
									],
									"path": [
										"{{Incorrect id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update group via PUT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Group item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.id).to.equal(pm.collectionVariables.get(\"Created group's id\"));\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Modified group name\"));\r",
											"\r",
											"    pm.expect(jsonData._links.self.href).to.equal(pm.collectionVariables.get(\"Created group\"));\r",
											"    pm.expect(jsonData._links.group.href).to.equal(pm.collectionVariables.get(\"Created group\"));\r",
											"    pm.expect(jsonData._links.owner.href).to.equal(pm.collectionVariables.get(\"Created group's owner\"));\r",
											"    pm.expect(jsonData._links.positions.href).to.equal(pm.collectionVariables.get(\"Created group's positions\"));\r",
											"    pm.expect(jsonData._links.permissions.href).to.equal(pm.collectionVariables.get(\"Created group's permissions\"));\r",
											"    pm.expect(jsonData._links.users.href).to.equal(pm.collectionVariables.get(\"Created group's users\"));\r",
											"    pm.expect(jsonData._links.jurisdictions.href).to.equal(pm.collectionVariables.get(\"Created group's jurisdictions\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Modified group name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created group}}",
									"host": [
										"{{Created group}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update non existent group via PUT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 201 Created status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(201);\r",
											"    pm.expect(response.status).to.equal(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Group item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Group name\"));\r",
											"\r",
											"    pm.collectionVariables.set(\"Second created group\", jsonData._links.group.href);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Group name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Groups endpoint}}/{{Incorrect id}}",
									"host": [
										"{{Groups endpoint}}"
									],
									"path": [
										"{{Incorrect id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete second created group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Second created group}}",
									"host": [
										"{{Second created group}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update group via PATCH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Group item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.id).to.equal(pm.collectionVariables.get(\"Created group's id\"));\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Group name\"));\r",
											"\r",
											"    pm.expect(jsonData._links.self.href).to.equal(pm.collectionVariables.get(\"Created group\"));\r",
											"    pm.expect(jsonData._links.group.href).to.equal(pm.collectionVariables.get(\"Created group\"));\r",
											"    pm.expect(jsonData._links.owner.href).to.equal(pm.collectionVariables.get(\"Created group's owner\"));\r",
											"    pm.expect(jsonData._links.positions.href).to.equal(pm.collectionVariables.get(\"Created group's positions\"));\r",
											"    pm.expect(jsonData._links.permissions.href).to.equal(pm.collectionVariables.get(\"Created group's permissions\"));\r",
											"    pm.expect(jsonData._links.users.href).to.equal(pm.collectionVariables.get(\"Created group's users\"));\r",
											"    pm.expect(jsonData._links.jurisdictions.href).to.equal(pm.collectionVariables.get(\"Created group's jurisdictions\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Group name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created group}}",
									"host": [
										"{{Created group}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update non existent group via PATCH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(404);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: not found\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n\t\"name\": \"{{Modified group name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Groups endpoint}}/{{Incorrect id}}",
									"host": [
										"{{Groups endpoint}}"
									],
									"path": [
										"{{Incorrect id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete created group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Created group}}",
									"host": [
										"{{Created group}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete non existent group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(404);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: not found\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Second created group}}",
									"host": [
										"{{Second created group}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve deleted group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(404);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: not found\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created group}}",
									"host": [
										"{{Created group}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "List all groups",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Group collection schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain the created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.self.href == pm.collectionVariables.get(\"Created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Groups endpoint}}",
									"host": [
										"{{Groups endpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.collectionVariables.set(\"Group item schema\", {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"id\": { \"type\": \"integer\" },",
									"        \"name\": { \"type\": \"string\" },",
									"        \"_links\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"self\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"group\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"owner\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"users\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"permissions\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"positions\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"jurisdictions\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                }",
									"            },",
									"            \"required\": [",
									"                \"self\",",
									"                \"group\",",
									"                \"owner\",",
									"                \"users\",",
									"                \"permissions\",",
									"                \"positions\",",
									"                \"jurisdictions\"",
									"            ],",
									"            \"additionalProperties\": false",
									"        }",
									"    },",
									"    \"required\": [",
									"        \"id\",",
									"        \"name\",",
									"        \"_links\"",
									"    ],",
									"    \"additionalProperties\": false",
									"});",
									"",
									"pm.collectionVariables.set(\"Group collection schema\", {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"_embedded\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"groups\": {",
									"                    \"type\": \"array\",",
									"                    \"items\": pm.collectionVariables.get(\"Group item schema\"),",
									"                    \"uniqueItems\": true",
									"                }",
									"            },",
									"            \"required\": [ \"groups\" ],",
									"            \"additionalProperties\": false",
									"        },",
									"        \"_links\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"self\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"profile\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                }",
									"            },",
									"            \"required\": [ \"self\", \"profile\" ],",
									"            \"additionalProperties\": false",
									"        },",
									"    },",
									"    \"required\": [ \"_embedded\", \"_links\" ],",
									"    \"additionalProperties\": false",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Permission Type",
					"item": [
						{
							"name": "Create a permission type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 201 Created status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(201);\r",
											"    pm.expect(response.status).to.equal(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Permission type item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Permission type name\"));\r",
											"    pm.expect(jsonData.description).to.equal(pm.collectionVariables.get(\"Permission type description\"));\r",
											"    pm.expect(jsonData.displayOrder).to.equal(parseInt(pm.collectionVariables.get(\"Display order\")));\r",
											"\r",
											"    pm.collectionVariables.set(\"Created permission type\", jsonData._links.permissionType.href);\r",
											"    pm.collectionVariables.set(\"Created permission type's permissions\", jsonData._links.permissions.href);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Permission type name}}\",\n    \"description\": \"{{Permission type description}}\",\n    \"displayOrder\": {{Display order}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Permission types endpoint}}",
									"host": [
										"{{Permission types endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "List all permission types",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Permission type collection schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the created permission type\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const permissionTypes = jsonData._embedded.permissionTypes;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < permissionTypes.length; i++) {\r",
											"        if (permissionTypes[i]._links.permissionType.href == pm.collectionVariables.get(\"Created permission type\")) {\r",
											"            pm.expect(permissionTypes[i].name.trimEnd()).to.equal(pm.collectionVariables.get(\"Permission type name\"));\r",
											"            pm.expect(permissionTypes[i].description).to.equal(pm.collectionVariables.get(\"Permission type description\"));\r",
											"            pm.expect(permissionTypes[i].displayOrder).to.equal(parseInt(pm.collectionVariables.get(\"Display order\")));\r",
											"            pm.expect(permissionTypes[i]._links.self.href).to.equal(pm.collectionVariables.get(\"Created permission type\"));\r",
											"            pm.expect(permissionTypes[i]._links.permissionType.href).to.equal(pm.collectionVariables.get(\"Created permission type\"));\r",
											"            pm.expect(permissionTypes[i]._links.permissions.href).to.equal(pm.collectionVariables.get(\"Created permission type's permissions\"));\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Permission types endpoint}}",
									"host": [
										"{{Permission types endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve created permission type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Permission type item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Permission type name\"));\r",
											"    pm.expect(jsonData.description).to.equal(pm.collectionVariables.get(\"Permission type description\"));\r",
											"    pm.expect(jsonData.displayOrder).to.equal(parseInt(pm.collectionVariables.get(\"Display order\")));\r",
											"\r",
											"    pm.expect(jsonData._links.self.href).to.equal(pm.collectionVariables.get(\"Created permission type\"));\r",
											"    pm.expect(jsonData._links.permissionType.href).to.equal(pm.collectionVariables.get(\"Created permission type\"));\r",
											"    pm.expect(jsonData._links.permissions.href).to.equal(pm.collectionVariables.get(\"Created permission type's permissions\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created permission type}}",
									"host": [
										"{{Created permission type}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve non existent permission type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(404);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: not found\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Permission types endpoint}}/{{Incorrect id}}",
									"host": [
										"{{Permission types endpoint}}"
									],
									"path": [
										"{{Incorrect id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update permission type via PUT with partial data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Permission type item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Permission type name\"));\r",
											"    pm.expect(jsonData.description).to.equal(pm.collectionVariables.get(\"Modified permission type description\"));\r",
											"    pm.expect(jsonData.displayOrder).to.be.null;\r",
											"\r",
											"    pm.expect(jsonData._links.self.href).to.equal(pm.collectionVariables.get(\"Created permission type\"));\r",
											"    pm.expect(jsonData._links.permissionType.href).to.equal(pm.collectionVariables.get(\"Created permission type\"));\r",
											"    pm.expect(jsonData._links.permissions.href).to.equal(pm.collectionVariables.get(\"Created permission type's permissions\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"description\": \"{{Modified permission type description}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created permission type}}",
									"host": [
										"{{Created permission type}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update permission type via PUT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Permission type item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Permission type name\"));\r",
											"    pm.expect(jsonData.description).to.equal(pm.collectionVariables.get(\"Permission type description\"));\r",
											"    pm.expect(jsonData.displayOrder).to.equal(parseInt(pm.collectionVariables.get(\"Display order\")));\r",
											"\r",
											"    pm.expect(jsonData._links.self.href).to.equal(pm.collectionVariables.get(\"Created permission type\"));\r",
											"    pm.expect(jsonData._links.permissionType.href).to.equal(pm.collectionVariables.get(\"Created permission type\"));\r",
											"    pm.expect(jsonData._links.permissions.href).to.equal(pm.collectionVariables.get(\"Created permission type's permissions\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Permission type name}}\",\n    \"description\": \"{{Permission type description}}\",\n    \"displayOrder\": {{Display order}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created permission type}}",
									"host": [
										"{{Created permission type}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update non existent permission type via PUT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 201 Created status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(201);\r",
											"    pm.expect(response.status).to.equal(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Permission type item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Incorrect id\"));\r",
											"    pm.expect(jsonData.description).to.equal(pm.collectionVariables.get(\"Modified permission type description\"));\r",
											"    pm.expect(jsonData.displayOrder).to.equal(parseInt(pm.collectionVariables.get(\"Display order\")));\r",
											"\r",
											"    pm.collectionVariables.set(\"Second created permission type\", jsonData._links.permissionType.href);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Permission type name}}\",\n    \"description\": \"{{Modified permission type description}}\",\n    \"displayOrder\": {{Display order}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Permission types endpoint}}/{{Incorrect id}}",
									"host": [
										"{{Permission types endpoint}}"
									],
									"path": [
										"{{Incorrect id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete second created permission type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Second created permission type}}",
									"host": [
										"{{Second created permission type}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update permission type via PATCH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Permission type item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Permission type name\"));\r",
											"    pm.expect(jsonData.description).to.equal(pm.collectionVariables.get(\"Modified permission type description\"));\r",
											"    pm.expect(jsonData.displayOrder).to.equal(parseInt(pm.collectionVariables.get(\"Display order\")));\r",
											"\r",
											"    pm.expect(jsonData._links.self.href).to.equal(pm.collectionVariables.get(\"Created permission type\"));\r",
											"    pm.expect(jsonData._links.permissionType.href).to.equal(pm.collectionVariables.get(\"Created permission type\"));\r",
											"    pm.expect(jsonData._links.permissions.href).to.equal(pm.collectionVariables.get(\"Created permission type's permissions\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"description\": \"{{Modified permission type description}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created permission type}}",
									"host": [
										"{{Created permission type}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update non existent permission type via PATCH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(404);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: not found\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"description\": \"{{Permission type description}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Permission types endpoint}}/{{Incorrect id}}",
									"host": [
										"{{Permission types endpoint}}"
									],
									"path": [
										"{{Incorrect id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete created permission type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Created permission type}}",
									"host": [
										"{{Created permission type}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete non existent permission type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(404);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: not found\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Second created permission type}}",
									"host": [
										"{{Second created permission type}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve deleted permission type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(404);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: not found\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created permission type}}",
									"host": [
										"{{Created permission type}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "List all permission types",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Permission type collection schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain the created permission type\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const permissionTypes = jsonData._embedded.permissionTypes;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < permissionTypes.length; i++) {\r",
											"        if (permissionTypes[i]._links.self.href == pm.collectionVariables.get(\"Created permission type\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Permission types endpoint}}",
									"host": [
										"{{Permission types endpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.collectionVariables.set(\"Permission type item schema\", {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"name\": { \"type\": \"string\" },",
									"        \"description\": { \"type\": \"string\" },",
									"        \"displayOrder\": { \"type\": [ \"number\", \"null\" ] },",
									"        \"_links\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"self\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"permissionType\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"permissions\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                }",
									"            },",
									"            \"required\": [",
									"                \"self\",",
									"                \"permissionType\",",
									"                \"permissions\"",
									"            ],",
									"            \"additionalProperties\": false",
									"        }",
									"    },",
									"    \"required\": [",
									"        \"name\",",
									"        \"description\",",
									"        \"displayOrder\",",
									"        \"_links\"",
									"    ],",
									"    \"additionalProperties\": false",
									"});",
									"",
									"pm.collectionVariables.set(\"Permission type collection schema\", {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"_embedded\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"permissionTypes\": {",
									"                    \"type\": \"array\",",
									"                    \"items\": pm.collectionVariables.get(\"Permission type item schema\"),",
									"                    \"uniqueItems\": true",
									"                }",
									"            },",
									"            \"required\": [ \"permissionTypes\" ],",
									"            \"additionalProperties\": false",
									"        },",
									"        \"_links\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"self\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"profile\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                }",
									"            },",
									"            \"required\": [ \"self\", \"profile\" ],",
									"            \"additionalProperties\": false",
									"        },",
									"    },",
									"    \"required\": [ \"_embedded\", \"_links\" ],",
									"    \"additionalProperties\": false",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Permission",
					"item": [
						{
							"name": "Create a permission",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 201 Created status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(201);\r",
											"    pm.expect(response.status).to.equal(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Permission item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Permission name\"));\r",
											"    pm.expect(jsonData.description).to.equal(pm.collectionVariables.get(\"Permission description\"));\r",
											"    pm.expect(jsonData.displayOrder).to.equal(parseInt(pm.collectionVariables.get(\"Display order\")));\r",
											"\r",
											"    pm.collectionVariables.set(\"Created permission\", jsonData._links.permission.href);\r",
											"    pm.collectionVariables.set(\"Created permission's type\", jsonData._links.type.href);\r",
											"    pm.collectionVariables.set(\"Created permission's users\", jsonData._links.users.href);\r",
											"    pm.collectionVariables.set(\"Created permission's groups\", jsonData._links.groups.href);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Permission name}}\",\n    \"description\": \"{{Permission description}}\",\n    \"displayOrder\": {{Display order}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Permissions endpoint}}",
									"host": [
										"{{Permissions endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "List all permissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Permission collection schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the created permission\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const permissions = jsonData._embedded.permissions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < permissions.length; i++) {\r",
											"        if (permissions[i]._links.permission.href == pm.collectionVariables.get(\"Created permission\")) {\r",
											"            pm.expect(permissions[i].name).to.equal(pm.collectionVariables.get(\"Permission name\"));\r",
											"            pm.expect(permissions[i].description).to.equal(pm.collectionVariables.get(\"Permission description\"));\r",
											"            pm.expect(permissions[i].displayOrder).to.equal(parseInt(pm.collectionVariables.get(\"Display order\")));\r",
											"            pm.expect(permissions[i]._links.self.href).to.equal(pm.collectionVariables.get(\"Created permission\"));\r",
											"            pm.expect(permissions[i]._links.permission.href).to.equal(pm.collectionVariables.get(\"Created permission\"));\r",
											"            pm.expect(permissions[i]._links.type.href).to.equal(pm.collectionVariables.get(\"Created permission's type\"));\r",
											"            pm.expect(permissions[i]._links.users.href).to.equal(pm.collectionVariables.get(\"Created permission's users\"));\r",
											"            pm.expect(permissions[i]._links.groups.href).to.equal(pm.collectionVariables.get(\"Created permission's groups\"));\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Permissions endpoint}}",
									"host": [
										"{{Permissions endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve created permission",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Permission item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Permission name\"));\r",
											"    pm.expect(jsonData.description).to.equal(pm.collectionVariables.get(\"Permission description\"));\r",
											"    pm.expect(jsonData.displayOrder).to.equal(parseInt(pm.collectionVariables.get(\"Display order\")));\r",
											"\r",
											"    pm.expect(jsonData._links.self.href).to.equal(pm.collectionVariables.get(\"Created permission\"));\r",
											"    pm.expect(jsonData._links.permission.href).to.equal(pm.collectionVariables.get(\"Created permission\"));\r",
											"    pm.expect(jsonData._links.type.href).to.equal(pm.collectionVariables.get(\"Created permission's type\"));\r",
											"    pm.expect(jsonData._links.users.href).to.equal(pm.collectionVariables.get(\"Created permission's users\"));\r",
											"    pm.expect(jsonData._links.groups.href).to.equal(pm.collectionVariables.get(\"Created permission's groups\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created permission}}",
									"host": [
										"{{Created permission}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve non existent permission",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(404);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: not found\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Permissions endpoint}}/{{Incorrect id}}",
									"host": [
										"{{Permissions endpoint}}"
									],
									"path": [
										"{{Incorrect id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update permission via PUT with partial data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Permission item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Permission name\"));\r",
											"    pm.expect(jsonData.description).to.equal(pm.collectionVariables.get(\"Modified permission description\"));\r",
											"    pm.expect(jsonData.displayOrder).to.be.null;\r",
											"\r",
											"    pm.expect(jsonData._links.self.href).to.equal(pm.collectionVariables.get(\"Created permission\"));\r",
											"    pm.expect(jsonData._links.permission.href).to.equal(pm.collectionVariables.get(\"Created permission\"));\r",
											"    pm.expect(jsonData._links.type.href).to.equal(pm.collectionVariables.get(\"Created permission's type\"));\r",
											"    pm.expect(jsonData._links.users.href).to.equal(pm.collectionVariables.get(\"Created permission's users\"));\r",
											"    pm.expect(jsonData._links.groups.href).to.equal(pm.collectionVariables.get(\"Created permission's groups\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"description\": \"{{Modified permission description}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created permission}}",
									"host": [
										"{{Created permission}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update permission via PUT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Permission item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Permission name\"));\r",
											"    pm.expect(jsonData.description).to.equal(pm.collectionVariables.get(\"Permission description\"));\r",
											"    pm.expect(jsonData.displayOrder).to.equal(parseInt(pm.collectionVariables.get(\"Display order\")));\r",
											"\r",
											"    pm.expect(jsonData._links.self.href).to.equal(pm.collectionVariables.get(\"Created permission\"));\r",
											"    pm.expect(jsonData._links.permission.href).to.equal(pm.collectionVariables.get(\"Created permission\"));\r",
											"    pm.expect(jsonData._links.type.href).to.equal(pm.collectionVariables.get(\"Created permission's type\"));\r",
											"    pm.expect(jsonData._links.users.href).to.equal(pm.collectionVariables.get(\"Created permission's users\"));\r",
											"    pm.expect(jsonData._links.groups.href).to.equal(pm.collectionVariables.get(\"Created permission's groups\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Permission name}}\",\n    \"description\": \"{{Permission description}}\",\n    \"displayOrder\": {{Display order}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created permission}}",
									"host": [
										"{{Created permission}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update non existent permission via PUT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 201 Created status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(201);\r",
											"    pm.expect(response.status).to.equal(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Permission item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Incorrect id\"));\r",
											"    pm.expect(jsonData.description).to.equal(pm.collectionVariables.get(\"Modified permission description\"));\r",
											"    pm.expect(jsonData.displayOrder).to.equal(parseInt(pm.collectionVariables.get(\"Display order\")));\r",
											"\r",
											"    pm.collectionVariables.set(\"Second created permission\", jsonData._links.permission.href);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Permission name}}\",\n    \"description\": \"{{Modified permission description}}\",\n    \"displayOrder\": {{Display order}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Permissions endpoint}}/{{Incorrect id}}",
									"host": [
										"{{Permissions endpoint}}"
									],
									"path": [
										"{{Incorrect id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete second created permission",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Second created permission}}",
									"host": [
										"{{Second created permission}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update permission via PATCH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Permission item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Permission name\"));\r",
											"    pm.expect(jsonData.description).to.equal(pm.collectionVariables.get(\"Modified permission description\"));\r",
											"    pm.expect(jsonData.displayOrder).to.equal(parseInt(pm.collectionVariables.get(\"Display order\")));\r",
											"\r",
											"    pm.expect(jsonData._links.self.href).to.equal(pm.collectionVariables.get(\"Created permission\"));\r",
											"    pm.expect(jsonData._links.permission.href).to.equal(pm.collectionVariables.get(\"Created permission\"));\r",
											"    pm.expect(jsonData._links.type.href).to.equal(pm.collectionVariables.get(\"Created permission's type\"));\r",
											"    pm.expect(jsonData._links.users.href).to.equal(pm.collectionVariables.get(\"Created permission's users\"));\r",
											"    pm.expect(jsonData._links.groups.href).to.equal(pm.collectionVariables.get(\"Created permission's groups\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"description\": \"{{Modified permission description}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created permission}}",
									"host": [
										"{{Created permission}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update non existent permission via PATCH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(404);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: not found\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"description\": \"{{Permission description}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Permissions endpoint}}/{{Incorrect id}}",
									"host": [
										"{{Permissions endpoint}}"
									],
									"path": [
										"{{Incorrect id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "List all permission search options",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.eql(200);\r",
											"    pm.expect(response.status).to.eql(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Permission search root schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Permissions endpoint}}/search",
									"host": [
										"{{Permissions endpoint}}"
									],
									"path": [
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve permissions by name containing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Permission search term schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the created permission\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const permissions = jsonData._embedded.permissions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < permissions.length; i++) {\r",
											"        if (permissions[i]._links.permission.href == pm.collectionVariables.get(\"Created permission\")) {\r",
											"            pm.expect(permissions[i].name).to.equal(pm.collectionVariables.get(\"Permission name\"));\r",
											"            pm.expect(permissions[i].description).to.equal(pm.collectionVariables.get(\"Modified permission description\"));\r",
											"            pm.expect(permissions[i].displayOrder).to.equal(parseInt(pm.collectionVariables.get(\"Display order\")));\r",
											"            pm.expect(permissions[i]._links.self.href).to.equal(pm.collectionVariables.get(\"Created permission\"));\r",
											"            pm.expect(permissions[i]._links.permission.href).to.equal(pm.collectionVariables.get(\"Created permission\"));\r",
											"            pm.expect(permissions[i]._links.type.href).to.equal(pm.collectionVariables.get(\"Created permission's type\"));\r",
											"            pm.expect(permissions[i]._links.users.href).to.equal(pm.collectionVariables.get(\"Created permission's users\"));\r",
											"            pm.expect(permissions[i]._links.groups.href).to.equal(pm.collectionVariables.get(\"Created permission's groups\"));\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Permissions endpoint}}/search/byNameLike?name=sensitive",
									"host": [
										"{{Permissions endpoint}}"
									],
									"path": [
										"search",
										"byNameLike"
									],
									"query": [
										{
											"key": "name",
											"value": "sensitive"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete created permission",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Created permission}}",
									"host": [
										"{{Created permission}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete non existent permission",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(404);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: not found\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Second created permission}}",
									"host": [
										"{{Second created permission}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve deleted permission",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(404);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: not found\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created permission}}",
									"host": [
										"{{Created permission}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "List all permissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Permission collection schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain the created permission\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const permissions = jsonData._embedded.permissions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < permissions.length; i++) {\r",
											"        if (permissions[i]._links.self.href == pm.collectionVariables.get(\"Created permission\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Permissions endpoint}}",
									"host": [
										"{{Permissions endpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.collectionVariables.set(\"Permission item schema\", {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"name\": { \"type\": \"string\" },",
									"        \"description\": { \"type\": \"string\" },",
									"        \"displayOrder\": { \"type\": [ \"number\", \"null\" ] },",
									"        \"_links\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"self\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"permission\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"type\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"users\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"groups\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                }                ",
									"            },",
									"            \"required\": [",
									"                \"self\",",
									"                \"permission\",",
									"                \"type\",",
									"                \"users\",",
									"                \"groups\"",
									"            ],",
									"            \"additionalProperties\": false",
									"        }",
									"    },",
									"    \"required\": [",
									"        \"name\",",
									"        \"description\",",
									"        \"displayOrder\",",
									"        \"_links\"",
									"    ],",
									"    \"additionalProperties\": false",
									"});",
									"",
									"pm.collectionVariables.set(\"Permission collection schema\", {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"_embedded\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"permissions\": {",
									"                    \"type\": \"array\",",
									"                    \"items\": pm.collectionVariables.get(\"Permission item schema\"),",
									"                    \"uniqueItems\": true",
									"                }",
									"            },",
									"            \"required\": [ \"permissions\" ],",
									"            \"additionalProperties\": false",
									"        },",
									"        \"_links\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"self\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"profile\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"search\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                }",
									"            },",
									"            \"required\": [ \"self\", \"profile\", \"search\" ],",
									"            \"additionalProperties\": false",
									"        },",
									"    },",
									"    \"required\": [ \"_embedded\", \"_links\" ],",
									"    \"additionalProperties\": false",
									"});",
									"",
									"",
									"pm.collectionVariables.set(\"Permission search root schema\", {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"_links\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"byNameLike\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" },",
									"                        \"templated\": { \"type\": \"boolean\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"self\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" },",
									"                        \"templated\": { \"type\": \"boolean\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                }",
									"            },",
									"            \"required\": [ \"byNameLike\", \"self\" ],",
									"            \"additionalProperties\": false",
									"        },",
									"    },",
									"    \"required\": [ \"_links\" ],",
									"    \"additionalProperties\": false",
									"});",
									"",
									"pm.collectionVariables.set(\"Permission search term schema\", {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"_embedded\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"permissions\": {",
									"                    \"type\": \"array\",",
									"                    \"items\": pm.collectionVariables.get(\"Permission item schema\"),",
									"                    \"uniqueItems\": true",
									"                }",
									"            },",
									"            \"required\": [ \"permissions\" ],",
									"            \"additionalProperties\": false",
									"        },",
									"        \"_links\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"self\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                }",
									"            },",
									"            \"required\": [ \"self\" ],",
									"            \"additionalProperties\": false",
									"        },",
									"    },",
									"    \"required\": [ \"_embedded\", \"_links\" ],",
									"    \"additionalProperties\": false",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Timezone",
					"item": [
						{
							"name": "Create a timezone",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 201 Created status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(201);\r",
											"    pm.expect(response.status).to.equal(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Timezone item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Timezone name\"));\r",
											"    pm.expect(jsonData.status).to.equal(pm.collectionVariables.get(\"Timezone status\"));\r",
											"    pm.expect(jsonData.display).to.equal(pm.collectionVariables.get(\"Display\"));\r",
											"\r",
											"    pm.collectionVariables.set(\"Created timezone\", jsonData._links.timezone.href);\r",
											"    pm.collectionVariables.set(\"Created timezone's users\", jsonData._links.users.href);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Timezone name}}\",\n    \"status\": \"{{Timezone status}}\",\n    \"display\": \"{{Display}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Timezones endpoint}}",
									"host": [
										"{{Timezones endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "List all timezones",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Timezone collection schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the created timezone\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const timezones = jsonData._embedded.timezones;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < timezones.length; i++) {\r",
											"        if (timezones[i]._links.timezone.href == pm.collectionVariables.get(\"Created timezone\")) {\r",
											"            pm.expect(timezones[i].name).to.equal(pm.collectionVariables.get(\"Timezone name\"));\r",
											"            pm.expect(timezones[i].status).to.equal(pm.collectionVariables.get(\"Timezone status\"));\r",
											"            pm.expect(timezones[i].display).to.equal(pm.collectionVariables.get(\"Display\"));\r",
											"            pm.expect(timezones[i]._links.self.href).to.equal(pm.collectionVariables.get(\"Created timezone\"));\r",
											"            pm.expect(timezones[i]._links.timezone.href).to.equal(pm.collectionVariables.get(\"Created timezone\"));\r",
											"            pm.expect(timezones[i]._links.users.href).to.equal(pm.collectionVariables.get(\"Created timezone's users\"));\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Timezones endpoint}}",
									"host": [
										"{{Timezones endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve created timezone",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Timezone item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Timezone name\"));\r",
											"    pm.expect(jsonData.status).to.equal(pm.collectionVariables.get(\"Timezone status\"));\r",
											"    pm.expect(jsonData.display).to.equal(pm.collectionVariables.get(\"Display\"));\r",
											"\r",
											"    pm.expect(jsonData._links.self.href).to.equal(pm.collectionVariables.get(\"Created timezone\"));\r",
											"    pm.expect(jsonData._links.timezone.href).to.equal(pm.collectionVariables.get(\"Created timezone\"));\r",
											"    pm.expect(jsonData._links.users.href).to.equal(pm.collectionVariables.get(\"Created timezone's users\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created timezone}}",
									"host": [
										"{{Created timezone}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve non existent timezone",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(404);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: not found\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Timezones endpoint}}/{{Incorrect id}}",
									"host": [
										"{{Timezones endpoint}}"
									],
									"path": [
										"{{Incorrect id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update timezone via PUT with partial data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Timezone item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Modified timezone name\"));\r",
											"    pm.expect(jsonData.status).to.equal(pm.collectionVariables.get(\"Timezone status\"));\r",
											"    pm.expect(jsonData.display).to.equal(\"N\");\r",
											"\r",
											"    pm.expect(jsonData._links.self.href).to.equal(pm.collectionVariables.get(\"Created timezone\"));\r",
											"    pm.expect(jsonData._links.timezone.href).to.equal(pm.collectionVariables.get(\"Created timezone\"));\r",
											"    pm.expect(jsonData._links.users.href).to.equal(pm.collectionVariables.get(\"Created timezone's users\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Modified timezone name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created timezone}}",
									"host": [
										"{{Created timezone}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update timezone via PUT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Timezone item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Timezone name\"));\r",
											"    pm.expect(jsonData.status).to.equal(pm.collectionVariables.get(\"Timezone status\"));\r",
											"    pm.expect(jsonData.display).to.equal(pm.collectionVariables.get(\"Display\"));\r",
											"\r",
											"    pm.expect(jsonData._links.self.href).to.equal(pm.collectionVariables.get(\"Created timezone\"));\r",
											"    pm.expect(jsonData._links.timezone.href).to.equal(pm.collectionVariables.get(\"Created timezone\"));\r",
											"    pm.expect(jsonData._links.users.href).to.equal(pm.collectionVariables.get(\"Created timezone's users\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Timezone name}}\",\n    \"status\": \"{{Timezone status}}\",\n    \"display\": \"{{Display}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created timezone}}",
									"host": [
										"{{Created timezone}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update non existent timezone via PUT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 201 Created status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(201);\r",
											"    pm.expect(response.status).to.equal(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Timezone item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Modified timezone name\"));\r",
											"    pm.expect(jsonData.status).to.equal(pm.collectionVariables.get(\"Timezone status\"));\r",
											"    pm.expect(jsonData.display).to.equal(pm.collectionVariables.get(\"Display\"));\r",
											"\r",
											"    pm.collectionVariables.set(\"Second created timezone\", jsonData._links.timezone.href);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Modified timezone name}}\",\n    \"status\": \"{{Timezone status}}\",\n    \"display\": \"{{Display}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Timezones endpoint}}/{{Incorrect id}}",
									"host": [
										"{{Timezones endpoint}}"
									],
									"path": [
										"{{Incorrect id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete second created timezone",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Second created timezone}}",
									"host": [
										"{{Second created timezone}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update timezone via PATCH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Timezone item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Modified timezone name\"));\r",
											"    pm.expect(jsonData.status).to.equal(pm.collectionVariables.get(\"Timezone status\"));\r",
											"    pm.expect(jsonData.display).to.equal(pm.collectionVariables.get(\"Display\"));\r",
											"\r",
											"    pm.expect(jsonData._links.self.href).to.equal(pm.collectionVariables.get(\"Created timezone\"));\r",
											"    pm.expect(jsonData._links.timezone.href).to.equal(pm.collectionVariables.get(\"Created timezone\"));\r",
											"    pm.expect(jsonData._links.users.href).to.equal(pm.collectionVariables.get(\"Created timezone's users\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Modified timezone name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created timezone}}",
									"host": [
										"{{Created timezone}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update non existent timezone via PATCH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(404);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: not found\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Timezone name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Timezones endpoint}}/{{Incorrect id}}",
									"host": [
										"{{Timezones endpoint}}"
									],
									"path": [
										"{{Incorrect id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete created timezone",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Created timezone}}",
									"host": [
										"{{Created timezone}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete non existent timezone",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(404);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: not found\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Second created timezone}}",
									"host": [
										"{{Second created timezone}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve deleted timezone",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(404);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: not found\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created timezone}}",
									"host": [
										"{{Created timezone}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "List all timezone",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Timezone collection schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain the created timezone\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const timezones = jsonData._embedded.timezones;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < timezones.length; i++) {\r",
											"        if (timezones[i]._links.self.href == pm.collectionVariables.get(\"Created timezone\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Timezones endpoint}}",
									"host": [
										"{{Timezones endpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.collectionVariables.set(\"Timezone item schema\", {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"name\": { \"type\": \"string\" },",
									"        \"status\": { \"type\": \"string\", \"enum\": [ \"A\", \"S\", \"D\" ] },",
									"        \"display\": { \"type\": \"string\", \"enum\": [ \"Y\", \"N\" ] },",
									"        \"_links\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"self\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"timezone\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"users\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                }",
									"            },",
									"            \"required\": [",
									"                \"self\",",
									"                \"timezone\",",
									"                \"users\"",
									"            ],",
									"            \"additionalProperties\": false",
									"        }",
									"    },",
									"    \"required\": [",
									"        \"name\",",
									"        \"status\",",
									"        \"display\",",
									"        \"_links\"",
									"    ],",
									"    \"additionalProperties\": false",
									"});",
									"",
									"pm.collectionVariables.set(\"Timezone collection schema\", {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"_embedded\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"timezones\": {",
									"                    \"type\": \"array\",",
									"                    \"items\": pm.collectionVariables.get(\"Timezone item schema\"),",
									"                    \"uniqueItems\": true",
									"                }",
									"            },",
									"            \"required\": [ \"timezones\" ],",
									"            \"additionalProperties\": false",
									"        },",
									"        \"_links\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"self\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"profile\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                }",
									"            },",
									"            \"required\": [ \"self\", \"profile\" ],",
									"            \"additionalProperties\": false",
									"        },",
									"    },",
									"    \"required\": [ \"_embedded\", \"_links\" ],",
									"    \"additionalProperties\": false",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Position",
					"item": [
						{
							"name": "Create a position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 201 Created status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(201);\r",
											"    pm.expect(response.status).to.equal(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Position item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Position name\"));\r",
											"\r",
											"    pm.collectionVariables.set(\"Created position\", jsonData._links.position.href);\r",
											"    pm.collectionVariables.set(\"Created position's child positions\", jsonData._links.childPositions.href);\r",
											"    pm.collectionVariables.set(\"Created position's parent position\", jsonData._links.parentPosition.href);\r",
											"    pm.collectionVariables.set(\"Created position's users\", jsonData._links.users.href);\r",
											"    pm.collectionVariables.set(\"Created position's groups\", jsonData._links.groups.href);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Position name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Positions endpoint}}",
									"host": [
										"{{Positions endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "List all positions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Position collection schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the created position\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const positions = jsonData._embedded.positions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < positions.length; i++) {\r",
											"        if (positions[i]._links.position.href == pm.collectionVariables.get(\"Created position\")) {\r",
											"            pm.expect(positions[i].name).to.equal(pm.collectionVariables.get(\"Position name\"));\r",
											"            pm.expect(positions[i]._links.self.href).to.equal(pm.collectionVariables.get(\"Created position\"));\r",
											"            pm.expect(positions[i]._links.position.href).to.equal(pm.collectionVariables.get(\"Created position\"));\r",
											"            pm.expect(positions[i]._links.childPositions.href).to.equal(pm.collectionVariables.get(\"Created position's child positions\"));\r",
											"            pm.expect(positions[i]._links.parentPosition.href).to.equal(pm.collectionVariables.get(\"Created position's parent position\"));\r",
											"            pm.expect(positions[i]._links.users.href).to.equal(pm.collectionVariables.get(\"Created position's users\"));\r",
											"            pm.expect(positions[i]._links.groups.href).to.equal(pm.collectionVariables.get(\"Created position's groups\"));\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Positions endpoint}}",
									"host": [
										"{{Positions endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve created position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Position item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Position name\"));\r",
											"\r",
											"    pm.expect(jsonData._links.self.href).to.equal(pm.collectionVariables.get(\"Created position\"));\r",
											"    pm.expect(jsonData._links.position.href).to.equal(pm.collectionVariables.get(\"Created position\"));\r",
											"    pm.expect(jsonData._links.childPositions.href).to.equal(pm.collectionVariables.get(\"Created position's child positions\"));\r",
											"    pm.expect(jsonData._links.parentPosition.href).to.equal(pm.collectionVariables.get(\"Created position's parent position\"));\r",
											"    pm.expect(jsonData._links.users.href).to.equal(pm.collectionVariables.get(\"Created position's users\"));\r",
											"    pm.expect(jsonData._links.groups.href).to.equal(pm.collectionVariables.get(\"Created position's groups\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created position}}",
									"host": [
										"{{Created position}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve non existent position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(404);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: not found\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Positions endpoint}}/{{Incorrect id}}",
									"host": [
										"{{Positions endpoint}}"
									],
									"path": [
										"{{Incorrect id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update position via PUT with partial data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Position item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Modified position name\"));\r",
											"\r",
											"    pm.expect(jsonData._links.self.href).to.equal(pm.collectionVariables.get(\"Created position\"));\r",
											"    pm.expect(jsonData._links.position.href).to.equal(pm.collectionVariables.get(\"Created position\"));\r",
											"    pm.expect(jsonData._links.childPositions.href).to.equal(pm.collectionVariables.get(\"Created position's child positions\"));\r",
											"    pm.expect(jsonData._links.parentPosition.href).to.equal(pm.collectionVariables.get(\"Created position's parent position\"));\r",
											"    pm.expect(jsonData._links.users.href).to.equal(pm.collectionVariables.get(\"Created position's users\"));\r",
											"    pm.expect(jsonData._links.groups.href).to.equal(pm.collectionVariables.get(\"Created position's groups\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Modified position name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created position}}",
									"host": [
										"{{Created position}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update position via PUT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Position item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Position name\"));\r",
											"\r",
											"    pm.expect(jsonData._links.self.href).to.equal(pm.collectionVariables.get(\"Created position\"));\r",
											"    pm.expect(jsonData._links.position.href).to.equal(pm.collectionVariables.get(\"Created position\"));\r",
											"    pm.expect(jsonData._links.childPositions.href).to.equal(pm.collectionVariables.get(\"Created position's child positions\"));\r",
											"    pm.expect(jsonData._links.parentPosition.href).to.equal(pm.collectionVariables.get(\"Created position's parent position\"));\r",
											"    pm.expect(jsonData._links.users.href).to.equal(pm.collectionVariables.get(\"Created position's users\"));\r",
											"    pm.expect(jsonData._links.groups.href).to.equal(pm.collectionVariables.get(\"Created position's groups\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Position name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created position}}",
									"host": [
										"{{Created position}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update non existent position via PUT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 201 Created status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(201);\r",
											"    pm.expect(response.status).to.equal(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Position item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Modified position name\"));\r",
											"\r",
											"    pm.collectionVariables.set(\"Second created position\", jsonData._links.position.href);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Modified position name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Positions endpoint}}/{{Incorrect id}}",
									"host": [
										"{{Positions endpoint}}"
									],
									"path": [
										"{{Incorrect id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete second created position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Second created position}}",
									"host": [
										"{{Second created position}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update position via PATCH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Position item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Modified position name\"));\r",
											"\r",
											"    pm.expect(jsonData._links.self.href).to.equal(pm.collectionVariables.get(\"Created position\"));\r",
											"    pm.expect(jsonData._links.position.href).to.equal(pm.collectionVariables.get(\"Created position\"));\r",
											"    pm.expect(jsonData._links.childPositions.href).to.equal(pm.collectionVariables.get(\"Created position's child positions\"));\r",
											"    pm.expect(jsonData._links.parentPosition.href).to.equal(pm.collectionVariables.get(\"Created position's parent position\"));\r",
											"    pm.expect(jsonData._links.users.href).to.equal(pm.collectionVariables.get(\"Created position's users\"));\r",
											"    pm.expect(jsonData._links.groups.href).to.equal(pm.collectionVariables.get(\"Created position's groups\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Modified position name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created position}}",
									"host": [
										"{{Created position}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update non existent position via PATCH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(404);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: not found\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Position name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Positions endpoint}}/{{Incorrect id}}",
									"host": [
										"{{Positions endpoint}}"
									],
									"path": [
										"{{Incorrect id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete created position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Created position}}",
									"host": [
										"{{Created position}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete non existent position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(404);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: not found\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Second created position}}",
									"host": [
										"{{Second created position}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve deleted position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(404);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: not found\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created position}}",
									"host": [
										"{{Created position}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "List all positions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Position collection schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain the created position\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const positions = jsonData._embedded.positions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < positions.length; i++) {\r",
											"        if (positions[i]._links.self.href == pm.collectionVariables.get(\"Created position\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Positions endpoint}}",
									"host": [
										"{{Positions endpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.collectionVariables.set(\"Position item schema\", {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"name\": { \"type\": \"string\" },",
									"        \"_links\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"self\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"position\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"childPositions\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"parentPosition\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"users\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"groups\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                }                ",
									"            },",
									"            \"required\": [",
									"                \"self\",",
									"                \"position\",",
									"                \"childPositions\",",
									"                \"parentPosition\",",
									"                \"users\",",
									"                \"groups\"",
									"            ],",
									"            \"additionalProperties\": false",
									"        }",
									"    },",
									"    \"required\": [",
									"        \"name\",",
									"        \"_links\"",
									"    ],",
									"    \"additionalProperties\": false",
									"});",
									"",
									"pm.collectionVariables.set(\"Position collection schema\", {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"_embedded\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"positions\": {",
									"                    \"type\": \"array\",",
									"                    \"items\": pm.collectionVariables.get(\"Position item schema\"),",
									"                    \"uniqueItems\": true",
									"                }",
									"            },",
									"            \"required\": [ \"positions\" ],",
									"            \"additionalProperties\": false",
									"        },",
									"        \"_links\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"self\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"profile\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                }",
									"            },",
									"            \"required\": [ \"self\", \"profile\" ],",
									"            \"additionalProperties\": false",
									"        },",
									"    },",
									"    \"required\": [ \"_embedded\", \"_links\" ],",
									"    \"additionalProperties\": false",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Jurisdiction",
					"item": [
						{
							"name": "Create a jurisdiction",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 201 Created status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(201);\r",
											"    pm.expect(response.status).to.equal(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Jurisdiction item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Jurisdiction name\"));\r",
											"\r",
											"    pm.collectionVariables.set(\"Created jurisdiction\", jsonData._links.jurisdiction.href);\r",
											"    pm.collectionVariables.set(\"Created jurisdiction's groups\", jsonData._links.groups.href);\r",
											"    pm.collectionVariables.set(\"Created jurisdiction's id\", jsonData.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Jurisdiction name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Jurisdictions endpoint}}",
									"host": [
										"{{Jurisdictions endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "List all jurisdictions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Jurisdiction collection schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the created jurisdiction\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const jurisdictions = jsonData._embedded.jurisdictions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < jurisdictions.length; i++) {\r",
											"        if (jurisdictions[i]._links.jurisdiction.href == pm.collectionVariables.get(\"Created jurisdiction\")) {\r",
											"            pm.expect(jurisdictions[i].id).to.equal(pm.collectionVariables.get(\"Created jurisdiction's id\"));\r",
											"            pm.expect(jurisdictions[i].name).to.equal(pm.collectionVariables.get(\"Jurisdiction name\"));\r",
											"            pm.expect(jurisdictions[i]._links.groups.href).to.equal(pm.collectionVariables.get(\"Created jurisdiction's groups\"));\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Jurisdictions endpoint}}",
									"host": [
										"{{Jurisdictions endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve created jurisdiction",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Jurisdiction item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.id).to.equal(pm.collectionVariables.get(\"Created jurisdiction's id\"));\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Jurisdiction name\"));\r",
											"\r",
											"    pm.expect(jsonData._links.self.href).to.equal(pm.collectionVariables.get(\"Created jurisdiction\"));\r",
											"    pm.expect(jsonData._links.jurisdiction.href).to.equal(pm.collectionVariables.get(\"Created jurisdiction\"));\r",
											"    pm.expect(jsonData._links.groups.href).to.equal(pm.collectionVariables.get(\"Created jurisdiction's groups\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created jurisdiction}}",
									"host": [
										"{{Created jurisdiction}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve non existent jurisdiction",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(404);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: not found\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Jurisdictions endpoint}}/{{Incorrect id}}",
									"host": [
										"{{Jurisdictions endpoint}}"
									],
									"path": [
										"{{Incorrect id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update jurisdiction via PUT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Jurisdiction item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.id).to.equal(pm.collectionVariables.get(\"Created jurisdiction's id\"));\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Modified jurisdiction name\"));\r",
											"\r",
											"    pm.expect(jsonData._links.self.href).to.equal(pm.collectionVariables.get(\"Created jurisdiction\"));\r",
											"    pm.expect(jsonData._links.jurisdiction.href).to.equal(pm.collectionVariables.get(\"Created jurisdiction\"));\r",
											"    pm.expect(jsonData._links.groups.href).to.equal(pm.collectionVariables.get(\"Created jurisdiction's groups\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Modified jurisdiction name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created jurisdiction}}",
									"host": [
										"{{Created jurisdiction}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update non existent jurisdiction via PUT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 201 Created status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(201);\r",
											"    pm.expect(response.status).to.equal(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Jurisdiction item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Jurisdiction name\"));\r",
											"\r",
											"    pm.collectionVariables.set(\"Second created jurisdiction\", jsonData._links.jurisdiction.href);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Jurisdiction name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Jurisdictions endpoint}}/{{Incorrect id}}",
									"host": [
										"{{Jurisdictions endpoint}}"
									],
									"path": [
										"{{Incorrect id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete second created jurisdiction",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Second created jurisdiction}}",
									"host": [
										"{{Second created jurisdiction}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update jurisdiction via PATCH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Jurisdiction item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.id).to.equal(pm.collectionVariables.get(\"Created jurisdiction's id\"));\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Jurisdiction name\"));\r",
											"\r",
											"    pm.expect(jsonData._links.self.href).to.equal(pm.collectionVariables.get(\"Created jurisdiction\"));\r",
											"    pm.expect(jsonData._links.jurisdiction.href).to.equal(pm.collectionVariables.get(\"Created jurisdiction\"));\r",
											"    pm.expect(jsonData._links.groups.href).to.equal(pm.collectionVariables.get(\"Created jurisdiction's groups\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Jurisdiction name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created jurisdiction}}",
									"host": [
										"{{Created jurisdiction}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update non existent jurisdiction via PATCH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(404);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: not found\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n\t\"name\": \"{{Modified jurisdiction name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Jurisdictions endpoint}}/{{Incorrect id}}",
									"host": [
										"{{Jurisdictions endpoint}}"
									],
									"path": [
										"{{Incorrect id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete created jurisdiction",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Created jurisdiction}}",
									"host": [
										"{{Created jurisdiction}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete non existent jurisdiction",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(404);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: not found\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Second created jurisdiction}}",
									"host": [
										"{{Second created jurisdiction}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve deleted jurisdiction",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(404);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: not found\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created jurisdiction}}",
									"host": [
										"{{Created jurisdiction}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "List all jurisdictions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Jurisdiction collection schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain the created jurisdiction\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const jurisdictions = jsonData._embedded.jurisdictions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < jurisdictions.length; i++) {\r",
											"        if (jurisdictions[i]._links.self.href == pm.collectionVariables.get(\"Created jurisdiction\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Jurisdictions endpoint}}",
									"host": [
										"{{Jurisdictions endpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.collectionVariables.set(\"Jurisdiction item schema\", {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"id\": { \"type\": \"integer\" },",
									"        \"name\": { \"type\": \"string\" },",
									"        \"_links\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"self\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"jurisdiction\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"groups\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                }",
									"            },",
									"            \"required\": [",
									"                \"self\",",
									"                \"groups\"",
									"            ],",
									"            \"additionalProperties\": false",
									"        }",
									"    },",
									"    \"required\": [",
									"        \"id\",",
									"        \"name\",",
									"        \"_links\"",
									"    ],",
									"    \"additionalProperties\": false",
									"});",
									"",
									"pm.collectionVariables.set(\"Jurisdiction collection schema\", {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"_embedded\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"jurisdictions\": {",
									"                    \"type\": \"array\",",
									"                    \"items\": pm.collectionVariables.get(\"Jurisdiction item schema\"),",
									"                    \"uniqueItems\": true",
									"                }",
									"            },",
									"            \"required\": [ \"jurisdictions\" ],",
									"            \"additionalProperties\": false",
									"        },",
									"        \"_links\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"self\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"profile\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                }",
									"            },",
									"            \"required\": [ \"self\", \"profile\" ],",
									"            \"additionalProperties\": false",
									"        },",
									"    },",
									"    \"required\": [ \"_embedded\", \"_links\" ],",
									"    \"additionalProperties\": false",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Flag Definition",
					"item": [
						{
							"name": "Create a flag definition type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 201 Created status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(201);\r",
											"    pm.expect(response.status).to.equal(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Flag definition item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Flag definition name\"));\r",
											"    pm.expect(jsonData.description).to.equal(pm.collectionVariables.get(\"Flag definition description\"));\r",
											"    pm.expect(jsonData.note).to.equal(pm.collectionVariables.get(\"Flag definition note\"));\r",
											"    pm.expect(jsonData.defaultValue).to.equal(pm.collectionVariables.get(\"Flag definition default value\"));\r",
											"\r",
											"    pm.collectionVariables.set(\"Created flag definition\", jsonData._links.flagDefinition.href);\r",
											"    pm.collectionVariables.set(\"Created flag definition's flags\", jsonData._links.flags.href);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Flag definition name}}\",\n    \"description\": \"{{Flag definition description}}\",\n    \"note\": \"{{Flag definition note}}\",\n    \"defaultValue\": \"{{Flag definition default value}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Flag definitions endpoint}}",
									"host": [
										"{{Flag definitions endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "List all flag definition types",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Flag definition collection schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the created flag definition\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const flagDefinitions = jsonData._embedded.flagDefinitions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < flagDefinitions.length; i++) {\r",
											"        if (flagDefinitions[i]._links.flagDefinition.href == pm.collectionVariables.get(\"Created flag definition\")) {\r",
											"            pm.expect(flagDefinitions[i].name).to.equal(pm.collectionVariables.get(\"Flag definition name\"));\r",
											"            pm.expect(flagDefinitions[i].description).to.equal(pm.collectionVariables.get(\"Flag definition description\"));\r",
											"            pm.expect(flagDefinitions[i].note).to.equal(pm.collectionVariables.get(\"Flag definition note\"));\r",
											"            pm.expect(flagDefinitions[i].defaultValue).to.equal(pm.collectionVariables.get(\"Flag definition default value\"));\r",
											"            pm.expect(flagDefinitions[i]._links.self.href).to.equal(pm.collectionVariables.get(\"Created flag definition\"));\r",
											"            pm.expect(flagDefinitions[i]._links.flagDefinition.href).to.equal(pm.collectionVariables.get(\"Created flag definition\"));\r",
											"            pm.expect(flagDefinitions[i]._links.flags.href).to.equal(pm.collectionVariables.get(\"Created flag definition's flags\"));\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Flag definitions endpoint}}",
									"host": [
										"{{Flag definitions endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve created flag definition type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Flag definition item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Flag definition name\"));\r",
											"    pm.expect(jsonData.definition).to.equal(pm.collectionVariables.get(\"Flag definition definition\"));\r",
											"    pm.expect(jsonData.note).to.equal(pm.collectionVariables.get(\"Flag definition note\"));\r",
											"    pm.expect(jsonData.defaultValue).to.equal(pm.collectionVariables.get(\"Flag definition default value\"));\r",
											"\r",
											"    pm.expect(jsonData._links.self.href).to.equal(pm.collectionVariables.get(\"Created flag definition\"));\r",
											"    pm.expect(jsonData._links.flagDefinition.href).to.equal(pm.collectionVariables.get(\"Created flag definition\"));\r",
											"    pm.expect(jsonData._links.flags.href).to.equal(pm.collectionVariables.get(\"Created flag definition's flags\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created flag definition}}",
									"host": [
										"{{Created flag definition}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve non existent flag definition",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(404);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: not found\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Flag definitions endpoint}}/{{Incorrect id}}",
									"host": [
										"{{Flag definitions endpoint}}"
									],
									"path": [
										"{{Incorrect id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update flag definition via PUT with partial data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Flag definition item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Flag definition name\"));\r",
											"    pm.expect(jsonData.note).to.equal(pm.collectionVariables.get(\"Modified flag definition note\"));\r",
											"    pm.expect(jsonData.description).to.be.null;\r",
											"    pm.expect(jsonData.defaultValue).to.be.null;\r",
											"\r",
											"    pm.expect(jsonData._links.self.href).to.equal(pm.collectionVariables.get(\"Created flag definition\"));\r",
											"    pm.expect(jsonData._links.flagDefinition.href).to.equal(pm.collectionVariables.get(\"Created flag definition\"));\r",
											"    pm.expect(jsonData._links.flags.href).to.equal(pm.collectionVariables.get(\"Created flag definition's flags\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"note\": \"{{Modified flag definition note}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created flag definition}}",
									"host": [
										"{{Created flag definition}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update flag definition via PUT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Flag definition item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Flag definition name\"));\r",
											"    pm.expect(jsonData.description).to.equal(pm.collectionVariables.get(\"Flag definition description\"));\r",
											"    pm.expect(jsonData.note).to.equal(pm.collectionVariables.get(\"Modified flag definition note\"));\r",
											"    pm.expect(jsonData.defaultValue).to.equal(pm.collectionVariables.get(\"Flag definition default value\"));\r",
											"\r",
											"    pm.expect(jsonData._links.self.href).to.equal(pm.collectionVariables.get(\"Created flag definition\"));\r",
											"    pm.expect(jsonData._links.flagDefinition.href).to.equal(pm.collectionVariables.get(\"Created flag definition\"));\r",
											"    pm.expect(jsonData._links.flags.href).to.equal(pm.collectionVariables.get(\"Created flag definition's flags\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"description\": \"{{Flag definition description}}\",\n    \"note\": \"{{Modified flag definition note}}\",\n    \"defaultValue\": \"{{Flag definition default value}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created flag definition}}",
									"host": [
										"{{Created flag definition}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update non existent flag definition via PUT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 201 Created status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(201);\r",
											"    pm.expect(response.status).to.equal(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Flag definition item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Incorrect id\"));\r",
											"    pm.expect(jsonData.description).to.equal(pm.collectionVariables.get(\"Flag definition description\"));\r",
											"    pm.expect(jsonData.note).to.equal(pm.collectionVariables.get(\"Modified flag definition note\"));\r",
											"    pm.expect(jsonData.defaultValue).to.equal(pm.collectionVariables.get(\"Flag definition default value\"));\r",
											"\r",
											"    pm.collectionVariables.set(\"Second created flag definition\", jsonData._links.flagDefinition.href);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"description\": \"{{Flag definition description}}\",\n    \"note\": \"{{Modified flag definition note}}\",\n    \"defaultValue\": \"{{Flag definition default value}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Flag definitions endpoint}}/{{Incorrect id}}",
									"host": [
										"{{Flag definitions endpoint}}"
									],
									"path": [
										"{{Incorrect id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete second created flag definition",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Second created flag definition}}",
									"host": [
										"{{Second created flag definition}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update flag definition via PATCH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Flag definition item schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected attribute values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Flag definition name\"));\r",
											"    pm.expect(jsonData.description).to.equal(pm.collectionVariables.get(\"Flag definition description\"));\r",
											"    pm.expect(jsonData.note).to.equal(pm.collectionVariables.get(\"Flag definition note\"));\r",
											"    pm.expect(jsonData.defaultValue).to.equal(pm.collectionVariables.get(\"Flag definition default value\"));\r",
											"\r",
											"    pm.expect(jsonData._links.self.href).to.equal(pm.collectionVariables.get(\"Created flag definition\"));\r",
											"    pm.expect(jsonData._links.flagDefinition.href).to.equal(pm.collectionVariables.get(\"Created flag definition\"));\r",
											"    pm.expect(jsonData._links.flags.href).to.equal(pm.collectionVariables.get(\"Created flag definition's flags\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"note\": \"{{Flag definition note}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created flag definition}}",
									"host": [
										"{{Created flag definition}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update non existent flag definition via PATCH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(404);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: not found\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"note\": \"{{Modified flag definition note}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Flag definitions endpoint}}/{{Incorrect id}}",
									"host": [
										"{{Flag definitions endpoint}}"
									],
									"path": [
										"{{Incorrect id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete created flag definition",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Created flag definition}}",
									"host": [
										"{{Created flag definition}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete non existent flag definition",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(404);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: not found\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Second created flag definition}}",
									"host": [
										"{{Second created flag definition}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve deleted flag definition",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(404);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: not found\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created flag definition}}",
									"host": [
										"{{Created flag definition}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "List all flag definitions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Hypermedia\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/hal+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Flag definition collection schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain the created flag definition\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const flagDefinitions = jsonData._embedded.flagDefinitions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < flagDefinitions.length; i++) {\r",
											"        if (flagDefinitions[i]._links.self.href == pm.collectionVariables.get(\"Created flag definition\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Flag definitions endpoint}}",
									"host": [
										"{{Flag definitions endpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.collectionVariables.set(\"Flag definition item schema\", {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"name\": { \"type\": \"string\" },",
									"        \"description\": { \"type\": [ \"string\", \"null\" ] },",
									"        \"note\": { \"type\": [ \"string\", \"null\" ] },",
									"        \"defaultValue\": { \"type\": [ \"string\", \"null\" ] },",
									"        \"_links\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"self\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"flagDefinition\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"flags\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                }",
									"            },",
									"            \"required\": [",
									"                \"self\",",
									"                \"flagDefinition\",",
									"                \"flags\"",
									"            ],",
									"            \"additionalProperties\": false",
									"        }",
									"    },",
									"    \"required\": [",
									"        \"name\",",
									"        \"description\",",
									"        \"note\",",
									"        \"defaultValue\",",
									"        \"_links\"",
									"    ],",
									"    \"additionalProperties\": false",
									"});",
									"",
									"pm.collectionVariables.set(\"Flag definition collection schema\", {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"_embedded\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"flagDefinitions\": {",
									"                    \"type\": \"array\",",
									"                    \"items\": pm.collectionVariables.get(\"Flag definition item schema\"),",
									"                    \"uniqueItems\": true",
									"                }",
									"            },",
									"            \"required\": [ \"flagDefinitions\" ],",
									"            \"additionalProperties\": false",
									"        },",
									"        \"_links\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"self\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                },",
									"                \"profile\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": { \"type\": \"string\" }",
									"                    },",
									"                    \"required\": [ \"href\" ],",
									"                    \"additionalProperties\": false",
									"                }",
									"            },",
									"            \"required\": [ \"self\", \"profile\" ],",
									"            \"additionalProperties\": false",
									"        },",
									"    },",
									"    \"required\": [ \"_embedded\", \"_links\" ],",
									"    \"additionalProperties\": false",
									"});"
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "Constraints",
			"item": [
				{
					"name": "Setup",
					"item": [
						{
							"name": "Create a user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 201 Created status\", () => {\r",
											"    const response = pm.response;\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(response.code).to.equal(201);\r",
											"    pm.expect(response.status).to.equal(\"Created\");\r",
											"\r",
											"    pm.collectionVariables.set(\"Created user\", jsonData._links.user.href);\r",
											"    pm.collectionVariables.set(\"Created user's timezone\", jsonData._links.timezone.href);\r",
											"    pm.collectionVariables.set(\"Created user's permissions\", jsonData._links.permissions.href);\r",
											"    pm.collectionVariables.set(\"Created user's position\", jsonData._links.position.href);\r",
											"    pm.collectionVariables.set(\"Created user's owned groups\", jsonData._links.ownedGroups.href);\r",
											"    pm.collectionVariables.set(\"Created user's groups\", jsonData._links.groups.href);\r",
											"    pm.collectionVariables.set(\"Created user's id\", jsonData.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"username\": \"{{Username}}\",\n    \"password\": \"{{Password}}\",\n    \"firstName\": \"{{First name}}\",\n    \"lastName\": \"{{Last name}}\",\n    \"email\": \"{{Email}}\",\n    \"status\": \"{{User status}}\",\n    \"passwordExpires\": \"{{Password expires}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Users endpoint}}",
									"host": [
										"{{Users endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 201 Created status\", () => {\r",
											"    const response = pm.response;\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(response.code).to.equal(201);\r",
											"    pm.expect(response.status).to.equal(\"Created\");\r",
											"\r",
											"    pm.collectionVariables.set(\"Created group\", jsonData._links.group.href);\r",
											"    pm.collectionVariables.set(\"Created group's owner\", jsonData._links.owner.href);\r",
											"    pm.collectionVariables.set(\"Created group's users\", jsonData._links.users.href);\r",
											"    pm.collectionVariables.set(\"Created group's permissions\", jsonData._links.permissions.href);\r",
											"    pm.collectionVariables.set(\"Created group's positions\", jsonData._links.positions.href);\r",
											"    pm.collectionVariables.set(\"Created group's id\", jsonData.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Group name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Groups endpoint}}",
									"host": [
										"{{Groups endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a permission type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 201 Created status\", () => {\r",
											"    const response = pm.response;\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(response.code).to.equal(201);\r",
											"    pm.expect(response.status).to.equal(\"Created\");\r",
											"\r",
											"    pm.collectionVariables.set(\"Created permission type\", jsonData._links.permissionType.href);\r",
											"    pm.collectionVariables.set(\"Created permission type's permissions\", jsonData._links.permissions.href);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Permission type name}}\",\n    \"description\": \"{{Permission type description}}\",\n    \"displayOrder\": {{Display order}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Permission types endpoint}}",
									"host": [
										"{{Permission types endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a permission",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 201 Created status\", () => {\r",
											"    const response = pm.response;\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(response.code).to.equal(201);\r",
											"    pm.expect(response.status).to.equal(\"Created\");\r",
											"\r",
											"    pm.collectionVariables.set(\"Created permission\", jsonData._links.permission.href);\r",
											"    pm.collectionVariables.set(\"Created permission's type\", jsonData._links.type.href);\r",
											"    pm.collectionVariables.set(\"Created permission's users\", jsonData._links.users.href);\r",
											"    pm.collectionVariables.set(\"Created permission's groups\", jsonData._links.groups.href);\r",
											"    pm.collectionVariables.set(\"Created permission's id\", jsonData.name);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Permission name}}\",\n    \"description\": \"{{Permission description}}\",\n    \"displayOrder\": {{Display order}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Permissions endpoint}}",
									"host": [
										"{{Permissions endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a timezone",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 201 Created status\", () => {\r",
											"    const response = pm.response;\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(response.code).to.equal(201);\r",
											"    pm.expect(response.status).to.equal(\"Created\");\r",
											"\r",
											"    pm.collectionVariables.set(\"Created timezone\", jsonData._links.timezone.href);\r",
											"    pm.collectionVariables.set(\"Created timezone's users\", jsonData._links.users.href);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Timezone name}}\",\n    \"status\": \"{{Timezone status}}\",\n    \"display\": \"{{Display}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Timezones endpoint}}",
									"host": [
										"{{Timezones endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 201 Created status\", () => {\r",
											"    const response = pm.response;\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.collectionVariables.set(\"Created position\", jsonData._links.position.href);\r",
											"    pm.collectionVariables.set(\"Created position's child positions\", jsonData._links.childPositions.href);\r",
											"    pm.collectionVariables.set(\"Created position's parent position\", jsonData._links.parentPosition.href);\r",
											"    pm.collectionVariables.set(\"Created position's users\", jsonData._links.users.href);\r",
											"    pm.collectionVariables.set(\"Created position's groups\", jsonData._links.groups.href);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Position name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Positions endpoint}}",
									"host": [
										"{{Positions endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a jurisdiction",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 201 Created status\", () => {\r",
											"    const response = pm.response;\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(response.code).to.equal(201);\r",
											"    pm.expect(response.status).to.equal(\"Created\");\r",
											"\r",
											"    pm.collectionVariables.set(\"Created jurisdiction\", jsonData._links.jurisdiction.href);\r",
											"    pm.collectionVariables.set(\"Created jurisdiction's groups\", jsonData._links.groups.href);\r",
											"    pm.collectionVariables.set(\"Created jurisdiction's id\", jsonData.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Jurisdiction name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Jurisdictions endpoint}}",
									"host": [
										"{{Jurisdictions endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a flag definition",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 201 Created status\", () => {\r",
											"    const response = pm.response;\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(response.code).to.equal(201);\r",
											"    pm.expect(response.status).to.equal(\"Created\");\r",
											"\r",
											"    pm.collectionVariables.set(\"Created flag definition\", jsonData._links.flagDefinition.href);\r",
											"    pm.collectionVariables.set(\"Created flag definition's flags\", jsonData._links.flags.href);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Flag definition name}}\",\n    \"description\": \"{{Flag definition description}}\",\n    \"note\": \"{{Flag definition note}}\",\n    \"defaultValue\": \"{{Flag definition default value}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Flag definitions endpoint}}",
									"host": [
										"{{Flag definitions endpoint}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "User",
					"item": [
						{
							"name": "Username is unique",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 500 Internal Server Error\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(500);\r",
											"    pm.expect(response.status).to.equal(\"Internal Server Error\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(500);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: db violation\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message == \"duplicate value for a record with unique key\") {\r",
											"            pm.expect(failures[i]).to.have.property(\"constraint\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"username\": \"{{Username}}\",\n    \"password\": \"{{Password}}\",\n    \"firstName\": \"{{First name}}\",\n    \"lastName\": \"{{Last name}}\",\n    \"email\": \"{{Email}}\",\n    \"status\": \"{{User status}}\",\n    \"passwordExpires\": \"{{Password expires}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Users endpoint}}",
									"host": [
										"{{Users endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Username length cannot be <1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: app violation\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message.startsWith(\"size must be \")) {\r",
											"            pm.expect(failures[i].constraint).to.equal(\"username\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"username\": \"\",\n    \"password\": \"{{Password}}\",\n    \"firstName\": \"{{First name}}\",\n    \"lastName\": \"{{Last name}}\",\n    \"email\": \"{{Email}}\",\n    \"status\": \"{{User status}}\",\n    \"passwordExpires\": \"{{Password expires}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Users endpoint}}",
									"host": [
										"{{Users endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Username length cannot be >32",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: app violation\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message.startsWith(\"size must be \")) {\r",
											"            pm.expect(failures[i].constraint).to.equal(\"username\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"username\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n    \"password\": \"{{Password}}\",\n    \"firstName\": \"{{First name}}\",\n    \"lastName\": \"{{Last name}}\",\n    \"email\": \"{{Email}}\",\n    \"status\": \"{{User status}}\",\n    \"passwordExpires\": \"{{Password expires}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Users endpoint}}",
									"host": [
										"{{Users endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Username cannot be null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: app violation\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message == \"must not be null\") {\r",
											"            pm.expect(failures[i].constraint).to.equal(\"username\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"username\": null,\n    \"password\": \"{{Password}}\",\n    \"firstName\": \"{{First name}}\",\n    \"lastName\": \"{{Last name}}\",\n    \"email\": \"{{Email}}\",\n    \"status\": \"{{User status}}\",\n    \"passwordExpires\": \"{{Password expires}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Users endpoint}}",
									"host": [
										"{{Users endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Username cannot be changed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 409 Conflict\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(409);\r",
											"    pm.expect(response.status).to.equal(\"Conflict\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(409);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: immutable id change\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message.startsWith(\"altered from \")) {\r",
											"            pm.expect(failures[i].constraint).to.equal(\"immutable identifier\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"username\": \"{{Modified username}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created user}}",
									"host": [
										"{{Created user}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Username cannot be changed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 409 Conflict\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(409);\r",
											"    pm.expect(response.status).to.equal(\"Conflict\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(409);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: immutable id change\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message.startsWith(\"altered from \")) {\r",
											"            pm.expect(failures[i].constraint).to.equal(\"immutable identifier\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"username\": \"{{Modified username}}\",\n    \"password\": \"{{Password}}\",\n    \"lastName\": \"{{Modified last name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created user}}",
									"host": [
										"{{Created user}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Password length cannot be <8",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: app violation\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message.startsWith(\"size must be \")) {\r",
											"            pm.expect(failures[i].constraint).to.equal(\"password\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"username\": \"xxxxxxxxx\",\n    \"password\": \"xxxxxxx\",\n    \"firstName\": \"{{First name}}\",\n    \"lastName\": \"{{Last name}}\",\n    \"email\": \"{{Email}}\",\n    \"status\": \"{{User status}}\",\n    \"passwordExpires\": \"{{Password expires}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Users endpoint}}",
									"host": [
										"{{Users endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Password length cannot be >40",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: app violation\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message.startsWith(\"size must be \")) {\r",
											"            pm.expect(failures[i].constraint).to.equal(\"password\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"password\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created user}}",
									"host": [
										"{{Created user}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Password cannot be 'password'",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: app violation\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message == \"must not be 'password'\") {\r",
											"            pm.expect(failures[i].constraint).to.equal(\"password\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"password\": \"password\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created user}}",
									"host": [
										"{{Created user}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Password must comply with regexp",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: app violation\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message.startsWith(\"must contain \")) {\r",
											"            pm.expect(failures[i].constraint).to.equal(\"password\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"password\": \"xxxxxxxx\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created user}}",
									"host": [
										"{{Created user}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Password must not equal username",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: app violation\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message == \"must not be the same as the username\") {\r",
											"            pm.expect(failures[i].constraint).to.equal(\"password\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"password\": \"{{Username}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created user}}",
									"host": [
										"{{Created user}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Password cannot be null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: app violation\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message == \"must not be null\") {\r",
											"            pm.expect(failures[i].constraint).to.equal(\"password\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"password\": null\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created user}}",
									"host": [
										"{{Created user}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "First name length cannot be >60",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: app violation\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message.startsWith(\"size must be \")) {\r",
											"            pm.expect(failures[i].constraint).to.equal(\"firstName\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"firstName\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created user}}",
									"host": [
										"{{Created user}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Last name length cannot be >80",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: app violation\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message.startsWith(\"size must be \")) {\r",
											"            pm.expect(failures[i].constraint).to.equal(\"lastName\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"lastName\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created user}}",
									"host": [
										"{{Created user}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Email must be a valid email address",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: app violation\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message == \"must be a well-formed email address\") {\r",
											"            pm.expect(failures[i].constraint).to.equal(\"email\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"email\": \"xxxxxxx\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created user}}",
									"host": [
										"{{Created user}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Email length cannot be >60",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: app violation\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message.startsWith(\"size must be \")) {\r",
											"            pm.expect(failures[i].constraint).to.equal(\"email\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"email\": \"x@xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.xxx\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created user}}",
									"host": [
										"{{Created user}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Status cannot be null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: app violation\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message == \"must not be null\") {\r",
											"            pm.expect(failures[i].constraint).to.equal(\"status\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"status\": null\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created user}}",
									"host": [
										"{{Created user}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Status can be A, S, P, L or X",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: enum violation\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message.startsWith(\"not one of the values accepted: [\")) {\r",
											"            pm.expect(failures[i].constraint).to.equal(\"status\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"status\": \"x\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created user}}",
									"host": [
										"{{Created user}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Password expires cannot be null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: app violation\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message == \"must not be null\") {\r",
											"            pm.expect(failures[i].constraint).to.equal(\"passwordExpires\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"passwordExpires\": null\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created user}}",
									"host": [
										"{{Created user}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Password expires can be Y or N",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: enum violation\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message.startsWith(\"not one of the values accepted: [\")) {\r",
											"            pm.expect(failures[i].constraint).to.equal(\"passwordExpires\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"passwordExpires\": \"x\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created user}}",
									"host": [
										"{{Created user}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Agent length cannot be >32",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: app violation\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message.startsWith(\"size must be \")) {\r",
											"            pm.expect(failures[i].constraint).to.equal(\"agent\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"agent\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created user}}",
									"host": [
										"{{Created user}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Override code length cannot be >2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: app violation\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message.startsWith(\"size must be \")) {\r",
											"            pm.expect(failures[i].constraint).to.equal(\"overrideCode\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"overrideCode\": \"xxx\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created user}}",
									"host": [
										"{{Created user}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Group",
					"item": [
						{
							"name": "Name is unique",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 500 Internal Server Error\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(500);\r",
											"    pm.expect(response.status).to.equal(\"Internal Server Error\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(500);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: db violation\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message == \"duplicate value for a record with unique key\") {\r",
											"            pm.expect(failures[i]).to.have.property(\"constraint\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Group name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Groups endpoint}}",
									"host": [
										"{{Groups endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Name length cannot be <1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: app violation\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message.startsWith(\"size must be \")) {\r",
											"            pm.expect(failures[i].constraint).to.equal(\"name\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created group}}",
									"host": [
										"{{Created group}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Name length cannot be >64",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: app violation\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message.startsWith(\"size must be \")) {\r",
											"            pm.expect(failures[i].constraint).to.equal(\"name\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created group}}",
									"host": [
										"{{Created group}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Name cannot be null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: app violation\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message == \"must not be null\") {\r",
											"            pm.expect(failures[i].constraint).to.equal(\"name\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": null\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created group}}",
									"host": [
										"{{Created group}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Permission Type",
					"item": [
						{
							"name": "Name length cannot be <1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: app violation\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message.startsWith(\"size must be \")) {\r",
											"            pm.expect(failures[i].constraint).to.equal(\"name\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"\",\n    \"description\": \"{{Permission type description}}\",\n    \"displayOrder\": {{Display order}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Permission types endpoint}}",
									"host": [
										"{{Permission types endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Name length cannot be >8",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: app violation\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message.startsWith(\"size must be \")) {\r",
											"            pm.expect(failures[i].constraint).to.equal(\"name\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"xxxxxxxxx\",\n    \"description\": \"{{Permission type description}}\",\n    \"displayOrder\": {{Display order}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Permission types endpoint}}",
									"host": [
										"{{Permission types endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Name cannot be null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: primary id required\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message == \"no primary identifier provided\") {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": null,\n    \"description\": \"{{Permission type description}}\",\n    \"displayOrder\": {{Display order}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Permission types endpoint}}",
									"host": [
										"{{Permission types endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Name cannot be changed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 409 Conflict\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(409);\r",
											"    pm.expect(response.status).to.equal(\"Conflict\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(409);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: primary id change\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message.startsWith(\"altered from \")) {\r",
											"            pm.expect(failures[i].constraint).to.equal(\"primary identifier\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"xxxxxx\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created permission type}}",
									"host": [
										"{{Created permission type}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Description length cannot be <1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: app violation\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message.startsWith(\"size must be \")) {\r",
											"            pm.expect(failures[i].constraint).to.equal(\"description\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"description\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created permission type}}",
									"host": [
										"{{Created permission type}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Description length cannot be >40",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: app violation\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message.startsWith(\"size must be \")) {\r",
											"            pm.expect(failures[i].constraint).to.equal(\"description\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"description\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created permission type}}",
									"host": [
										"{{Created permission type}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Description cannot be null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: app violation\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message == \"must not be null\") {\r",
											"            pm.expect(failures[i].constraint).to.equal(\"description\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"description\": null\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created permission type}}",
									"host": [
										"{{Created permission type}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Permission",
					"item": [
						{
							"name": "Name length cannot be <1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: app violation\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message.startsWith(\"size must be \")) {\r",
											"            pm.expect(failures[i].constraint).to.equal(\"name\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"\",\n    \"description\": \"{{Permission description}}\",\n    \"displayOrder\": {{Display order}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Permissions endpoint}}",
									"host": [
										"{{Permissions endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Name length cannot be >64",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: app violation\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message.startsWith(\"size must be \")) {\r",
											"            pm.expect(failures[i].constraint).to.equal(\"name\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n    \"description\": \"{{Permission type description}}\",\n    \"displayOrder\": {{Display order}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Permissions endpoint}}",
									"host": [
										"{{Permissions endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Name cannot be null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: primary id required\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message == \"no primary identifier provided\") {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": null,\n    \"description\": \"{{Permission type description}}\",\n    \"displayOrder\": {{Display order}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Permissions endpoint}}",
									"host": [
										"{{Permissions endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Name cannot be changed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(409);\r",
											"    pm.expect(response.status).to.equal(\"Conflict\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(409);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: primary id change\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message.startsWith(\"altered from \")) {\r",
											"            pm.expect(failures[i].constraint).to.equal(\"primary identifier\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"xxxxxx\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created permission}}",
									"host": [
										"{{Created permission}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Description length cannot be <1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: app violation\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message.startsWith(\"size must be \")) {\r",
											"            pm.expect(failures[i].constraint).to.equal(\"description\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"description\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created permission}}",
									"host": [
										"{{Created permission}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Description length cannot be >80",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: app violation\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message.startsWith(\"size must be \")) {\r",
											"            pm.expect(failures[i].constraint).to.equal(\"description\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"description\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created permission}}",
									"host": [
										"{{Created permission}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Description cannot be null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: app violation\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message == \"must not be null\") {\r",
											"            pm.expect(failures[i].constraint).to.equal(\"description\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"description\": null\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created permission}}",
									"host": [
										"{{Created permission}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Timezone",
					"item": [
						{
							"name": "Name length cannot be >80",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: app violation\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message.startsWith(\"size must be \")) {\r",
											"            pm.expect(failures[i].constraint).to.equal(\"name\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created timezone}}",
									"host": [
										"{{Created timezone}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Name cannot be null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: app violation\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message == \"must not be null\") {\r",
											"            pm.expect(failures[i].constraint).to.equal(\"name\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": null\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created timezone}}",
									"host": [
										"{{Created timezone}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Status can be A, S or D",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: enum violation\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message.startsWith(\"not one of the values accepted: [\")) {\r",
											"            pm.expect(failures[i].constraint).to.equal(\"status\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"status\": \"x\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created timezone}}",
									"host": [
										"{{Created timezone}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Display can be Y or N",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: enum violation\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message.startsWith(\"not one of the values accepted: [\")) {\r",
											"            pm.expect(failures[i].constraint).to.equal(\"status\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"status\": \"x\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created timezone}}",
									"host": [
										"{{Created timezone}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Position",
					"item": [
						{
							"name": "Name length cannot be >64",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: app violation\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message.startsWith(\"size must be \")) {\r",
											"            pm.expect(failures[i].constraint).to.equal(\"name\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created position}}",
									"host": [
										"{{Created position}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Name cannot be null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: app violation\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message == \"must not be null\") {\r",
											"            pm.expect(failures[i].constraint).to.equal(\"name\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": null\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created position}}",
									"host": [
										"{{Created position}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Jurisdiction",
					"item": [
						{
							"name": "Name is unique",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 500 Internal Server Error\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(500);\r",
											"    pm.expect(response.status).to.equal(\"Internal Server Error\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(500);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: db violation\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message == \"duplicate value for a record with unique key\") {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Jurisdiction name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Jurisdictions endpoint}}",
									"host": [
										"{{Jurisdictions endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Name length cannot be >64",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: app violation\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message.startsWith(\"size must be \")) {\r",
											"            pm.expect(failures[i].constraint).to.equal(\"name\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created jurisdiction}}",
									"host": [
										"{{Created jurisdiction}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Name cannot be null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: app violation\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message == \"must not be null\") {\r",
											"            pm.expect(failures[i].constraint).to.equal(\"name\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": null\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created jurisdiction}}",
									"host": [
										"{{Created jurisdiction}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Flag Definition",
					"item": [
						{
							"name": "Name length cannot be >32",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: app violation\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message.startsWith(\"size must be \")) {\r",
											"            pm.expect(failures[i].constraint).to.equal(\"name\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n    \"description\": \"{{Flag definition description}}\",\n    \"note\": \"{{Flag definition note}}\",\n    \"defaultValue\": \"{{Flag definition default value}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Flag definitions endpoint}}",
									"host": [
										"{{Flag definitions endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Name cannot be null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: primary id required\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message == \"no primary identifier provided\") {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": null,\n    \"description\": \"{{Flag definition description}}\",\n    \"note\": \"{{Flag definition note}}\",\n    \"defaultValue\": \"{{Flag definition default value}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Flag definitions endpoint}}",
									"host": [
										"{{Flag definitions endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Name cannot be changed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 409 Conflict\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(409);\r",
											"    pm.expect(response.status).to.equal(\"Conflict\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(409);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: primary id change\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message.startsWith(\"altered from \")) {\r",
											"            pm.expect(failures[i].constraint).to.equal(\"primary identifier\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"xxxxxx\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created flag definition}}",
									"host": [
										"{{Created flag definition}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Description length cannot be >255",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: app violation\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message.startsWith(\"size must be \")) {\r",
											"            pm.expect(failures[i].constraint).to.equal(\"description\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"description\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created flag definition}}",
									"host": [
										"{{Created flag definition}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Note length cannot be >255",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: app violation\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message.startsWith(\"size must be \")) {\r",
											"            pm.expect(failures[i].constraint).to.equal(\"note\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"note\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created flag definition}}",
									"host": [
										"{{Created flag definition}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Default value length cannot be >255",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: app violation\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message.startsWith(\"size must be \")) {\r",
											"            pm.expect(failures[i].constraint).to.equal(\"defaultValue\");\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"defaultValue\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created flag definition}}",
									"host": [
										"{{Created flag definition}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Teardown",
					"item": [
						{
							"name": "Delete user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Created user}}",
									"host": [
										"{{Created user}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Created group}}",
									"host": [
										"{{Created group}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete permission type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Created permission type}}",
									"host": [
										"{{Created permission type}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete permission",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Created permission}}",
									"host": [
										"{{Created permission}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete timezone",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Created timezone}}",
									"host": [
										"{{Created timezone}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Created position}}",
									"host": [
										"{{Created position}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete jurisdiction",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Created jurisdiction}}",
									"host": [
										"{{Created jurisdiction}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete flag definition",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Created flag definition}}",
									"host": [
										"{{Created flag definition}}"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Associations",
			"item": [
				{
					"name": "Setup",
					"item": [
						{
							"name": "Create a user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 201 Created status\", () => {\r",
											"    const response = pm.response;\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(response.code).to.equal(201);\r",
											"    pm.expect(response.status).to.equal(\"Created\");\r",
											"\r",
											"    pm.collectionVariables.set(\"Created user\", jsonData._links.user.href);\r",
											"    pm.collectionVariables.set(\"Created user's timezone\", jsonData._links.timezone.href);\r",
											"    pm.collectionVariables.set(\"Created user's permissions\", jsonData._links.permissions.href);\r",
											"    pm.collectionVariables.set(\"Created user's position\", jsonData._links.position.href);\r",
											"    pm.collectionVariables.set(\"Created user's owned groups\", jsonData._links.ownedGroups.href);\r",
											"    pm.collectionVariables.set(\"Created user's groups\", jsonData._links.groups.href);\r",
											"    pm.collectionVariables.set(\"Created user's id\", jsonData.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"username\": \"{{Username}}\",\n    \"password\": \"{{Password}}\",\n    \"firstName\": \"{{First name}}\",\n    \"lastName\": \"{{Last name}}\",\n    \"email\": \"{{Email}}\",\n    \"status\": \"{{User status}}\",\n    \"passwordExpires\": \"{{Password expires}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Users endpoint}}",
									"host": [
										"{{Users endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a second user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 201 Created status\", () => {\r",
											"    const response = pm.response;\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(response.code).to.equal(201);\r",
											"    pm.expect(response.status).to.equal(\"Created\");\r",
											"\r",
											"    pm.collectionVariables.set(\"Second created user\", jsonData._links.user.href);\r",
											"    pm.collectionVariables.set(\"Second created user's timezone\", jsonData._links.timezone.href);\r",
											"    pm.collectionVariables.set(\"Second created user's permissions\", jsonData._links.permissions.href);\r",
											"    pm.collectionVariables.set(\"Second created user's position\", jsonData._links.position.href);\r",
											"    pm.collectionVariables.set(\"Second created user's owned groups\", jsonData._links.ownedGroups.href);\r",
											"    pm.collectionVariables.set(\"Second created user's groups\", jsonData._links.groups.href);\r",
											"    pm.collectionVariables.set(\"Second created user's id\", jsonData.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"username\": \"{{Modified username}}\",\n    \"password\": \"{{Password}}\",\n    \"firstName\": \"{{First name}}\",\n    \"lastName\": \"{{Last name}}\",\n    \"email\": \"{{Email}}\",\n    \"status\": \"{{User status}}\",\n    \"passwordExpires\": \"{{Password expires}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Users endpoint}}",
									"host": [
										"{{Users endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 201 Created status\", () => {\r",
											"    const response = pm.response;\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(response.code).to.equal(201);\r",
											"    pm.expect(response.status).to.equal(\"Created\");\r",
											"\r",
											"    pm.collectionVariables.set(\"Created group\", jsonData._links.group.href);\r",
											"    pm.collectionVariables.set(\"Created group's owner\", jsonData._links.owner.href);\r",
											"    pm.collectionVariables.set(\"Created group's users\", jsonData._links.users.href);\r",
											"    pm.collectionVariables.set(\"Created group's permissions\", jsonData._links.permissions.href);\r",
											"    pm.collectionVariables.set(\"Created group's positions\", jsonData._links.positions.href);\r",
											"    pm.collectionVariables.set(\"Created group's jurisdictions\", jsonData._links.jurisdictions.href);\r",
											"    pm.collectionVariables.set(\"Created group's id\", jsonData.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Group name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Groups endpoint}}",
									"host": [
										"{{Groups endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a second group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 201 Created status\", () => {\r",
											"    const response = pm.response;\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(response.code).to.equal(201);\r",
											"    pm.expect(response.status).to.equal(\"Created\");\r",
											"\r",
											"    pm.collectionVariables.set(\"Second created group\", jsonData._links.group.href);\r",
											"    pm.collectionVariables.set(\"Second created group's owner\", jsonData._links.owner.href);\r",
											"    pm.collectionVariables.set(\"Second created group's users\", jsonData._links.users.href);\r",
											"    pm.collectionVariables.set(\"Second created group's permissions\", jsonData._links.permissions.href);\r",
											"    pm.collectionVariables.set(\"Second created group's positions\", jsonData._links.positions.href);\r",
											"    pm.collectionVariables.set(\"Second created group's jurisdictions\", jsonData._links.jurisdictions.href);\r",
											"    pm.collectionVariables.set(\"Second created group's id\", jsonData.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Modified group name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Groups endpoint}}",
									"host": [
										"{{Groups endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a permission type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 201 Created status\", () => {\r",
											"    const response = pm.response;\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(response.code).to.equal(201);\r",
											"    pm.expect(response.status).to.equal(\"Created\");\r",
											"\r",
											"    pm.collectionVariables.set(\"Created permission type\", jsonData._links.permissionType.href);\r",
											"    pm.collectionVariables.set(\"Created permission type's permissions\", jsonData._links.permissions.href);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Permission type name}}\",\n    \"description\": \"{{Permission type description}}\",\n    \"displayOrder\": {{Display order}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Permission types endpoint}}",
									"host": [
										"{{Permission types endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a permission",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 201 Created status\", () => {\r",
											"    const response = pm.response;\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(response.code).to.equal(201);\r",
											"    pm.expect(response.status).to.equal(\"Created\");\r",
											"\r",
											"    pm.collectionVariables.set(\"Created permission\", jsonData._links.permission.href);\r",
											"    pm.collectionVariables.set(\"Created permission's type\", jsonData._links.type.href);\r",
											"    pm.collectionVariables.set(\"Created permission's users\", jsonData._links.users.href);\r",
											"    pm.collectionVariables.set(\"Created permission's groups\", jsonData._links.groups.href);\r",
											"    pm.collectionVariables.set(\"Created permission's id\", jsonData.name);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Permission name}}\",\n    \"description\": \"{{Permission description}}\",\n    \"displayOrder\": {{Display order}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Permissions endpoint}}",
									"host": [
										"{{Permissions endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a second permission",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 201 Created status\", () => {\r",
											"    const response = pm.response;\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(response.code).to.equal(201);\r",
											"    pm.expect(response.status).to.equal(\"Created\");\r",
											"\r",
											"    pm.collectionVariables.set(\"Second created permission\", jsonData._links.permission.href);\r",
											"    pm.collectionVariables.set(\"Second created permission's type\", jsonData._links.type.href);\r",
											"    pm.collectionVariables.set(\"Second created permission's users\", jsonData._links.users.href);\r",
											"    pm.collectionVariables.set(\"Second created permission's groups\", jsonData._links.groups.href);\r",
											"    pm.collectionVariables.set(\"Second created permission's id\", jsonData.name);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Incorrect id}}\",\n    \"description\": \"{{Permission description}}\",\n    \"displayOrder\": {{Display order}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Permissions endpoint}}",
									"host": [
										"{{Permissions endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a timezone",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 201 Created status\", () => {\r",
											"    const response = pm.response;\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(response.code).to.equal(201);\r",
											"    pm.expect(response.status).to.equal(\"Created\");\r",
											"\r",
											"    pm.collectionVariables.set(\"Created timezone\", jsonData._links.timezone.href);\r",
											"    pm.collectionVariables.set(\"Created timezone's users\", jsonData._links.users.href);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Timezone name}}\",\n    \"status\": \"{{Timezone status}}\",\n    \"display\": \"{{Display}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Timezones endpoint}}",
									"host": [
										"{{Timezones endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 201 Created status\", () => {\r",
											"    const response = pm.response;\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.collectionVariables.set(\"Created position\", jsonData._links.position.href);\r",
											"    pm.collectionVariables.set(\"Created position's child positions\", jsonData._links.childPositions.href);\r",
											"    pm.collectionVariables.set(\"Created position's parent position\", jsonData._links.parentPosition.href);\r",
											"    pm.collectionVariables.set(\"Created position's users\", jsonData._links.users.href);\r",
											"    pm.collectionVariables.set(\"Created position's groups\", jsonData._links.groups.href);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Position name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Positions endpoint}}",
									"host": [
										"{{Positions endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a second position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 201 Created status\", () => {\r",
											"    const response = pm.response;\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.collectionVariables.set(\"Second created position\", jsonData._links.position.href);\r",
											"    pm.collectionVariables.set(\"Second created position's child positions\", jsonData._links.childPositions.href);\r",
											"    pm.collectionVariables.set(\"Second created position's parent position\", jsonData._links.parentPosition.href);\r",
											"    pm.collectionVariables.set(\"Second created position's users\", jsonData._links.users.href);\r",
											"    pm.collectionVariables.set(\"Second created position's groups\", jsonData._links.groups.href);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Modified position name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Positions endpoint}}",
									"host": [
										"{{Positions endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a third position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 201 Created status\", () => {\r",
											"    const response = pm.response;\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.collectionVariables.set(\"Third created position\", jsonData._links.position.href);\r",
											"    pm.collectionVariables.set(\"Third created position's child positions\", jsonData._links.childPositions.href);\r",
											"    pm.collectionVariables.set(\"Third created position's parent position\", jsonData._links.parentPosition.href);\r",
											"    pm.collectionVariables.set(\"Third created position's users\", jsonData._links.users.href);\r",
											"    pm.collectionVariables.set(\"Third created position's groups\", jsonData._links.groups.href);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Alternate position name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Positions endpoint}}",
									"host": [
										"{{Positions endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a jurisdiction",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 201 Created status\", () => {\r",
											"    const response = pm.response;\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(response.code).to.equal(201);\r",
											"    pm.expect(response.status).to.equal(\"Created\");\r",
											"\r",
											"    pm.collectionVariables.set(\"Created jurisdiction\", jsonData._links.jurisdiction.href);\r",
											"    pm.collectionVariables.set(\"Created jurisdiction's groups\", jsonData._links.groups.href);\r",
											"    pm.collectionVariables.set(\"Created jurisdiction's id\", jsonData.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Jurisdiction name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Jurisdictions endpoint}}",
									"host": [
										"{{Jurisdictions endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a second jurisdiction",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 201 Created status\", () => {\r",
											"    const response = pm.response;\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(response.code).to.equal(201);\r",
											"    pm.expect(response.status).to.equal(\"Created\");\r",
											"\r",
											"    pm.collectionVariables.set(\"Second created jurisdiction\", jsonData._links.jurisdiction.href);\r",
											"    pm.collectionVariables.set(\"Second created jurisdiction's groups\", jsonData._links.groups.href);\r",
											"    pm.collectionVariables.set(\"Second created jurisdiction's id\", jsonData.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Modified jurisdiction name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Jurisdictions endpoint}}",
									"host": [
										"{{Jurisdictions endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a flag definition",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 201 Created status\", () => {\r",
											"    const response = pm.response;\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(response.code).to.equal(201);\r",
											"    pm.expect(response.status).to.equal(\"Created\");\r",
											"\r",
											"    pm.collectionVariables.set(\"Created flag definition\", jsonData._links.flagDefinition.href);\r",
											"    pm.collectionVariables.set(\"Created flag definition's flags\", jsonData._links.flags.href);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Flag definition name}}\",\n    \"description\": \"{{Flag definition description}}\",\n    \"note\": \"{{Flag definition note}}\",\n    \"defaultValue\": \"{{Flag definition default value}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Flag definitions endpoint}}",
									"host": [
										"{{Flag definitions endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a second flag definition",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 201 Created status\", () => {\r",
											"    const response = pm.response;\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(response.code).to.equal(201);\r",
											"    pm.expect(response.status).to.equal(\"Created\");\r",
											"\r",
											"    pm.collectionVariables.set(\"Second created flag definition\", jsonData._links.flagDefinition.href);\r",
											"    pm.collectionVariables.set(\"Second created flag definition's flags\", jsonData._links.flags.href);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{Incorrect id}}\",\n    \"description\": \"{{Flag definition description}}\",\n    \"note\": \"{{Flag definition note}}\",\n    \"defaultValue\": \"{{Flag definition default value}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Flag definitions endpoint}}",
									"host": [
										"{{Flag definitions endpoint}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Many users can have one timezone",
					"item": [
						{
							"name": "Assign timezone to first user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"timezone\": \"{{Created timezone}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created user}}",
									"host": [
										"{{Created user}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign timezone to second user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"timezone\": \"{{Created timezone}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Second created user}}",
									"host": [
										"{{Second created user}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve first user's timezone",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Is created timezone\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData._links.timezone.href).to.equal(pm.collectionVariables.get(\"Created timezone\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created user's timezone}}",
									"host": [
										"{{Created user's timezone}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve second user's timezone",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Is created timezone\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData._links.timezone.href).to.equal(pm.collectionVariables.get(\"Created timezone\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Second created user's timezone}}",
									"host": [
										"{{Second created user's timezone}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign timezone from first user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Created user's timezone}}",
									"host": [
										"{{Created user's timezone}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign timezone from second user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Second created user's timezone}}",
									"host": [
										"{{Second created user's timezone}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve first user's timezone",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created user's timezone}}",
									"host": [
										"{{Created user's timezone}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve second user's timezone",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Second created user's timezone}}",
									"host": [
										"{{Second created user's timezone}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Many users can have one position",
					"item": [
						{
							"name": "Assign position to first user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"position\": \"{{Created position}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created user}}",
									"host": [
										"{{Created user}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign position to second user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"position\": \"{{Created position}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Second created user}}",
									"host": [
										"{{Second created user}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve first user's position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Is created position\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData._links.position.href).to.equal(pm.collectionVariables.get(\"Created position\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created user's position}}",
									"host": [
										"{{Created user's position}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve second user's position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Is created position\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData._links.position.href).to.equal(pm.collectionVariables.get(\"Created position\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Second created user's position}}",
									"host": [
										"{{Second created user's position}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign position from first user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Created user's position}}",
									"host": [
										"{{Created user's position}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign position from second user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Second created user's position}}",
									"host": [
										"{{Second created user's position}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve first user's position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created user's position}}",
									"host": [
										"{{Created user's position}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve second user's position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Second created user's position}}",
									"host": [
										"{{Second created user's position}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "One user can own many groups",
					"item": [
						{
							"name": "Assign user as the owner of first group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"owner\": \"{{Created user}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created group}}",
									"host": [
										"{{Created group}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign user as the owner of second group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"owner\": \"{{Created user}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Second created group}}",
									"host": [
										"{{Second created group}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve user's owned groups",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Contains created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Contains second created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Second created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created user's owned groups}}",
									"host": [
										"{{Created user's owned groups}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign user as the owner of first group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Created group's owner}}",
									"host": [
										"{{Created group's owner}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign user as the owner of second group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Second created group's owner}}",
									"host": [
										"{{Second created group's owner}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve user's owned groups",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain second created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Second created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created user's owned groups}}",
									"host": [
										"{{Created user's owned groups}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Many users can have many permissions",
					"item": [
						{
							"name": "Assign both permissions to first user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{Created permission}}\r\n{{Second created permission}}",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{Created user's permissions}}",
									"host": [
										"{{Created user's permissions}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign both permissions to second user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{Created permission}}\r\n{{Second created permission}}",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{Second created user's permissions}}",
									"host": [
										"{{Second created user's permissions}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve first user's permissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Contains created permission\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const permissions = jsonData._embedded.permissions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < permissions.length; i++) {\r",
											"        if (permissions[i]._links.permission.href == pm.collectionVariables.get(\"Created permission\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Contains second created permission\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const permissions = jsonData._embedded.permissions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < permissions.length; i++) {\r",
											"        if (permissions[i]._links.permission.href == pm.collectionVariables.get(\"Second created permission\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created user's permissions}}",
									"host": [
										"{{Created user's permissions}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve second user's permissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Contains created permission\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const permissions = jsonData._embedded.permissions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < permissions.length; i++) {\r",
											"        if (permissions[i]._links.permission.href == pm.collectionVariables.get(\"Created permission\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Contains second created permission\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const permissions = jsonData._embedded.permissions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < permissions.length; i++) {\r",
											"        if (permissions[i]._links.permission.href == pm.collectionVariables.get(\"Second created permission\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Second created user's permissions}}",
									"host": [
										"{{Second created user's permissions}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign first permissions to first group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{Created permission}}",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{Created user's permissions}}",
									"host": [
										"{{Created user's permissions}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve first user's permissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Contains created permission\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const permissions = jsonData._embedded.permissions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < permissions.length; i++) {\r",
											"        if (permissions[i]._links.permission.href == pm.collectionVariables.get(\"Created permission\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contains second created permission\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const permissions = jsonData._embedded.permissions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < permissions.length; i++) {\r",
											"        if (permissions[i]._links.permission.href == pm.collectionVariables.get(\"Second created permission\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created user's permissions}}",
									"host": [
										"{{Created user's permissions}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign first permission from first user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Created user's permissions}}/{{Permission name}}",
									"host": [
										"{{Created user's permissions}}"
									],
									"path": [
										"{{Permission name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign first permission from second user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Second created user's permissions}}/{{Permission name}}",
									"host": [
										"{{Second created user's permissions}}"
									],
									"path": [
										"{{Permission name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign second permission from second user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Second created user's permissions}}/{{Incorrect id}}",
									"host": [
										"{{Second created user's permissions}}"
									],
									"path": [
										"{{Incorrect id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve first user's permissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain created permission\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const permissions = jsonData._embedded.permissions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < permissions.length; i++) {\r",
											"        if (permissions[i]._links.permission.href == pm.collectionVariables.get(\"Created permission\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain second created permission\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const permissions = jsonData._embedded.permissions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < permissions.length; i++) {\r",
											"        if (permissions[i]._links.permission.href == pm.collectionVariables.get(\"Second created permission\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created user's permissions}}",
									"host": [
										"{{Created user's permissions}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve second user's permissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain created permission\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const permissions = jsonData._embedded.permissions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < permissions.length; i++) {\r",
											"        if (permissions[i]._links.permission.href == pm.collectionVariables.get(\"Created permission\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain second created permission\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const permissions = jsonData._embedded.permissions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < permissions.length; i++) {\r",
											"        if (permissions[i]._links.permission.href == pm.collectionVariables.get(\"Second created permission\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Second created user's permissions}}",
									"host": [
										"{{Second created user's permissions}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Many users can belong to many groups",
					"item": [
						{
							"name": "Assign both groups to first user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{Created group}}\r\n{{Second created group}}",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{Created user's groups}}",
									"host": [
										"{{Created user's groups}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign both groups to second user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{Created group}}\r\n{{Second created group}}",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{Second created user's groups}}",
									"host": [
										"{{Second created user's groups}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve first user's groups",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Contains created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Contains second created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Second created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created user's groups}}",
									"host": [
										"{{Created user's groups}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve second user's groups",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Contains created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Contains second created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Second created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Second created user's groups}}",
									"host": [
										"{{Second created user's groups}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign first group to first user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{Created group}}",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{Created user's groups}}",
									"host": [
										"{{Created user's groups}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve first user's groups",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Contains created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain second created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Second created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created user's groups}}",
									"host": [
										"{{Created user's groups}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign first group from first user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Created user's groups}}/{{Created group's id}}",
									"host": [
										"{{Created user's groups}}"
									],
									"path": [
										"{{Created group's id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign first group from second user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Second created user's groups}}/{{Created group's id}}",
									"host": [
										"{{Second created user's groups}}"
									],
									"path": [
										"{{Created group's id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign second group from second user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Second created user's groups}}/{{Second created group's id}}",
									"host": [
										"{{Second created user's groups}}"
									],
									"path": [
										"{{Second created group's id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve first user's groups",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain second created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Second created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created user's groups}}",
									"host": [
										"{{Created user's groups}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve second user's groups",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain second created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Second created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Second created user's groups}}",
									"host": [
										"{{Second created user's groups}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Many groups can be owned by one user",
					"item": [
						{
							"name": "Assign user as the owner of first group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"owner\": \"{{Created user}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created group}}",
									"host": [
										"{{Created group}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign user as the owner of second group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"owner\": \"{{Created user}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Second created group}}",
									"host": [
										"{{Second created group}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve first group's owning user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Is created user\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData._links.user.href).to.equal(pm.collectionVariables.get(\"Created user\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created group's owner}}",
									"host": [
										"{{Created group's owner}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve second group's owning user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Is created user\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData._links.user.href).to.equal(pm.collectionVariables.get(\"Created user\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Second created group's owner}}",
									"host": [
										"{{Second created group's owner}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign user as the owner of first group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Created group's owner}}",
									"host": [
										"{{Created group's owner}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign user as the owner of second group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Second created group's owner}}",
									"host": [
										"{{Second created group's owner}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve first group's owning user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created group's owner}}",
									"host": [
										"{{Created group's owner}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve second group's owning user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Second created group's owner}}",
									"host": [
										"{{Second created group's owner}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Many groups can consist of many positions",
					"item": [
						{
							"name": "Assign both groups to first position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{Created group}}\r\n{{Second created group}}",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{Created position's groups}}",
									"host": [
										"{{Created position's groups}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign both groups to second position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{Created group}}\r\n{{Second created group}}",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{Second created position's groups}}",
									"host": [
										"{{Second created position's groups}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve first group's positions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Contains created position\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const positions = jsonData._embedded.positions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < positions.length; i++) {\r",
											"        if (positions[i]._links.position.href == pm.collectionVariables.get(\"Created position\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Contains second created position\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const positions = jsonData._embedded.positions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < positions.length; i++) {\r",
											"        if (positions[i]._links.position.href == pm.collectionVariables.get(\"Second created position\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created group's positions}}",
									"host": [
										"{{Created group's positions}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve second group's positions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Contains created position\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const positions = jsonData._embedded.positions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < positions.length; i++) {\r",
											"        if (positions[i]._links.position.href == pm.collectionVariables.get(\"Created position\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Contains second created position\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const positions = jsonData._embedded.positions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < positions.length; i++) {\r",
											"        if (positions[i]._links.position.href == pm.collectionVariables.get(\"Second created position\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Second created group's positions}}",
									"host": [
										"{{Second created group's positions}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign first group from first position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Created position's groups}}/{{Created group's id}}",
									"host": [
										"{{Created position's groups}}"
									],
									"path": [
										"{{Created group's id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign first group from second position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Second created position's groups}}/{{Created group's id}}",
									"host": [
										"{{Second created position's groups}}"
									],
									"path": [
										"{{Created group's id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign second group from first position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Created position's groups}}/{{Second created group's id}}",
									"host": [
										"{{Created position's groups}}"
									],
									"path": [
										"{{Second created group's id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign second group from second position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Second created position's groups}}/{{Second created group's id}}",
									"host": [
										"{{Second created position's groups}}"
									],
									"path": [
										"{{Second created group's id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve first position's groups",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain second created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Second created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created position's groups}}",
									"host": [
										"{{Created position's groups}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve second position's groups",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain second created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Second created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Second created position's groups}}",
									"host": [
										"{{Second created position's groups}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Many groups can consist of many users",
					"item": [
						{
							"name": "Assign both groups to first user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{Created group}}\r\n{{Second created group}}",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{Created user's groups}}",
									"host": [
										"{{Created user's groups}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign both groups to second user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{Created group}}\r\n{{Second created group}}",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{Second created user's groups}}",
									"host": [
										"{{Second created user's groups}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve first user's groups",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Contains created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Contains second created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Second created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created user's groups}}",
									"host": [
										"{{Created user's groups}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve second user's groups",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Contains created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Contains second created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Second created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Second created user's groups}}",
									"host": [
										"{{Second created user's groups}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign first group to first user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{Created group}}",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{Created user's groups}}",
									"host": [
										"{{Created user's groups}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve first user's groups",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Contains created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain second created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Second created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created user's groups}}",
									"host": [
										"{{Created user's groups}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign first group from first user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Created user's groups}}/{{Created group's id}}",
									"host": [
										"{{Created user's groups}}"
									],
									"path": [
										"{{Created group's id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign first group from second user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Second created user's groups}}/{{Created group's id}}",
									"host": [
										"{{Second created user's groups}}"
									],
									"path": [
										"{{Created group's id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign second user from second group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Second created user's groups}}/{{Second created group's id}}",
									"host": [
										"{{Second created user's groups}}"
									],
									"path": [
										"{{Second created group's id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve first group's users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain second created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Second created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created user's groups}}",
									"host": [
										"{{Created user's groups}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve second group's users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain second created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Second created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Second created user's groups}}",
									"host": [
										"{{Second created user's groups}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Many groups can have many permissions",
					"item": [
						{
							"name": "Assign both permissions to first group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{Created permission}}\r\n{{Second created permission}}",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{Created group's permissions}}",
									"host": [
										"{{Created group's permissions}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign both permissions to second group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{Created permission}}\r\n{{Second created permission}}",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{Second created group's permissions}}",
									"host": [
										"{{Second created group's permissions}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve first group's permissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Contains created permission\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const permissions = jsonData._embedded.permissions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < permissions.length; i++) {\r",
											"        if (permissions[i]._links.permission.href == pm.collectionVariables.get(\"Created permission\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Contains second created permission\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const permissions = jsonData._embedded.permissions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < permissions.length; i++) {\r",
											"        if (permissions[i]._links.permission.href == pm.collectionVariables.get(\"Second created permission\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created group's permissions}}",
									"host": [
										"{{Created group's permissions}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve second group's permissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Contains created permission\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const permissions = jsonData._embedded.permissions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < permissions.length; i++) {\r",
											"        if (permissions[i]._links.permission.href == pm.collectionVariables.get(\"Created permission\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Contains second created permission\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const permissions = jsonData._embedded.permissions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < permissions.length; i++) {\r",
											"        if (permissions[i]._links.permission.href == pm.collectionVariables.get(\"Second created permission\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Second created group's permissions}}",
									"host": [
										"{{Second created group's permissions}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign first permission to first group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{Created permission}}",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{Created group's permissions}}",
									"host": [
										"{{Created group's permissions}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve first group's permissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Contains created permission\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const permissions = jsonData._embedded.permissions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < permissions.length; i++) {\r",
											"        if (permissions[i]._links.permission.href == pm.collectionVariables.get(\"Created permission\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain second created permission\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const permissions = jsonData._embedded.permissions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < permissions.length; i++) {\r",
											"        if (permissions[i]._links.permission.href == pm.collectionVariables.get(\"Second created permission\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created group's permissions}}",
									"host": [
										"{{Created group's permissions}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign first permission from first group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Created group's permissions}}/{{Created permission's id}}",
									"host": [
										"{{Created group's permissions}}"
									],
									"path": [
										"{{Created permission's id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign first permission from second group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Second created group's permissions}}/{{Created permission's id}}",
									"host": [
										"{{Second created group's permissions}}"
									],
									"path": [
										"{{Created permission's id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign second permission from second group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Second created group's permissions}}/{{Second created permission's id}}",
									"host": [
										"{{Second created group's permissions}}"
									],
									"path": [
										"{{Second created permission's id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve first group's permissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain created permission\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const permissions = jsonData._embedded.permissions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < permissions.length; i++) {\r",
											"        if (permissions[i]._links.permission.href == pm.collectionVariables.get(\"Created permission\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain second created permission\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const permissions = jsonData._embedded.permissions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < permissions.length; i++) {\r",
											"        if (permissions[i]._links.permission.href == pm.collectionVariables.get(\"Second created permission\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created group's permissions}}",
									"host": [
										"{{Created group's permissions}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve second group's permissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain created permission\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const permissions = jsonData._embedded.permissions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < permissions.length; i++) {\r",
											"        if (permissions[i]._links.permission.href == pm.collectionVariables.get(\"Created permission\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain second created permission\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const permissions = jsonData._embedded.permissions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < permissions.length; i++) {\r",
											"        if (permissions[i]._links.permission.href == pm.collectionVariables.get(\"Second created permission\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Second created group's permissions}}",
									"host": [
										"{{Second created group's permissions}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Many groups can have many jurisdictions",
					"item": [
						{
							"name": "Assign both jurisdictions to first group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{Created jurisdiction}}\r\n{{Second created jurisdiction}}",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{Created group's jurisdictions}}",
									"host": [
										"{{Created group's jurisdictions}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign both jurisdictions to second group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{Created jurisdiction}}\r\n{{Second created jurisdiction}}",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{Second created group's jurisdictions}}",
									"host": [
										"{{Second created group's jurisdictions}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve first group's jurisdictions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Contains created jurisdiction\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const jurisdictions = jsonData._embedded.jurisdictions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < jurisdictions.length; i++) {\r",
											"        if (jurisdictions[i]._links.jurisdiction.href == pm.collectionVariables.get(\"Created jurisdiction\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Contains second created jurisdiction\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const jurisdictions = jsonData._embedded.jurisdictions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < jurisdictions.length; i++) {\r",
											"        if (jurisdictions[i]._links.jurisdiction.href == pm.collectionVariables.get(\"Second created jurisdiction\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created group's jurisdictions}}",
									"host": [
										"{{Created group's jurisdictions}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve second group's jurisdictions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Contains created jurisdiction\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const jurisdictions = jsonData._embedded.jurisdictions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < jurisdictions.length; i++) {\r",
											"        if (jurisdictions[i]._links.jurisdiction.href == pm.collectionVariables.get(\"Created jurisdiction\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Contains second created jurisdiction\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const jurisdictions = jsonData._embedded.jurisdictions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < jurisdictions.length; i++) {\r",
											"        if (jurisdictions[i]._links.jurisdiction.href == pm.collectionVariables.get(\"Second created jurisdiction\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Second created group's jurisdictions}}",
									"host": [
										"{{Second created group's jurisdictions}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign first jurisdiction to first group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{Created jurisdiction}}",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{Created group's jurisdictions}}",
									"host": [
										"{{Created group's jurisdictions}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve first group's jurisdictions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Contains created jurisdiction\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const jurisdictions = jsonData._embedded.jurisdictions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < jurisdictions.length; i++) {\r",
											"        if (jurisdictions[i]._links.jurisdiction.href == pm.collectionVariables.get(\"Created jurisdiction\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain second created jurisdiction\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const jurisdictions = jsonData._embedded.jurisdictions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < jurisdictions.length; i++) {\r",
											"        if (jurisdictions[i]._links.jurisdiction.href == pm.collectionVariables.get(\"Second created jurisdiction\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created group's jurisdictions}}",
									"host": [
										"{{Created group's jurisdictions}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign first jurisdiction from first group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Created group's jurisdictions}}/{{Created jurisdiction's id}}",
									"host": [
										"{{Created group's jurisdictions}}"
									],
									"path": [
										"{{Created jurisdiction's id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign first jurisdiction from second group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Second created group's jurisdictions}}/{{Created jurisdiction's id}}",
									"host": [
										"{{Second created group's jurisdictions}}"
									],
									"path": [
										"{{Created jurisdiction's id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign second jurisdiction from second group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Second created group's jurisdictions}}/{{Second created jurisdiction's id}}",
									"host": [
										"{{Second created group's jurisdictions}}"
									],
									"path": [
										"{{Second created jurisdiction's id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve first group's jurisdictions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain created jurisdiction\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const jurisdictions = jsonData._embedded.jurisdictions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < jurisdictions.length; i++) {\r",
											"        if (jurisdictions[i]._links.jurisdiction.href == pm.collectionVariables.get(\"Created jurisdiction\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain second created jurisdiction\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const jurisdictions = jsonData._embedded.jurisdictions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < jurisdictions.length; i++) {\r",
											"        if (jurisdictions[i]._links.jurisdiction.href == pm.collectionVariables.get(\"Second created jurisdiction\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created group's jurisdictions}}",
									"host": [
										"{{Created group's jurisdictions}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve second group's jurisdictions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain created jurisdiction\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const jurisdictions = jsonData._embedded.jurisdictions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < jurisdictions.length; i++) {\r",
											"        if (jurisdictions[i]._links.jurisdiction.href == pm.collectionVariables.get(\"Created jurisdiction\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain second created jurisdiction\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const jurisdictions = jsonData._embedded.jurisdictions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < jurisdictions.length; i++) {\r",
											"        if (jurisdictions[i]._links.jurisdiction.href == pm.collectionVariables.get(\"Second created jurisdiction\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Second created group's jurisdictions}}",
									"host": [
										"{{Second created group's jurisdictions}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Many permissions can be assigned to many users",
					"item": [
						{
							"name": "Assign both permissions to first user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{Created permission}}\r\n{{Second created permission}}",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{Created user's permissions}}",
									"host": [
										"{{Created user's permissions}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign both permissions to second user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{Created permission}}\r\n{{Second created permission}}",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{Second created user's permissions}}",
									"host": [
										"{{Second created user's permissions}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve first user's permissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Contains created permission\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const permissions = jsonData._embedded.permissions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < permissions.length; i++) {\r",
											"        if (permissions[i]._links.permission.href == pm.collectionVariables.get(\"Created permission\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Contains second created permission\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const permissions = jsonData._embedded.permissions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < permissions.length; i++) {\r",
											"        if (permissions[i]._links.permission.href == pm.collectionVariables.get(\"Second created permission\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created user's permissions}}",
									"host": [
										"{{Created user's permissions}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve second user's permissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Contains created permission\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const permissions = jsonData._embedded.permissions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < permissions.length; i++) {\r",
											"        if (permissions[i]._links.permission.href == pm.collectionVariables.get(\"Created permission\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Contains second created permission\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const permissions = jsonData._embedded.permissions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < permissions.length; i++) {\r",
											"        if (permissions[i]._links.permission.href == pm.collectionVariables.get(\"Second created permission\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Second created user's permissions}}",
									"host": [
										"{{Second created user's permissions}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign first permission to first user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{Created permission}}",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{Created user's permissions}}",
									"host": [
										"{{Created user's permissions}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve first user's permissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Contains created permission\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const permissions = jsonData._embedded.permissions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < permissions.length; i++) {\r",
											"        if (permissions[i]._links.permission.href == pm.collectionVariables.get(\"Created permission\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain second created permission\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const permissions = jsonData._embedded.permissions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < permissions.length; i++) {\r",
											"        if (permissions[i]._links.permission.href == pm.collectionVariables.get(\"Second created permission\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created user's permissions}}",
									"host": [
										"{{Created user's permissions}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign first permission from first user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Created user's permissions}}/{{Created permission's id}}",
									"host": [
										"{{Created user's permissions}}"
									],
									"path": [
										"{{Created permission's id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign first permission from second user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Second created user's permissions}}/{{Created permission's id}}",
									"host": [
										"{{Second created user's permissions}}"
									],
									"path": [
										"{{Created permission's id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign second permission from second user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Second created user's permissions}}/{{Second created permission's id}}",
									"host": [
										"{{Second created user's permissions}}"
									],
									"path": [
										"{{Second created permission's id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve first user's permissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain created permission\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const permissions = jsonData._embedded.permissions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < permissions.length; i++) {\r",
											"        if (permissions[i]._links.permission.href == pm.collectionVariables.get(\"Created permission\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain second created permission\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const permissions = jsonData._embedded.permissions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < permissions.length; i++) {\r",
											"        if (permissions[i]._links.permission.href == pm.collectionVariables.get(\"Second created permission\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created user's permissions}}",
									"host": [
										"{{Created user's permissions}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve second user's permissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain created permission\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const permissions = jsonData._embedded.permissions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < permissions.length; i++) {\r",
											"        if (permissions[i]._links.permission.href == pm.collectionVariables.get(\"Created permission\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain second created permission\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const permissions = jsonData._embedded.permissions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < permissions.length; i++) {\r",
											"        if (permissions[i]._links.permission.href == pm.collectionVariables.get(\"Second created permission\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Second created user's permissions}}",
									"host": [
										"{{Second created user's permissions}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Many permissions can be assigned to many groups",
					"item": [
						{
							"name": "Assign both permissions to first group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{Created permission}}\r\n{{Second created permission}}",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{Created group's permissions}}",
									"host": [
										"{{Created group's permissions}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign both permissions to second group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{Created permission}}\r\n{{Second created permission}}",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{Second created group's permissions}}",
									"host": [
										"{{Second created group's permissions}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve first permission's groups",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Contains created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Contains second created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Second created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created permission's groups}}",
									"host": [
										"{{Created permission's groups}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve second permission's groups",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Contains created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Contains second created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Second created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Second created permission's groups}}",
									"host": [
										"{{Second created permission's groups}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign first permission from first group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Created group's permissions}}/{{Created permission's id}}",
									"host": [
										"{{Created group's permissions}}"
									],
									"path": [
										"{{Created permission's id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign first permission from second group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Second created group's permissions}}/{{Created permission's id}}",
									"host": [
										"{{Second created group's permissions}}"
									],
									"path": [
										"{{Created permission's id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign second permission from first group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Created group's permissions}}/{{Second created permission's id}}",
									"host": [
										"{{Created group's permissions}}"
									],
									"path": [
										"{{Second created permission's id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign second permission from second group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Second created group's permissions}}/{{Second created permission's id}}",
									"host": [
										"{{Second created group's permissions}}"
									],
									"path": [
										"{{Second created permission's id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve first permission's groups",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain second created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Second created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created permission's groups}}",
									"host": [
										"{{Created permission's groups}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve second permission's groups",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain second created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Second created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Second created permission's groups}}",
									"host": [
										"{{Second created permission's groups}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Many permissions can have one permission type",
					"item": [
						{
							"name": "Retrieve first permission's type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Is default permission type\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"Default permission type name\"));\r",
											"    pm.expect(jsonData.description).to.equal(pm.collectionVariables.get(\"Default permission type description\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created permission's type}}",
									"host": [
										"{{Created permission's type}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign permission type to first permission",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"type\": \"{{Created permission type}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created permission}}",
									"host": [
										"{{Created permission}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign permission type to second permission",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"type\": \"{{Created permission type}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Second created permission}}",
									"host": [
										"{{Second created permission}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve first permission's type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Is created permission type\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData._links.permissionType.href).to.equal(pm.collectionVariables.get(\"Created permission type\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created permission's type}}",
									"host": [
										"{{Created permission's type}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve second permission's type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Is created permission type\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData._links.permissionType.href).to.equal(pm.collectionVariables.get(\"Created permission type\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Second created permission's type}}",
									"host": [
										"{{Second created permission's type}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign permission type from first permission",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Created permission's type}}",
									"host": [
										"{{Created permission's type}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign permission type from second permission Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Second created permission's type}}",
									"host": [
										"{{Second created permission's type}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve first permission's type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Is not created permission type\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData._links.permissionType.href).to.not.equal(pm.collectionVariables.get(\"Created permission type\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created permission's type}}",
									"host": [
										"{{Created permission's type}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve second permission's type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Is not created permission type\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData._links.permissionType.href).to.not.equal(pm.collectionVariables.get(\"Created permission type\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Second created permission's type}}",
									"host": [
										"{{Second created permission's type}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "One permission type can be assigned to many permissions",
					"item": [
						{
							"name": "Assign permission type to first permission",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"type\": \"{{Created permission type}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created permission}}",
									"host": [
										"{{Created permission}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign permission type to second permission",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"type\": \"{{Created permission type}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Second created permission}}",
									"host": [
										"{{Second created permission}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve permission type's permissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Contains created permission\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const permissions = jsonData._embedded.permissions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < permissions.length; i++) {\r",
											"        if (permissions[i]._links.permission.href == pm.collectionVariables.get(\"Created permission\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Contains second created permission\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const permissions = jsonData._embedded.permissions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < permissions.length; i++) {\r",
											"        if (permissions[i]._links.permission.href == pm.collectionVariables.get(\"Second created permission\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created permission type's permissions}}",
									"host": [
										"{{Created permission type's permissions}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign permission type from first permission",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Created permission's type}}",
									"host": [
										"{{Created permission's type}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign permission type from second permission Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Second created permission's type}}",
									"host": [
										"{{Second created permission's type}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve permission type's permissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain created permission\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const permissions = jsonData._embedded.permissions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < permissions.length; i++) {\r",
											"        if (permissions[i]._links.permission.href == pm.collectionVariables.get(\"Created permission\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain second created permission\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const permissions = jsonData._embedded.permissions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < permissions.length; i++) {\r",
											"        if (permissions[i]._links.permission.href == pm.collectionVariables.get(\"Second created permission\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created permission type's permissions}}",
									"host": [
										"{{Created permission type's permissions}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Many positions can have one parent position",
					"item": [
						{
							"name": "Assign parent position to first position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"parentPosition\": \"{{Third created position}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created position}}",
									"host": [
										"{{Created position}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign parent position to second position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"parentPosition\": \"{{Third created position}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Second created position}}",
									"host": [
										"{{Second created position}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve first position's parent position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Is third created position\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData._links.position.href).to.equal(pm.collectionVariables.get(\"Third created position\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created position's parent position}}",
									"host": [
										"{{Created position's parent position}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve second position's parent position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Is third created position\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData._links.position.href).to.equal(pm.collectionVariables.get(\"Third created position\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Second created position's parent position}}",
									"host": [
										"{{Second created position's parent position}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign parent position from first position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Created position's parent position}}",
									"host": [
										"{{Created position's parent position}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign parent position from second position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Second created position's parent position}}",
									"host": [
										"{{Second created position's parent position}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve first position's parent position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created position's parent position}}",
									"host": [
										"{{Created position's parent position}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve second position's parent position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Second created position's parent position}}",
									"host": [
										"{{Second created position's parent position}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "One position can be the parent of many positions",
					"item": [
						{
							"name": "Assign parent position to first position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"parentPosition\": \"{{Third created position}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created position}}",
									"host": [
										"{{Created position}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign parent position to second position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"parentPosition\": \"{{Third created position}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Second created position}}",
									"host": [
										"{{Second created position}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve parent position's child positions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Contains created position\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const positions = jsonData._embedded.positions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < positions.length; i++) {\r",
											"        if (positions[i]._links.position.href == pm.collectionVariables.get(\"Created position\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Contains second created position\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const positions = jsonData._embedded.positions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < positions.length; i++) {\r",
											"        if (positions[i]._links.position.href == pm.collectionVariables.get(\"Second created position\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Third created position's child positions}}",
									"host": [
										"{{Third created position's child positions}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign parent position from first position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Created position's parent position}}",
									"host": [
										"{{Created position's parent position}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign parent position from second position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Second created position's parent position}}",
									"host": [
										"{{Second created position's parent position}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve parent position's child positions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain created position\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const positions = jsonData._embedded.positions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < positions.length; i++) {\r",
											"        if (positions[i]._links.position.href == pm.collectionVariables.get(\"Created position\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain second created position\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const positions = jsonData._embedded.positions;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < positions.length; i++) {\r",
											"        if (positions[i]._links.position.href == pm.collectionVariables.get(\"Second created position\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Third created position's child positions}}",
									"host": [
										"{{Third created position's child positions}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "One position can be assigned to many users",
					"item": [
						{
							"name": "Assign position to first user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"position\": \"{{Created position}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created user}}",
									"host": [
										"{{Created user}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign position to second user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"position\": \"{{Created position}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Second created user}}",
									"host": [
										"{{Second created user}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve position's users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Contains created user\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const users = jsonData._embedded.users;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < users.length; i++) {\r",
											"        if (users[i]._links.user.href == pm.collectionVariables.get(\"Created user\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Contains second created user\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const users = jsonData._embedded.users;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < users.length; i++) {\r",
											"        if (users[i]._links.user.href == pm.collectionVariables.get(\"Second created user\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created position's users}}",
									"host": [
										"{{Created position's users}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign position from first user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Created user's position}}",
									"host": [
										"{{Created user's position}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign position from second user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Second created user's position}}",
									"host": [
										"{{Second created user's position}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve position's users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain created user\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const users = jsonData._embedded.users;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < users.length; i++) {\r",
											"        if (users[i]._links.user.href == pm.collectionVariables.get(\"Created user\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain second created user\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const users = jsonData._embedded.users;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < users.length; i++) {\r",
											"        if (users[i]._links.user.href == pm.collectionVariables.get(\"Second created user\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created position's users}}",
									"host": [
										"{{Created position's users}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Many positions can be part of many groups",
					"item": [
						{
							"name": "Assign both groups to first position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{Created group}}\r\n{{Second created group}}",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{Created position's groups}}",
									"host": [
										"{{Created position's groups}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign both groups to second position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{Created group}}\r\n{{Second created group}}",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{Second created position's groups}}",
									"host": [
										"{{Second created position's groups}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve first position's groups",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Contains created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Contains second created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Second created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created position's groups}}",
									"host": [
										"{{Created position's groups}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve second position's groups",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Contains created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Contains second created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Second created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Second created position's groups}}",
									"host": [
										"{{Second created position's groups}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign first group to first position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{Created group}}",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{Created position's groups}}",
									"host": [
										"{{Created position's groups}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve first position's groups Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Contains created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain second created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Second created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created position's groups}}",
									"host": [
										"{{Created position's groups}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign first group from first position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Created position's groups}}/{{Created group's id}}",
									"host": [
										"{{Created position's groups}}"
									],
									"path": [
										"{{Created group's id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign first group from second position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Second created position's groups}}/{{Created group's id}}",
									"host": [
										"{{Second created position's groups}}"
									],
									"path": [
										"{{Created group's id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign second group from first position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Created position's groups}}/{{Second created group's id}}",
									"host": [
										"{{Created position's groups}}"
									],
									"path": [
										"{{Second created group's id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign second group from second position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Second created position's groups}}/{{Second created group's id}}",
									"host": [
										"{{Second created position's groups}}"
									],
									"path": [
										"{{Second created group's id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve first position's groups",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain second created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Second created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created position's groups}}",
									"host": [
										"{{Created position's groups}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve second position's groups",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain second created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Second created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Second created position's groups}}",
									"host": [
										"{{Second created position's groups}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "One timezone can be assigned to many users",
					"item": [
						{
							"name": "Assign timezone to first user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"timezone\": \"{{Created timezone}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Created user}}",
									"host": [
										"{{Created user}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign timezone to second user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"timezone\": \"{{Created timezone}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Second created user}}",
									"host": [
										"{{Second created user}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve timezone's users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Contains created user\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const users = jsonData._embedded.users;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < users.length; i++) {\r",
											"        if (users[i]._links.user.href == pm.collectionVariables.get(\"Created user\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Contains second created user\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const users = jsonData._embedded.users;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < users.length; i++) {\r",
											"        if (users[i]._links.user.href == pm.collectionVariables.get(\"Second created user\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created timezone's users}}",
									"host": [
										"{{Created timezone's users}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign timezone from first user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Created user's timezone}}",
									"host": [
										"{{Created user's timezone}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign timezone from second user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Second created user's timezone}}",
									"host": [
										"{{Second created user's timezone}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve timezone's users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain created user\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const users = jsonData._embedded.users;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < users.length; i++) {\r",
											"        if (users[i]._links.user.href == pm.collectionVariables.get(\"Created user\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain second created user\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const users = jsonData._embedded.users;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < users.length; i++) {\r",
											"        if (users[i]._links.user.href == pm.collectionVariables.get(\"Second created user\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created timezone's users}}",
									"host": [
										"{{Created timezone's users}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Many jurisdictions can be assigned to many groups",
					"item": [
						{
							"name": "Assign both jurisdictions to first group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{Created jurisdiction}}\r\n{{Second created jurisdiction}}",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{Created group's jurisdictions}}",
									"host": [
										"{{Created group's jurisdictions}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign both jurisdictions to second group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{Created jurisdiction}}\r\n{{Second created jurisdiction}}",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{Second created group's jurisdictions}}",
									"host": [
										"{{Second created group's jurisdictions}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve first jurisdiction's groups",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Contains created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Contains second created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Second created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created jurisdiction's groups}}",
									"host": [
										"{{Created jurisdiction's groups}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve second jurisdiction's groups",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Contains created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Contains second created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Second created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Second created jurisdiction's groups}}",
									"host": [
										"{{Second created jurisdiction's groups}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign first jurisdiction from first group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Created group's jurisdictions}}/{{Created jurisdiction's id}}",
									"host": [
										"{{Created group's jurisdictions}}"
									],
									"path": [
										"{{Created jurisdiction's id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign first jurisdiction from second group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Second created group's jurisdictions}}/{{Created jurisdiction's id}}",
									"host": [
										"{{Second created group's jurisdictions}}"
									],
									"path": [
										"{{Created jurisdiction's id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign second jurisdiction from first group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Created group's jurisdictions}}/{{Second created jurisdiction's id}}",
									"host": [
										"{{Created group's jurisdictions}}"
									],
									"path": [
										"{{Second created jurisdiction's id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deassign second jurisdiction from second group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/uri-list"
									}
								],
								"url": {
									"raw": "{{Second created group's jurisdictions}}/{{Second created jurisdiction's id}}",
									"host": [
										"{{Second created group's jurisdictions}}"
									],
									"path": [
										"{{Second created jurisdiction's id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve first jurisdiction's groups",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain second created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Second created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Created jurisdiction's groups}}",
									"host": [
										"{{Created jurisdiction's groups}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve second jurisdiction's groups",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 200 OK status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(200);\r",
											"    pm.expect(response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});\r",
											"\r",
											"pm.test(\"Does not contain second created group\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const groups = jsonData._embedded.groups;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < groups.length; i++) {\r",
											"        if (groups[i]._links.group.href == pm.collectionVariables.get(\"Second created group\")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.false;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Second created jurisdiction's groups}}",
									"host": [
										"{{Second created jurisdiction's groups}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Teardown",
					"item": [
						{
							"name": "Delete user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Created user}}",
									"host": [
										"{{Created user}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete second user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Second created user}}",
									"host": [
										"{{Second created user}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Created group}}",
									"host": [
										"{{Created group}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete second group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Second created group}}",
									"host": [
										"{{Second created group}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete permission type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Created permission type}}",
									"host": [
										"{{Created permission type}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete permission",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Created permission}}",
									"host": [
										"{{Created permission}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete second permission",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Second created permission}}",
									"host": [
										"{{Second created permission}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete timezone",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Created timezone}}",
									"host": [
										"{{Created timezone}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Created position}}",
									"host": [
										"{{Created position}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete second position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Second created position}}",
									"host": [
										"{{Second created position}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete third position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns an empty body\", () => {\r",
											"    const response = pm.response.text();\r",
											"\r",
											"    pm.expect(response.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Third created position}}",
									"host": [
										"{{Third created position}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete jurisdiction",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Created jurisdiction}}",
									"host": [
										"{{Created jurisdiction}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete second jurisdiction",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Second created jurisdiction}}",
									"host": [
										"{{Second created jurisdiction}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete flag definition",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Created flag definition}}",
									"host": [
										"{{Created flag definition}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete second flag definition",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Second created flag definition}}",
									"host": [
										"{{Second created flag definition}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Misc",
			"item": [
				{
					"name": "Authorized via group",
					"item": [
						{
							"name": "Create a user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 201 Created status\", () => {\r",
											"    const response = pm.response;\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(response.code).to.equal(201);\r",
											"    pm.expect(response.status).to.equal(\"Created\");\r",
											"\r",
											"    pm.collectionVariables.set(\"Created user\", jsonData._links.user.href);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "PrivilegedUser",
											"type": "string"
										},
										{
											"key": "password",
											"value": "1ncharge",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"username\": \"{{Username}}\",\n    \"password\": \"{{Password}}\",\n    \"firstName\": \"{{First name}}\",\n    \"lastName\": \"{{Last name}}\",\n    \"email\": \"{{Email}}\",\n    \"status\": \"{{User status}}\",\n    \"passwordExpires\": \"{{Password expires}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Users endpoint}}",
									"host": [
										"{{Users endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 204 No Content status\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(204);\r",
											"    pm.expect(response.status).to.equal(\"No Content\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "PrivilegedUser",
											"type": "string"
										},
										{
											"key": "password",
											"value": "1ncharge",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Created user}}",
									"host": [
										"{{Created user}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Other",
					"item": [
						{
							"name": "Endpoint not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(404);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: not found\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{Users endpoint}}xxx",
									"host": [
										"{{Users endpoint}}xxx"
									]
								}
							},
							"response": []
						},
						{
							"name": "Resource not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 404 Not Found\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(404);\r",
											"    pm.expect(response.status).to.equal(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(404);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: not found\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{Users endpoint}}/{{Incorrect id}}",
									"host": [
										"{{Users endpoint}}"
									],
									"path": [
										"{{Incorrect id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "No credentials sent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 401 Unauthorizeddd\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(401);\r",
											"    pm.expect(response.status).to.equal(\"Unauthorized\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(401);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: unauthorized\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();\r",
											"const url = pm.collectionVariables.get(\"Users endpoint\");\r",
											"\r",
											"jar.clear(pm.collectionVariables.get(\"Users endpoint\"), (error) => {\r",
											"    if (error) {\r",
											"        console.error(error);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{Users endpoint}}",
									"host": [
										"{{Users endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Wrong username",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 401 Unauthorized\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(401);\r",
											"    pm.expect(response.status).to.equal(\"Unauthorized\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(401);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: unauthorized\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "invalid_password",
											"type": "string"
										},
										{
											"key": "username",
											"value": "invalid_user",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{Users endpoint}}",
									"host": [
										"{{Users endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Wrong password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 401 Unauthorized\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(401);\r",
											"    pm.expect(response.status).to.equal(\"Unauthorized\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(401);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: unauthorized\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "Administrator",
											"type": "string"
										},
										{
											"key": "password",
											"value": "invalid_password",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{Users endpoint}}",
									"host": [
										"{{Users endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Access forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 403 Forbidden\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(403);\r",
											"    pm.expect(response.status).to.equal(\"Forbidden\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(403);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: forbidden\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "1ncharge",
											"type": "string"
										},
										{
											"key": "username",
											"value": "NonPrivilegedUser",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{Users endpoint}}",
									"host": [
										"{{Users endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "URL incorrect data type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: data type conversion\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message.startsWith(\"input string: \")) {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{Groups endpoint}}/a",
									"host": [
										"{{Groups endpoint}}"
									],
									"path": [
										"a"
									]
								}
							},
							"response": []
						},
						{
							"name": "Missing body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: missing input\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message == \"missing input\") {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{Users endpoint}}",
									"host": [
										"{{Users endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Malformed body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returns a 400 Bad Request\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.code).to.equal(400);\r",
											"    pm.expect(response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is Problem JSON\", () => {\r",
											"    const response = pm.response;\r",
											"\r",
											"    pm.expect(response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returns expected JSON schema\", () => {\r",
											"    const schema = pm.collectionVariables.get(\"Problem schema\");\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Problem JSON contains expected values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.title).to.equal(pm.collectionVariables.get(\"Problem: malformed input\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Contains the expected failure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const failures = jsonData.failures;\r",
											"    var found = false;\r",
											"\r",
											"    for (var i = 0; i < failures.length; i++) {\r",
											"        if (failures[i].message == \"malformed JSON input\") {\r",
											"            found = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"username\": \"{{Username}}\",\n    \"password\": \"{{Password}}\",\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Users endpoint}}",
									"host": [
										"{{Users endpoint}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "password",
				"value": "1ncharge",
				"type": "string"
			},
			{
				"key": "username",
				"value": "Administrator",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.collectionVariables.set(\"Actuator health schema\", {",
					"    \"type\": \"object\",",
					"    \"properties\": {",
					"        \"status\": { \"type\": \"string\" }",
					"    },",
					"    \"required\": [",
					"        \"status\"",
					"    ],",
					"    \"additionalProperties\": false",
					"});",
					"",
					"pm.collectionVariables.set(\"Entry point schema\", {",
					"    \"type\": \"object\",",
					"    \"properties\": {",
					"        \"_links\": {",
					"            \"type\": \"object\",",
					"            \"properties\": {",
					"                \"permissions\": {",
					"                    \"type\": \"object\",",
					"                    \"properties\": {",
					"                        \"href\": { \"type\": \"string\" }",
					"                    },",
					"                    \"required\": [ \"href\" ],",
					"                    \"additionalProperties\": false",
					"                },",
					"                \"positions\": {",
					"                    \"type\": \"object\",",
					"                    \"properties\": {",
					"                        \"href\": { \"type\": \"string\" }",
					"                    },",
					"                    \"required\": [ \"href\" ],",
					"                    \"additionalProperties\": false",
					"                },",
					"                \"permissionTypes\": {",
					"                    \"type\": \"object\",",
					"                    \"properties\": {",
					"                        \"href\": { \"type\": \"string\" }",
					"                    },",
					"                    \"required\": [ \"href\" ],",
					"                    \"additionalProperties\": false",
					"                },",
					"                \"users\": {",
					"                    \"type\": \"object\",",
					"                    \"properties\": {",
					"                        \"href\": { \"type\": \"string\" }",
					"                    },",
					"                    \"required\": [ \"href\" ],",
					"                    \"additionalProperties\": false",
					"                },",
					"                \"groups\": {",
					"                    \"type\": \"object\",",
					"                    \"properties\": {",
					"                        \"href\": { \"type\": \"string\" }",
					"                    },",
					"                    \"required\": [ \"href\" ],",
					"                    \"additionalProperties\": false",
					"                },                ",
					"                \"timezones\": {",
					"                    \"type\": \"object\",",
					"                    \"properties\": {",
					"                        \"href\": { \"type\": \"string\" }",
					"                    },",
					"                    \"required\": [ \"href\" ],",
					"                    \"additionalProperties\": false",
					"                },",
					"                \"jurisdictions\": {",
					"                    \"type\": \"object\",",
					"                    \"properties\": {",
					"                        \"href\": { \"type\": \"string\" }",
					"                    },",
					"                    \"required\": [ \"href\" ],",
					"                    \"additionalProperties\": false",
					"                },",
					"                \"flags\": {",
					"                    \"type\": \"object\",",
					"                    \"properties\": {",
					"                        \"href\": { \"type\": \"string\" }",
					"                    },",
					"                    \"required\": [ \"href\" ],",
					"                    \"additionalProperties\": false",
					"                },",
					"                \"flagDefinitions\": {",
					"                    \"type\": \"object\",",
					"                    \"properties\": {",
					"                        \"href\": { \"type\": \"string\" }",
					"                    },",
					"                    \"required\": [ \"href\" ],",
					"                    \"additionalProperties\": false",
					"                },",
					"                \"profile\": {",
					"                    \"type\": \"object\",",
					"                    \"properties\": {",
					"                        \"href\": { \"type\": \"string\" }",
					"                    },",
					"                    \"required\": [ \"href\" ],",
					"                    \"additionalProperties\": false",
					"                }",
					"            },",
					"            \"required\": [",
					"                \"permissions\",",
					"                \"positions\",",
					"                \"permissionTypes\",",
					"                \"users\",",
					"                \"groups\",",
					"                \"timezones\",",
					"                \"jurisdictions\",",
					"                \"flags\",",
					"                \"flagDefinitions\",",
					"                \"profile\"",
					"            ],",
					"            \"additionalProperties\": false",
					"        }",
					"    },",
					"    \"required\": [ \"_links\" ],",
					"    \"additionalProperties\": false",
					"});",
					"",
					"pm.collectionVariables.set(\"Problem schema\", {",
					"    \"type\": \"object\",",
					"    \"properties\": {",
					"        \"status\": { \"type\": \"integer\" },",
					"        \"type\": { \"type\": \"string\" },",
					"        \"title\": { \"type\": \"string\" },",
					"        \"detail\": { \"type\": \"string\" },",
					"        \"instance\": { \"type\": \"string\" },",
					"        \"failures\": {",
					"            \"type\": \"array\",",
					"            \"items\": {",
					"                \"anyOf\": [",
					"                    {",
					"                        \"type\": \"object\",",
					"                        \"properties\": {",
					"                            \"message\": { \"type\": \"string\" },",
					"                            \"constraint\": { \"type\": \"string\" },",
					"                            \"advice\": { \"type\": \"string\" },",
					"                            \"example\": { \"type\": \"string\" }",
					"                        },",
					"                        \"required\": [ ",
					"                            \"message\"",
					"                        ],",
					"                        \"additionalProperties\": false",
					"                    }",
					"                ]",
					"            },",
					"        },",
					"    },",
					"    \"required\": [",
					"        \"status\",",
					"        \"title\",",
					"        \"instance\"",
					"    ],",
					"    \"additionalProperties\": false",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"id": "a35f8cdb-52a3-4795-bcfc-2fc9097c7746",
			"key": "Health endpoint",
			"value": "{{Backoffice User Manager URL}}/actuator/health"
		},
		{
			"id": "4cd838ff-a0e8-4521-81c6-a6852e4c13b3",
			"key": "Home endpoint",
			"value": "{{Backoffice User Manager URL}}/api/v1"
		},
		{
			"id": "e21214da-96c0-4f32-bdff-084919e6f7cb",
			"key": "Authentication user",
			"value": "Administrator"
		},
		{
			"id": "83b58060-14b8-4871-a4b8-1f317b7a2de8",
			"key": "Authentication password",
			"value": "1ncharge"
		},
		{
			"id": "fa2092d4-af86-42cd-aed1-e803da74e1ec",
			"key": "Incorrect id",
			"value": "9999999"
		},
		{
			"id": "33cb348a-ded4-4b0e-8a7b-8130e7c72d9e",
			"key": "Username",
			"value": "ktsagkournis"
		},
		{
			"id": "b553ce3a-6a83-4e5f-8c35-8ad621c22686",
			"key": "Modified username",
			"value": "kstefanis"
		},
		{
			"id": "80451aad-a0d8-4ffd-8e88-bb70ae4f71bb",
			"key": "Password",
			"value": "T3t3nt3k"
		},
		{
			"id": "61c115ea-23ae-4e84-b2d9-267e37aef243",
			"key": "First name",
			"value": "Kostas"
		},
		{
			"id": "a13848f8-4f62-4ca4-8eac-af643464acc5",
			"key": "Last name",
			"value": "Tsagkournis"
		},
		{
			"id": "305d45b3-a7ef-4960-8ec7-b5e24981845a",
			"key": "Modified last name",
			"value": "Stefanis"
		},
		{
			"id": "bd320417-8e17-4d2a-be87-2a30113ca991",
			"key": "Email",
			"value": "ktsagkou@yahoo.gr"
		},
		{
			"id": "4e630d60-1db7-430f-998f-f4feed554847",
			"key": "User status",
			"value": "A"
		},
		{
			"id": "11848902-2096-4e1c-9e64-7cd6b9f49839",
			"key": "Password expires",
			"value": "Y"
		},
		{
			"id": "983a045c-019a-4033-905e-a43d06e8e1ce",
			"key": "Permission type name",
			"value": "GDPR"
		},
		{
			"id": "36a956bf-7982-4622-833c-636c6d27156d",
			"key": "Permission type description",
			"value": "GDPR permission type"
		},
		{
			"id": "1cc74ccd-80b4-42e1-9ed9-ba8f90d93973",
			"key": "Modified permission type description",
			"value": "GDPR permission type value"
		},
		{
			"id": "5cb95522-5a17-4fdc-a42f-ba0623be63cc",
			"key": "Default permission type name",
			"value": "GEN"
		},
		{
			"id": "658281a5-6fa2-4129-a01c-91948d903289",
			"key": "Default permission type description",
			"value": "Default permission type"
		},
		{
			"id": "5f4a7257-b9f4-45ae-a3ee-6d1ce752875a",
			"key": "Display order",
			"value": "0"
		},
		{
			"id": "857547e4-a66b-43eb-a7b0-50a02414f2c5",
			"key": "Incorrect permission type id",
			"value": "DFLT"
		},
		{
			"id": "1f12aa05-c4db-4826-bb89-df00ef7d515c",
			"key": "Permission name",
			"value": "CanViewSensitiveData"
		},
		{
			"id": "8a5959a1-dab9-44f7-b3cc-56341d661f98",
			"key": "Permission description",
			"value": "Can view sensitive data"
		},
		{
			"id": "d6847bdc-b851-418e-92aa-87b95e353b49",
			"key": "Modified permission description",
			"value": "Can access sensitive data"
		},
		{
			"id": "10635884-76b4-46e8-a8f7-29ff3b52d164",
			"key": "Incorrect permission id",
			"value": "CanAccessSensitiveData"
		},
		{
			"id": "74df97c6-23f2-4c75-8852-fb9d98ec9bb8",
			"key": "Timezone name",
			"value": "Europe/Bucharest"
		},
		{
			"id": "39a7c01e-a7d4-4c62-a6f6-dd1dba7b0f89",
			"key": "Modified timezone name",
			"value": "Europe/Cluj"
		},
		{
			"id": "00fa976f-a442-4404-b8f3-054cc2451f9d",
			"key": "Timezone status",
			"value": "A"
		},
		{
			"id": "b3f338d8-927c-491d-9ca7-6009ff751fe4",
			"key": "Display",
			"value": "Y"
		},
		{
			"id": "4b07e43b-5995-42f6-9624-b1c640a6b549",
			"key": "Position name",
			"value": "Software Engineer"
		},
		{
			"id": "7f019c45-47ce-4321-b3e0-1368d6579a8f",
			"key": "Modified position name",
			"value": "Systems Engineer"
		},
		{
			"id": "e1af1490-dec0-4bae-afa5-475cbf122cc9",
			"key": "Alternate position name",
			"value": "QA Analyst"
		},
		{
			"id": "6ab952e0-6624-4d93-b2d2-c2ea78259617",
			"key": "Group name",
			"value": "Administrators"
		},
		{
			"id": "9dc14c0e-af76-439c-8367-b641144c58df",
			"key": "Modified group name",
			"value": "HR"
		},
		{
			"id": "81258f07-4ca9-43b0-9a25-a1ebfb1c664e",
			"key": "Jurisdiction name",
			"value": "GREECE"
		},
		{
			"id": "05624e88-36a5-4295-948d-f608954dcb80",
			"key": "Modified jurisdiction name",
			"value": "AUSTRALIA"
		},
		{
			"id": "4d131f6f-cad1-4145-a524-51802e1cdb69",
			"key": "Flag value name",
			"value": "IS_AUTOMATED"
		},
		{
			"id": "b8cdbe59-d11b-4313-abce-25a849645868",
			"key": "Flag value",
			"value": "0"
		},
		{
			"id": "66f4dbd9-12f4-4225-8533-8243cbfb14a2",
			"key": "Flag modified value",
			"value": "1"
		},
		{
			"id": "cc234cc9-0ee9-4a09-8309-01ff352cb28d",
			"key": "Flag definition name",
			"value": "LANGUAGE"
		},
		{
			"id": "eb186a1a-df51-49c8-bbe7-4c840e0b4f0e",
			"key": "Flag definition description",
			"value": "The user's language"
		},
		{
			"id": "69a41c2f-a3fd-4acf-a567-303ff9f996db",
			"key": "Flag definition note",
			"value": "Only affects specific components"
		},
		{
			"id": "2f5d0451-2f34-4314-8102-c54e5e3f09f3",
			"key": "Flag definition default value",
			"value": "English"
		},
		{
			"id": "71cb8d38-153e-4660-9741-b045abd12c86",
			"key": "Modified flag definition note",
			"value": "Only affects some components"
		},
		{
			"id": "0619e501-fc18-48e4-81dc-06825ffb3290",
			"key": "Permission types endpoint",
			"value": ""
		},
		{
			"id": "ff10ae8d-a071-43a0-bafb-01319371ba24",
			"key": "Permissions endpoint",
			"value": ""
		},
		{
			"id": "38812927-4505-4dac-81c7-bb522f02cbe0",
			"key": "Positions endpoint",
			"value": ""
		},
		{
			"id": "a5e652d3-6175-492b-80aa-bf1239a12d64",
			"key": "Profile endpoint",
			"value": ""
		},
		{
			"id": "7d2f50f9-d1b8-49ee-8b06-39c2319f0483",
			"key": "Timezones endpoint",
			"value": ""
		},
		{
			"id": "a0ee58ef-cf0d-4159-8fce-b866f30e2291",
			"key": "Users endpoint",
			"value": ""
		},
		{
			"id": "3472b18f-45d5-453b-8977-6e3d5ab67f05",
			"key": "Created user",
			"value": ""
		},
		{
			"id": "f14c557a-6c64-4398-9119-e0ee0bfdb504",
			"key": "Created user's id",
			"value": ""
		},
		{
			"id": "891bf64c-8866-4807-94bc-4d7387655b76",
			"key": "Created user's permissions",
			"value": ""
		},
		{
			"id": "baa80ae1-2035-4237-bb84-27173dbc31dc",
			"key": "Created user's position",
			"value": ""
		},
		{
			"id": "b69c42be-3026-4b20-8492-48dbe45ea605",
			"key": "Created user's timezone",
			"value": ""
		},
		{
			"id": "34231f70-a015-406f-a64c-2f275c0b433d",
			"key": "Second created user",
			"value": ""
		},
		{
			"id": "206b394b-3239-440d-b757-37e9d6d1b9a5",
			"key": "Created permission type",
			"value": ""
		},
		{
			"id": "6ab22d3f-2c27-450f-ac17-180b6d1501d8",
			"key": "Created permission type's permissions",
			"value": ""
		},
		{
			"id": "b82ac890-60fa-4feb-bdd1-e787091c6da9",
			"key": "Second created permission type",
			"value": ""
		},
		{
			"id": "bb71717d-04e3-4b80-86a2-652fe1f8a034",
			"key": "Created permission",
			"value": ""
		},
		{
			"id": "41ee9855-43c0-438e-9708-cc620a1b9dc6",
			"key": "Created permission's type",
			"value": ""
		},
		{
			"id": "84146c1d-ba41-4bc4-9185-8eb7d8aa1436",
			"key": "Created permission's users",
			"value": ""
		},
		{
			"id": "ddec2bc3-b701-4da4-8008-8b498aeb06db",
			"key": "Second created permission",
			"value": ""
		},
		{
			"id": "a02e507a-1d13-42de-bd1d-c8ea082a8e8f",
			"key": "Created timezone",
			"value": ""
		},
		{
			"id": "dd1f50cc-5277-4ebf-a063-994f458a8811",
			"key": "Created timezone's users",
			"value": ""
		},
		{
			"id": "b83355eb-9bd3-4e92-90a6-87ea29efd012",
			"key": "Second created timezone",
			"value": ""
		},
		{
			"id": "a3461a6e-e264-4330-94d0-25439795878b",
			"key": "Created position",
			"value": ""
		},
		{
			"id": "1e3f16a8-aad8-446d-8553-702399d854b1",
			"key": "Created position's child positions",
			"value": ""
		},
		{
			"id": "5c5df4df-ce3e-451c-a1fd-c181d034989d",
			"key": "Created position's parent position",
			"value": ""
		},
		{
			"id": "8c2e0f2b-8378-4103-80a4-531862f14ccb",
			"key": "Created position's users",
			"value": ""
		},
		{
			"id": "551a58e4-bb54-47b4-8abd-bb863a443d70",
			"key": "Second created position",
			"value": ""
		},
		{
			"id": "13c817b6-ff8d-47fb-b18c-883706705dab",
			"key": "User schema",
			"value": ""
		},
		{
			"id": "d9548d0d-f7a6-4d1d-8b1f-307d176771ea",
			"key": "User collection schema",
			"value": ""
		},
		{
			"id": "e7f12af5-8ac5-493e-9ea5-2267458acba2",
			"key": "User item schema",
			"value": ""
		},
		{
			"id": "9a706a32-77c7-4d55-a62d-53019d28ec73",
			"key": "User search schema",
			"value": ""
		},
		{
			"id": "51329999-84c8-48e8-9645-1cea6a6c046c",
			"key": "User search root schema",
			"value": ""
		},
		{
			"id": "3cd1c405-f31a-4837-8c1a-8fcc3dd78025",
			"key": "User search term schema",
			"value": ""
		},
		{
			"id": "00a3fc12-150c-4188-8f2f-a0786868a3ba",
			"key": "Permission type collection schema",
			"value": ""
		},
		{
			"id": "a613b37e-2eee-4c43-adad-7f073b921c11",
			"key": "Permission type item schema",
			"value": ""
		},
		{
			"id": "2c70f51b-4bc2-4548-acce-d4e73c5c3ef6",
			"key": "Permission collection schema",
			"value": ""
		},
		{
			"id": "a35557ba-d9b4-43f9-9de2-2c1670588aed",
			"key": "Permission item schema",
			"value": ""
		},
		{
			"id": "29ebc6bb-6012-4a1e-bac4-a17dd33eef40",
			"key": "Timezone collection schema",
			"value": ""
		},
		{
			"id": "148f23e9-1cf1-427c-9b9d-e912aaafc623",
			"key": "Timezone item schema",
			"value": ""
		},
		{
			"id": "59f235d0-f5e5-41a8-a48d-28915893ff11",
			"key": "Position collection schema",
			"value": ""
		},
		{
			"id": "75d6ffae-ce1c-46bd-8414-f76bd5089253",
			"key": "Position item schema",
			"value": ""
		},
		{
			"id": "10351ad6-b78c-4a88-8c37-791b9379c99b",
			"key": "Actuator health schema",
			"value": ""
		},
		{
			"id": "cd34d7c0-c56f-4db0-badd-46c492631b47",
			"key": "Entry point schema",
			"value": ""
		},
		{
			"id": "20c44280-bf6e-4443-be35-b0e4825ce03f",
			"key": "Groups endpoint",
			"value": ""
		},
		{
			"id": "326d0157-5981-4ff4-a4c6-5a1489a5bb90",
			"key": "Group collection schema",
			"value": ""
		},
		{
			"id": "c5f0569d-bbf1-45f0-bce1-dd9f3bc54c76",
			"key": "Group item schema",
			"value": ""
		},
		{
			"id": "7c741c3f-0e52-4507-8e34-c7970b0cd334",
			"key": "Created group",
			"value": ""
		},
		{
			"id": "7915f1b4-a479-4604-8ec2-29d3f1fc3352",
			"key": "Created group's id",
			"value": ""
		},
		{
			"id": "624a0592-38d6-47d3-b272-4a29457c943b",
			"key": "Created group's owner",
			"value": ""
		},
		{
			"id": "60f49a58-e243-47eb-81e5-50b5cba3a2f4",
			"key": "Second created group",
			"value": ""
		},
		{
			"id": "e4ed9b05-1076-4fc6-98cc-1eeabb576c54",
			"key": "Created group's permissions",
			"value": ""
		},
		{
			"id": "1b546221-e2b7-43cf-bde6-7c9ea09d36d8",
			"key": "Created group's positions",
			"value": ""
		},
		{
			"id": "b193b498-fd37-4543-b889-8b3cda2adf14",
			"key": "Created group's users",
			"value": ""
		},
		{
			"id": "c8344824-822e-48fc-ac0d-3b3c906d62ee",
			"key": "Created user's groups",
			"value": ""
		},
		{
			"id": "3b466fbb-d1ab-454f-b183-946134b4b983",
			"key": "Created user's ownedGroups",
			"value": ""
		},
		{
			"id": "0f4c1f3e-ef59-456c-95db-4aaf859dc13d",
			"key": "Created user's owned groups",
			"value": ""
		},
		{
			"id": "f7a5bd50-81a8-492b-96be-eaa44e1b0edc",
			"key": "Created position's groups",
			"value": ""
		},
		{
			"id": "4faaaf3e-96d0-471a-a033-fe3f0aec4e7b",
			"key": "Created permission's groups",
			"value": ""
		},
		{
			"id": "4917e87d-ae25-4a66-bb9f-6c18b3553d13",
			"key": "Second created group's id",
			"value": ""
		},
		{
			"id": "70dbf557-be27-41ce-9ac2-f1989f299f53",
			"key": "Second created permission's type",
			"value": ""
		},
		{
			"id": "1d3b1f4e-9797-4d9a-94af-ae89245257c1",
			"key": "Second created permission's users",
			"value": ""
		},
		{
			"id": "7c4c0967-1831-4037-bcb6-7dbf60b64e07",
			"key": "Second created permission's groups",
			"value": ""
		},
		{
			"id": "aa382c0a-8971-4a17-acb1-8fd76e5d68db",
			"key": "Second created group's owner",
			"value": ""
		},
		{
			"id": "2ed13782-2e47-4dcb-a648-019a00e6ec57",
			"key": "Second created user's timezone",
			"value": ""
		},
		{
			"id": "a5723dce-3870-4fe4-b3f3-18e6d6712071",
			"key": "Second created user's permissions",
			"value": ""
		},
		{
			"id": "375cc546-bd18-454f-afe6-8c7e3c0e6436",
			"key": "Second created user's position",
			"value": ""
		},
		{
			"id": "d12692bb-ea27-4987-b807-92f8231c6459",
			"key": "Second created user's owned groups",
			"value": ""
		},
		{
			"id": "333a291a-a677-4495-b8f1-c7d25a82be36",
			"key": "Second created user's groups",
			"value": ""
		},
		{
			"id": "2add560c-2c24-4bc8-b201-e4487892f06d",
			"key": "Second created user's id",
			"value": ""
		},
		{
			"id": "014b035a-df1f-467a-983f-2b01364d2195",
			"key": "Created permission's id",
			"value": ""
		},
		{
			"id": "7752d4d3-37e2-43d4-9f26-3b97281aae72",
			"key": "Second created permission's id",
			"value": ""
		},
		{
			"id": "8f43f631-49f1-42d5-8315-f871cc45aa33",
			"key": "Second created group's users",
			"value": ""
		},
		{
			"id": "bb4c578d-e471-44fb-a37b-e1bf22f844ac",
			"key": "Second created group's permissions",
			"value": ""
		},
		{
			"id": "ca480b15-629d-4b43-adb7-ee539353078b",
			"key": "Second created position's child positions",
			"value": ""
		},
		{
			"id": "ade96391-cf25-453d-9a5c-af6854d4fcb6",
			"key": "Second created position's parent position",
			"value": ""
		},
		{
			"id": "7994dedf-e5b5-419e-b590-b7dd12b183df",
			"key": "Second created position's users",
			"value": ""
		},
		{
			"id": "e03a8abd-0648-445c-996d-360d904e2c16",
			"key": "Second created position's groups",
			"value": ""
		},
		{
			"id": "72818123-c825-4bc4-94e3-69a0fae600e8",
			"key": "Third created position",
			"value": ""
		},
		{
			"id": "390e6d7f-2b3b-4203-8043-605b78147075",
			"key": "Third created position's child positions",
			"value": ""
		},
		{
			"id": "359670fa-6a09-4cfc-b7e4-d271c9000bf4",
			"key": "Third created position's parent position",
			"value": ""
		},
		{
			"id": "75e150e2-8fef-4c0c-af30-7e15b87a401f",
			"key": "Third created position's users",
			"value": ""
		},
		{
			"id": "f347b24c-a511-42e0-9a59-7c1098fd4ecd",
			"key": "Third created position's groups",
			"value": ""
		},
		{
			"id": "4e510a31-9e6a-433a-8756-421e0eb639b6",
			"key": "Second created group's positions",
			"value": ""
		},
		{
			"id": "3bd1927f-b7e5-4a57-ad80-f612952d8733",
			"key": "Problem schema",
			"value": ""
		},
		{
			"id": "f21abaec-f987-4893-84aa-7407ca5263a3",
			"key": "Problem: primary id required",
			"value": "Primary identifier required"
		},
		{
			"id": "485865c2-1078-4ec0-8d59-4ff759fa94ba",
			"key": "Problem: primary id change",
			"value": "Primary identifier change attempt"
		},
		{
			"id": "1d6bad31-1f21-4c8a-8f33-65e84329772c",
			"key": "Problem: app violation",
			"value": "Application level constraint violation"
		},
		{
			"id": "c5d060b4-0227-4252-8e1b-aec174940e88",
			"key": "Problem: db violation",
			"value": "Database level constraint violation"
		},
		{
			"id": "5639009d-4d19-4b4f-905e-eec4d5c11c84",
			"key": "Problem: enum violation",
			"value": "Enumeration constraint violation"
		},
		{
			"id": "e8003c94-b006-4827-8fa0-50ef13d6cd44",
			"key": "Problem: data type conversion",
			"value": "Data type conversion failure"
		},
		{
			"id": "c35913b2-aad3-4270-b969-c9551097df59",
			"key": "Problem: missing input",
			"value": "Missing input"
		},
		{
			"id": "837fdb61-9955-412f-9d2e-5a2c1cd2ae59",
			"key": "Problem: malformed input",
			"value": "Malformed input"
		},
		{
			"id": "d554fa8b-fddd-4d18-bf60-254ef393522b",
			"key": "Problem: immutable id change",
			"value": "Immutable identifier change attempt"
		},
		{
			"id": "6f91ceb8-b882-453c-a872-096b90d0216d",
			"key": "Problem: not found",
			"value": "Not Found"
		},
		{
			"id": "e9025fb4-21b4-4a21-a44b-5d1b91af203d",
			"key": "Problem: unauthorized",
			"value": "Unauthorized"
		},
		{
			"id": "c2076123-5e3a-4173-a402-f6867192d7f6",
			"key": "Problem: forbidden",
			"value": "Forbidden"
		},
		{
			"id": "d5800f7b-a608-4dee-8360-56023cd2a881",
			"key": "Permission search root schema",
			"value": ""
		},
		{
			"id": "487c23f4-01df-48f1-bee6-c6e304c485fe",
			"key": "Permission search term schema",
			"value": ""
		},
		{
			"id": "16e2f2d9-d4a4-4b90-88e1-517ee6881f97",
			"key": "Jurisdictions endpoint",
			"value": ""
		},
		{
			"id": "c1b2bb75-6cdd-4bde-851d-cff8ae19e9ae",
			"key": "Jurisdiction item schema",
			"value": ""
		},
		{
			"id": "1fd3bd64-979b-427a-8b8e-b16df59846f6",
			"key": "Jurisdiction collection schema",
			"value": ""
		},
		{
			"id": "c6d70fe2-5f8f-4ab6-a0da-74915f3c0839",
			"key": "Created jurisdiction",
			"value": ""
		},
		{
			"id": "1d3230e4-d7ac-4e78-b0ab-76d747d950a9",
			"key": "Created jurisdiction's groups",
			"value": ""
		},
		{
			"id": "71faf44a-4d29-45ee-86c1-7d0feced1c01",
			"key": "Created jurisdiction's id",
			"value": ""
		},
		{
			"id": "40b7566f-d1d6-4584-ae2c-2037d51662c8",
			"key": "Second created jurisdiction",
			"value": ""
		},
		{
			"id": "c1dc8d5e-5014-4023-9cf9-1d9701f59e68",
			"key": "Created group's jurisdictions",
			"value": ""
		},
		{
			"id": "3af83dec-e8fc-4984-b2a7-0deef72bba9e",
			"key": "Second created group's jurisdictions",
			"value": ""
		},
		{
			"id": "b54c49e5-5cb8-4be9-8393-4067cdbc96c0",
			"key": "Second created jurisdiction's groups",
			"value": ""
		},
		{
			"id": "471027a4-cca8-49d4-a443-fcdd7cee2fab",
			"key": "Second created jurisdiction's id",
			"value": ""
		},
		{
			"id": "3126748d-d387-4457-b791-5f88c38e740c",
			"key": "Flag values endpoint",
			"value": ""
		},
		{
			"id": "c9e4414f-73ba-4a42-8e26-ee6c23519009",
			"key": "Flag definitions endpoint",
			"value": ""
		},
		{
			"id": "b20adb35-09bd-4ec7-8790-ff35bd8878c7",
			"key": "Flag definition item schema",
			"value": ""
		},
		{
			"id": "de3e3a8a-82f1-4adc-9d2a-6e3253456114",
			"key": "Flag definition collection schema",
			"value": ""
		},
		{
			"id": "af4c1362-aeaa-45a6-8e18-5e224c5d0fe2",
			"key": "Created flag definition",
			"value": ""
		},
		{
			"id": "4ff30b5a-0da8-4b8f-9a27-be9659d2f310",
			"key": "Created flag definition's flags",
			"value": ""
		},
		{
			"id": "f4a02d1b-eedc-4a9b-9797-bf1e4f3c4dc9",
			"key": "Created flag definition's id",
			"value": ""
		},
		{
			"id": "ff4fa3b8-88eb-4b61-acdf-5faa48663934",
			"key": "Second created flag definition",
			"value": ""
		},
		{
			"id": "fcc493d8-ba3f-4a77-9eca-4ae5e95bedbb",
			"key": "Second created flag definition's flags",
			"value": ""
		},
		{
			"id": "f3c60d0b-c143-49d6-b51b-6d317f852cd9",
			"key": "Flags endpoint",
			"value": ""
		}
	]
}